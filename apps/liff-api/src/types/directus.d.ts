/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/assets/{id}": {
    /**
     * Get an Asset
     * @description Image typed files can be dynamically resized and transformed to fit any need.
     */
    get: operations["getAsset"];
  };
  "/auth/login": {
    /**
     * Retrieve a Temporary Access Token
     * @description Retrieve a Temporary Access Token
     */
    post: operations["login"];
  };
  "/auth/refresh": {
    /**
     * Refresh Token
     * @description Refresh a Temporary Access Token.
     */
    post: operations["refresh"];
  };
  "/auth/logout": {
    /**
     * Log Out
     * @description Log Out
     */
    post: operations["logout"];
  };
  "/auth/password/request": {
    /**
     * Request a Password Reset
     * @description Request a reset password email to be send.
     */
    post: operations["passwordRequest"];
  };
  "/auth/password/reset": {
    /**
     * Reset a Password
     * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
     */
    post: operations["passwordReset"];
  };
  "/auth/oauth": {
    /**
     * List OAuth Providers
     * @description List configured OAuth providers.
     */
    get: operations["oauth"];
  };
  "/auth/oauth/{provider}": {
    /**
     * Authenticated using an OAuth provider
     * @description Start OAuth flow using the specified provider
     */
    get: operations["oauthProvider"];
  };
  "/schema/snapshot": {
    /**
     * Retrieve Schema Snapshot
     * @description Retrieve the current schema. This endpoint is only available to admin users.
     */
    get: operations["schemaSnapshot"];
  };
  "/schema/apply": {
    /**
     * Apply Schema Difference
     * @description Update the instance's schema by passing the diff previously retrieved via `/schema/diff` endpoint in the JSON request body or a JSON/YAML file. This endpoint is only available to admin users.
     */
    post: operations["schemaApply"];
  };
  "/schema/diff": {
    /**
     * Retrieve Schema Difference
     * @description Compare the current instance's schema against the schema snapshot in JSON request body or a JSON/YAML file and retrieve the difference. This endpoint is only available to admin users.
     */
    post: operations["schemaDiff"];
  };
  "/server/info": {
    /**
     * System Info
     * @description Perform a system status check and return the options.
     */
    get: operations["serverInfo"];
  };
  "/server/ping": {
    /**
     * Ping
     * @description Ping, pong. Ping.. pong.
     */
    get: operations["ping"];
  };
  "/utils/hash/generate": {
    /**
     * Hash a string
     * @description Generate a hash for a given string.
     */
    post: operations["hash-generate"];
  };
  "/utils/hash/verify": {
    /**
     * Hash a string
     * @description Generate a hash for a given string.
     */
    post: operations["hash-verify"];
  };
  "/utils/sort/{collection}": {
    /**
     * Sort Items
     * @description Re-sort items in collection based on start and to value of item
     */
    post: operations["sort"];
  };
  "/utils/import/{collection}": {
    /**
     * Import Items
     * @description Import multiple records from a JSON or CSV file into a collection.
     */
    post: operations["import"];
  };
  "/utils/export/{collection}": {
    /**
     * Export Items
     * @description Export a larger data set to a file in the File Library
     */
    post: operations["export"];
  };
  "/utils/cache/clear": {
    /**
     * Clear Cache
     * @description Resets both the data and schema cache of Directus.
     */
    post: operations["clear-cache"];
  };
  "/utils/random/string": {
    /**
     * Get a Random String
     * @description Returns a random string of given length.
     */
    get: operations["random"];
  };
  "/items/llm_models": {
    /**
     * List Items
     * @description List the llm_models items.
     */
    get: operations["readItemsLLMModels"];
    /**
     * Create an Item
     * @description Create a new llm_models item.
     */
    post: operations["createItemsLLMModels"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing llm_models items.
     */
    delete: operations["deleteItemsLLMModels"];
    /**
     * Update Multiple Items
     * @description Update multiple llm_models items at the same time.
     */
    patch: operations["updateItemsLLMModels"];
  };
  "/items/llm_models/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single llm_models item by unique identifier.
     */
    get: operations["readSingleItemsLLMModels"];
    /**
     * Delete an Item
     * @description Delete an existing llm_models item.
     */
    delete: operations["deleteSingleItemsLLMModels"];
    /**
     * Update an Item
     * @description Update an existing llm_models item.
     */
    patch: operations["updateSingleItemsLLMModels"];
  };
  "/items/advance_profiles": {
    /**
     * List Items
     * @description List the advance_profiles items.
     */
    get: operations["readItemsAdvanceProfiles"];
    /**
     * Create an Item
     * @description Create a new advance_profiles item.
     */
    post: operations["createItemsAdvanceProfiles"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing advance_profiles items.
     */
    delete: operations["deleteItemsAdvanceProfiles"];
    /**
     * Update Multiple Items
     * @description Update multiple advance_profiles items at the same time.
     */
    patch: operations["updateItemsAdvanceProfiles"];
  };
  "/items/advance_profiles/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single advance_profiles item by unique identifier.
     */
    get: operations["readSingleItemsAdvanceProfiles"];
    /**
     * Delete an Item
     * @description Delete an existing advance_profiles item.
     */
    delete: operations["deleteSingleItemsAdvanceProfiles"];
    /**
     * Update an Item
     * @description Update an existing advance_profiles item.
     */
    patch: operations["updateSingleItemsAdvanceProfiles"];
  };
  "/items/advanced_profiles": {
    /**
     * List Items
     * @description List the advanced_profiles items.
     */
    get: operations["readItemsAdvancedProfiles"];
    /**
     * Create an Item
     * @description Create a new advanced_profiles item.
     */
    post: operations["createItemsAdvancedProfiles"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing advanced_profiles items.
     */
    delete: operations["deleteItemsAdvancedProfiles"];
    /**
     * Update Multiple Items
     * @description Update multiple advanced_profiles items at the same time.
     */
    patch: operations["updateItemsAdvancedProfiles"];
  };
  "/items/advanced_profiles/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single advanced_profiles item by unique identifier.
     */
    get: operations["readSingleItemsAdvancedProfiles"];
    /**
     * Delete an Item
     * @description Delete an existing advanced_profiles item.
     */
    delete: operations["deleteSingleItemsAdvancedProfiles"];
    /**
     * Update an Item
     * @description Update an existing advanced_profiles item.
     */
    patch: operations["updateSingleItemsAdvancedProfiles"];
  };
  "/items/voucher_views": {
    /**
     * List Items
     * @description List the voucher_views items.
     */
    get: operations["readItemsVoucherViews"];
    /**
     * Create an Item
     * @description Create a new voucher_views item.
     */
    post: operations["createItemsVoucherViews"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing voucher_views items.
     */
    delete: operations["deleteItemsVoucherViews"];
    /**
     * Update Multiple Items
     * @description Update multiple voucher_views items at the same time.
     */
    patch: operations["updateItemsVoucherViews"];
  };
  "/items/voucher_views/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single voucher_views item by unique identifier.
     */
    get: operations["readSingleItemsVoucherViews"];
    /**
     * Delete an Item
     * @description Delete an existing voucher_views item.
     */
    delete: operations["deleteSingleItemsVoucherViews"];
    /**
     * Update an Item
     * @description Update an existing voucher_views item.
     */
    patch: operations["updateSingleItemsVoucherViews"];
  };
  "/items/languages": {
    /**
     * List Items
     * @description List the languages items.
     */
    get: operations["readItemsLanguages"];
    /**
     * Create an Item
     * @description Create a new languages item.
     */
    post: operations["createItemsLanguages"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing languages items.
     */
    delete: operations["deleteItemsLanguages"];
    /**
     * Update Multiple Items
     * @description Update multiple languages items at the same time.
     */
    patch: operations["updateItemsLanguages"];
  };
  "/items/languages/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single languages item by unique identifier.
     */
    get: operations["readSingleItemsLanguages"];
    /**
     * Delete an Item
     * @description Delete an existing languages item.
     */
    delete: operations["deleteSingleItemsLanguages"];
    /**
     * Update an Item
     * @description Update an existing languages item.
     */
    patch: operations["updateSingleItemsLanguages"];
  };
  "/items/saas_helpdesk_translations": {
    /**
     * List Items
     * @description List the saas_helpdesk_translations items.
     */
    get: operations["readItemsSaasHelpdeskTranslations"];
    /**
     * Create an Item
     * @description Create a new saas_helpdesk_translations item.
     */
    post: operations["createItemsSaasHelpdeskTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_helpdesk_translations items.
     */
    delete: operations["deleteItemsSaasHelpdeskTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_helpdesk_translations items at the same time.
     */
    patch: operations["updateItemsSaasHelpdeskTranslations"];
  };
  "/items/saas_helpdesk_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_helpdesk_translations item by unique identifier.
     */
    get: operations["readSingleItemsSaasHelpdeskTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing saas_helpdesk_translations item.
     */
    delete: operations["deleteSingleItemsSaasHelpdeskTranslations"];
    /**
     * Update an Item
     * @description Update an existing saas_helpdesk_translations item.
     */
    patch: operations["updateSingleItemsSaasHelpdeskTranslations"];
  };
  "/roles": {
    /**
     * List Roles
     * @description List the roles.
     */
    get: operations["getRoles"];
    /**
     * Create a Role
     * @description Create a new role.
     */
    post: operations["createRole"];
    /**
     * Delete Multiple Roles
     * @description Delete multiple existing roles.
     */
    delete: operations["deleteRoles"];
    /**
     * Update Multiple Roles
     * @description Update multiple roles at the same time.
     */
    patch: operations["updateRoles"];
  };
  "/roles/{id}": {
    /**
     * Retrieve a Role
     * @description Retrieve a single role by unique identifier.
     */
    get: operations["getRole"];
    /**
     * Delete a Role
     * @description Delete an existing role
     */
    delete: operations["deleteRole"];
    /**
     * Update a Role
     * @description Update an existing role
     */
    patch: operations["updateRole"];
  };
  "/collections": {
    /**
     * List Collections
     * @description Returns a list of the collections available in the project.
     */
    get: operations["getCollections"];
    /**
     * Create a Collection
     * @description Create a new collection in Directus.
     */
    post: operations["createCollection"];
  };
  "/collections/{id}": {
    /**
     * Retrieve a Collection
     * @description Retrieves the details of a single collection.
     */
    get: operations["getCollection"];
    /**
     * Delete a Collection
     * @description Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.
     */
    delete: operations["deleteCollection"];
    /**
     * Update a Collection
     * @description Update an existing collection.
     */
    patch: operations["updateCollection"];
  };
  "/users": {
    /**
     * List Users
     * @description List the users.
     */
    get: operations["getUsers"];
    /**
     * Create a User
     * @description Create a new user.
     */
    post: operations["createUser"];
    /**
     * Delete Multiple Users
     * @description Delete multiple existing users.
     */
    delete: operations["deleteUsers"];
    /**
     * Update Multiple Users
     * @description Update multiple users at the same time.
     */
    patch: operations["updateUsers"];
  };
  "/users/{id}": {
    /**
     * Retrieve a User
     * @description Retrieve a single user by unique identifier.
     */
    get: operations["getUser"];
    /**
     * Delete a User
     * @description Delete an existing user
     */
    delete: operations["deleteUser"];
    /**
     * Update a User
     * @description Update an existing user
     */
    patch: operations["updateUser"];
  };
  "/users/invite": {
    /**
     * Invite User(s)
     * @description Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.
     */
    post: operations["invite"];
  };
  "/users/invite/accept": {
    /**
     * Accept User Invite
     * @description Accepts and enables an invited user using a JWT invitation token.
     */
    post: operations["acceptInvite"];
  };
  "/users/me": {
    /**
     * Retrieve Current User
     * @description Retrieve the currently authenticated user.
     */
    get: operations["getMe"];
    /**
     * Update Current User
     * @description Update the currently authenticated user.
     */
    patch: operations["updateMe"];
  };
  "/users/me/track/page": {
    /**
     * Update Last Page
     * @description Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.
     */
    patch: operations["updateLastUsedPageMe"];
  };
  "/users/me/tfa/enable": {
    /**
     * Enable 2FA
     * @description Enables two-factor authentication for the currently authenticated user.
     */
    post: operations["meTfaEnable"];
  };
  "/users/me/tfa/disable": {
    /**
     * Disable 2FA
     * @description Disables two-factor authentication for the currently authenticated user.
     */
    post: operations["meTfaDisable"];
  };
  "/presets": {
    /**
     * List Presets
     * @description List the presets.
     */
    get: operations["getPresets"];
    /**
     * Create a Preset
     * @description Create a new preset.
     */
    post: operations["createPreset"];
    /**
     * Delete Multiple Presets
     * @description Delete multiple existing presets.
     */
    delete: operations["deletePresets"];
    /**
     * Update Multiple Presets
     * @description Update multiple presets at the same time.
     */
    patch: operations["updatePresets"];
  };
  "/presets/{id}": {
    /**
     * Retrieve a Preset
     * @description Retrieve a single preset by unique identifier.
     */
    get: operations["getPreset"];
    /**
     * Delete a Preset
     * @description Delete an existing preset.
     */
    delete: operations["deletePreset"];
    /**
     * Update a Preset
     * @description Update an existing preset.
     */
    patch: operations["updatePreset"];
  };
  "/revisions": {
    /**
     * List Revisions
     * @description List the revisions.
     */
    get: operations["getRevisions"];
  };
  "/revisions/{id}": {
    /**
     * Retrieve a Revision
     * @description Retrieve a single revision by unique identifier.
     */
    get: operations["getRevision"];
  };
  "/folders": {
    /**
     * List Folders
     * @description List the folders.
     */
    get: operations["getFolders"];
    /**
     * Create a Folder
     * @description Create a new folder.
     */
    post: operations["createFolder"];
    /**
     * Delete Multiple Folders
     * @description Delete multiple existing folders.
     */
    delete: operations["deleteFolders"];
    /**
     * Update Multiple Folders
     * @description Update multiple folders at the same time.
     */
    patch: operations["updateFolders"];
  };
  "/folders/{id}": {
    /**
     * Retrieve a Folder
     * @description Retrieve a single folder by unique identifier.
     */
    get: operations["getFolder"];
    /**
     * Delete a Folder
     * @description Delete an existing folder
     */
    delete: operations["deleteFolder"];
    /**
     * Update a Folder
     * @description Update an existing folder
     */
    patch: operations["updateFolder"];
  };
  "/files": {
    /**
     * List Files
     * @description List the files.
     */
    get: operations["getFiles"];
    /**
     * Create a File
     * @description Create a new file
     */
    post: operations["createFile"];
    /**
     * Delete Multiple Files
     * @description Delete multiple existing files.
     */
    delete: operations["deleteFiles"];
    /**
     * Update Multiple Files
     * @description Update multiple files at the same time.
     */
    patch: operations["updateFiles"];
  };
  "/files/{id}": {
    /**
     * Retrieve a Files
     * @description Retrieve a single file by unique identifier.
     */
    get: operations["getFile"];
    /**
     * Delete a File
     * @description Delete an existing file.
     */
    delete: operations["deleteFile"];
    /**
     * Update a File
     * @description Update an existing file, and/or replace it's file contents.
     */
    patch: operations["updateFile"];
  };
  "/items/bots_user_active_sessions": {
    /**
     * List Items
     * @description List the bots_user_active_sessions items.
     */
    get: operations["readItemsBotsUserActiveSessions"];
    /**
     * Create an Item
     * @description Create a new bots_user_active_sessions item.
     */
    post: operations["createItemsBotsUserActiveSessions"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_user_active_sessions items.
     */
    delete: operations["deleteItemsBotsUserActiveSessions"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_user_active_sessions items at the same time.
     */
    patch: operations["updateItemsBotsUserActiveSessions"];
  };
  "/items/bots_user_active_sessions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_user_active_sessions item by unique identifier.
     */
    get: operations["readSingleItemsBotsUserActiveSessions"];
    /**
     * Delete an Item
     * @description Delete an existing bots_user_active_sessions item.
     */
    delete: operations["deleteSingleItemsBotsUserActiveSessions"];
    /**
     * Update an Item
     * @description Update an existing bots_user_active_sessions item.
     */
    patch: operations["updateSingleItemsBotsUserActiveSessions"];
  };
  "/permissions": {
    /**
     * List Permissions
     * @description List all permissions.
     */
    get: operations["getPermissions"];
    /**
     * Create a Permission
     * @description Create a new permission.
     */
    post: operations["createPermission"];
    /**
     * Delete Multiple Permissions
     * @description Delete multiple existing permissions.
     */
    delete: operations["deletePermissions"];
    /**
     * Update Multiple Permissions
     * @description Update multiple permissions at the same time.
     */
    patch: operations["updatePermissions"];
  };
  "/permissions/me": {
    /**
     * List My Permissions
     * @description List the permissions that apply to the current user.
     */
    get: operations["getMyPermissions"];
  };
  "/permissions/{id}": {
    /**
     * Retrieve a Permission
     * @description Retrieve a single permissions object by unique identifier.
     */
    get: operations["getPermission"];
    /**
     * Delete a Permission
     * @description Delete an existing permission
     */
    delete: operations["deletePermission"];
    /**
     * Update a Permission
     * @description Update an existing permission
     */
    patch: operations["updatePermission"];
  };
  "/fields": {
    /**
     * List All Fields
     * @description Returns a list of the fields available in the project.
     */
    get: operations["getFields"];
  };
  "/fields/{collection}": {
    /**
     * List Fields in Collection
     * @description Returns a list of the fields available in the given collection.
     */
    get: operations["getCollectionFields"];
    /**
     * Create Field in Collection
     * @description Create a new field in a given collection.
     */
    post: operations["createField"];
  };
  "/fields/{collection}/{id}": {
    /**
     * Retrieve a Field
     * @description Retrieves the details of a single field in a given collection.
     */
    get: operations["getCollectionField"];
    /**
     * Delete a Field
     * @description Delete an existing field.
     */
    delete: operations["deleteField"];
    /**
     * Update a Field
     * @description Update an existing field.
     */
    patch: operations["updateField"];
  };
  "/relations": {
    /**
     * List Relations
     * @description List the relations.
     */
    get: operations["getRelations"];
    /**
     * Create a Relation
     * @description Create a new relation.
     */
    post: operations["createRelation"];
  };
  "/relations/{id}": {
    /**
     * Retrieve a Relation
     * @description Retrieve a single relation by unique identifier.
     */
    get: operations["getRelation"];
    /**
     * Delete a Relation
     * @description Delete an existing relation.
     */
    delete: operations["deleteRelation"];
    /**
     * Update a Relation
     * @description Update an existing relation
     */
    patch: operations["updateRelation"];
  };
  "/activity": {
    /**
     * List Activity Actions
     * @description Returns a list of activity actions.
     */
    get: operations["getActivities"];
  };
  "/activity/{id}": {
    /**
     * Retrieve an Activity Action
     * @description Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information.
     */
    get: operations["getActivity"];
  };
  "/items/bots_enabled_users": {
    /**
     * List Items
     * @description List the bots_enabled_users items.
     */
    get: operations["readItemsBotsEnabledUsers"];
    /**
     * Create an Item
     * @description Create a new bots_enabled_users item.
     */
    post: operations["createItemsBotsEnabledUsers"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_enabled_users items.
     */
    delete: operations["deleteItemsBotsEnabledUsers"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_enabled_users items at the same time.
     */
    patch: operations["updateItemsBotsEnabledUsers"];
  };
  "/items/bots_enabled_users/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_enabled_users item by unique identifier.
     */
    get: operations["readSingleItemsBotsEnabledUsers"];
    /**
     * Delete an Item
     * @description Delete an existing bots_enabled_users item.
     */
    delete: operations["deleteSingleItemsBotsEnabledUsers"];
    /**
     * Update an Item
     * @description Update an existing bots_enabled_users item.
     */
    patch: operations["updateSingleItemsBotsEnabledUsers"];
  };
  "/items/page_liff_tokens": {
    /**
     * List Items
     * @description List the page_liff_tokens items.
     */
    get: operations["readItemsPageLiffTokens"];
    /**
     * Create an Item
     * @description Create a new page_liff_tokens item.
     */
    post: operations["createItemsPageLiffTokens"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing page_liff_tokens items.
     */
    delete: operations["deleteItemsPageLiffTokens"];
    /**
     * Update Multiple Items
     * @description Update multiple page_liff_tokens items at the same time.
     */
    patch: operations["updateItemsPageLiffTokens"];
  };
  "/items/page_liff_tokens/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single page_liff_tokens item by unique identifier.
     */
    get: operations["readSingleItemsPageLiffTokens"];
    /**
     * Delete an Item
     * @description Delete an existing page_liff_tokens item.
     */
    delete: operations["deleteSingleItemsPageLiffTokens"];
    /**
     * Update an Item
     * @description Update an existing page_liff_tokens item.
     */
    patch: operations["updateSingleItemsPageLiffTokens"];
  };
  "/webhooks": {
    /**
     * List Webhooks
     * @description Get all webhooks.
     */
    get: operations["getWebhooks"];
    /**
     * Create a Webhook
     * @description Create a new webhook.
     */
    post: operations["createWebhook"];
    /**
     * Delete Multiple Webhooks
     * @description Delete multiple existing webhooks.
     */
    delete: operations["deleteWebhooks"];
    /**
     * Update Multiple Webhooks
     * @description Update multiple webhooks at the same time.
     */
    patch: operations["updateWebhooks"];
  };
  "/webhooks/{id}": {
    /**
     * Retrieve a Webhook
     * @description Retrieve a single webhook by unique identifier.
     */
    get: operations["getWebhook"];
    /**
     * Delete a Webhook
     * @description Delete an existing webhook
     */
    delete: operations["deleteWebhook"];
    /**
     * Update a Webhook
     * @description Update an existing webhook
     */
    patch: operations["updateWebhook"];
  };
  "/flows": {
    /**
     * List Flows
     * @description Get all flows.
     */
    get: operations["getFlows"];
    /**
     * Create a Flow
     * @description Create a new flow.
     */
    post: operations["createFlow"];
    /**
     * Delete Multiple Flows
     * @description Delete multiple existing flows.
     */
    delete: operations["deleteFlows"];
    /**
     * Update Multiple Flows
     * @description Update multiple flows at the same time.
     */
    patch: operations["updateFlows"];
  };
  "/flows/{id}": {
    /**
     * Retrieve a Flow
     * @description Retrieve a single flow by unique identifier.
     */
    get: operations["getFlow"];
    /**
     * Delete a Flow
     * @description Delete an existing flow
     */
    delete: operations["deleteFlow"];
    /**
     * Update a Flow
     * @description Update an existing flow
     */
    patch: operations["updateFlow"];
  };
  "/operations": {
    /**
     * List Operations
     * @description Get all operations.
     */
    get: operations["getOperations"];
    /**
     * Create an Operation
     * @description Create a new operation.
     */
    post: operations["createOperation"];
    /**
     * Delete Multiple Operations
     * @description Delete multiple existing operations.
     */
    delete: operations["deleteOperations"];
    /**
     * Update Multiple Operations
     * @description Update multiple operations at the same time.
     */
    patch: operations["updateOperations"];
  };
  "/operations/{id}": {
    /**
     * Retrieve an Operation
     * @description Retrieve a single operation by unique identifier.
     */
    get: operations["getOperation"];
    /**
     * Delete an Operation
     * @description Delete an existing operation
     */
    delete: operations["deleteOperation"];
    /**
     * Update an Operation
     * @description Update an existing operation
     */
    patch: operations["updateOperation"];
  };
  "/settings": {
    /**
     * Retrieve Settings
     * @description List the settings.
     */
    get: operations["getSettings"];
    /**
     * Update Settings
     * @description Update the settings
     */
    patch: operations["updateSetting"];
  };
  "/items/saas_products": {
    /**
     * List Items
     * @description List the saas_products items.
     */
    get: operations["readItemsSaasProducts"];
    /**
     * Create an Item
     * @description Create a new saas_products item.
     */
    post: operations["createItemsSaasProducts"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_products items.
     */
    delete: operations["deleteItemsSaasProducts"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_products items at the same time.
     */
    patch: operations["updateItemsSaasProducts"];
  };
  "/items/saas_products/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_products item by unique identifier.
     */
    get: operations["readSingleItemsSaasProducts"];
    /**
     * Delete an Item
     * @description Delete an existing saas_products item.
     */
    delete: operations["deleteSingleItemsSaasProducts"];
    /**
     * Update an Item
     * @description Update an existing saas_products item.
     */
    patch: operations["updateSingleItemsSaasProducts"];
  };
  "/items/saas_projects": {
    /**
     * List Items
     * @description List the saas_projects items.
     */
    get: operations["readItemsSaasProjects"];
    /**
     * Create an Item
     * @description Create a new saas_projects item.
     */
    post: operations["createItemsSaasProjects"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_projects items.
     */
    delete: operations["deleteItemsSaasProjects"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_projects items at the same time.
     */
    patch: operations["updateItemsSaasProjects"];
  };
  "/items/saas_projects/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_projects item by unique identifier.
     */
    get: operations["readSingleItemsSaasProjects"];
    /**
     * Delete an Item
     * @description Delete an existing saas_projects item.
     */
    delete: operations["deleteSingleItemsSaasProjects"];
    /**
     * Update an Item
     * @description Update an existing saas_projects item.
     */
    patch: operations["updateSingleItemsSaasProjects"];
  };
  "/items/saas_logs": {
    /**
     * List Items
     * @description List the saas_logs items.
     */
    get: operations["readItemsSaasLogs"];
    /**
     * Create an Item
     * @description Create a new saas_logs item.
     */
    post: operations["createItemsSaasLogs"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_logs items.
     */
    delete: operations["deleteItemsSaasLogs"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_logs items at the same time.
     */
    patch: operations["updateItemsSaasLogs"];
  };
  "/items/saas_logs/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_logs item by unique identifier.
     */
    get: operations["readSingleItemsSaasLogs"];
    /**
     * Delete an Item
     * @description Delete an existing saas_logs item.
     */
    delete: operations["deleteSingleItemsSaasLogs"];
    /**
     * Update an Item
     * @description Update an existing saas_logs item.
     */
    patch: operations["updateSingleItemsSaasLogs"];
  };
  "/extensions": {
    /**
     * List Extensions
     * @description List the installed extensions and their configuration in the project.
     */
    get: operations["listExtensions"];
  };
  "/extensions/{name}": {
    /**
     * Update an Extension
     * @description Update an existing extension.
     */
    patch: operations["updateExtensions"];
  };
  "/extensions/{bundle}/{name}": {
    /**
     * Update an Extension
     * @description Update an existing extension.
     */
    patch: operations["updateExtensionBundle"];
  };
  "/items/saas_metrics": {
    /**
     * List Items
     * @description List the saas_metrics items.
     */
    get: operations["readItemsSaasMetrics"];
    /**
     * Create an Item
     * @description Create a new saas_metrics item.
     */
    post: operations["createItemsSaasMetrics"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_metrics items.
     */
    delete: operations["deleteItemsSaasMetrics"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_metrics items at the same time.
     */
    patch: operations["updateItemsSaasMetrics"];
  };
  "/items/saas_metrics/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_metrics item by unique identifier.
     */
    get: operations["readSingleItemsSaasMetrics"];
    /**
     * Delete an Item
     * @description Delete an existing saas_metrics item.
     */
    delete: operations["deleteSingleItemsSaasMetrics"];
    /**
     * Update an Item
     * @description Update an existing saas_metrics item.
     */
    patch: operations["updateSingleItemsSaasMetrics"];
  };
  "/versions": {
    /**
     * List Content Versions
     * @description Get all Content Versions.
     */
    get: operations["getContentVersions"];
    /**
     * Create Multiple Content Versions
     * @description Create multiple new Content Versions.
     */
    post: operations["createContentVersion"];
    /**
     * Delete Multiple Content Versions
     * @description Delete multiple existing Content Versions.
     */
    delete: operations["deleteContentVersions"];
    /**
     * Update Multiple Content Versions
     * @description Update multiple Content Versions at the same time.
     */
    patch: operations["updateContentVersions"];
  };
  "/versions/{id}": {
    /**
     * Retrieve a Content Version
     * @description Retrieve a single Content Version by unique identifier.
     */
    get: operations["getContentVersion"];
    /**
     * Delete a Content Version
     * @description Delete an existing Content Version.
     */
    delete: operations["deleteContentVersion"];
    /**
     * Update a Content Version
     * @description Update an existing Content Version.
     */
    patch: operations["updateContentVersion"];
  };
  "/versions/{id}/save": {
    /**
     * Save to a Content Version
     * @description Save item changes to an existing Content Version.
     */
    post: operations["saveContentVersion"];
  };
  "/versions/{id}/compare": {
    /**
     * Compare a Content Version
     * @description Compare an existing Content Version with the main version of the item.
     */
    get: operations["compareContentVersion"];
  };
  "/versions/{id}/promote": {
    /**
     * Promote a Content Version
     * @description Pass the current hash of the main version of the item (obtained from the `compare` endpoint) along with an optional array of field names of which the values are to be promoted (by default, all fields are selected).
     */
    post: operations["promoteContentVersion"];
  };
  "/items/saas_events": {
    /**
     * List Items
     * @description List the saas_events items.
     */
    get: operations["readItemsSaasEvents"];
    /**
     * Create an Item
     * @description Create a new saas_events item.
     */
    post: operations["createItemsSaasEvents"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_events items.
     */
    delete: operations["deleteItemsSaasEvents"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_events items at the same time.
     */
    patch: operations["updateItemsSaasEvents"];
  };
  "/items/saas_events/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_events item by unique identifier.
     */
    get: operations["readSingleItemsSaasEvents"];
    /**
     * Delete an Item
     * @description Delete an existing saas_events item.
     */
    delete: operations["deleteSingleItemsSaasEvents"];
    /**
     * Update an Item
     * @description Update an existing saas_events item.
     */
    patch: operations["updateSingleItemsSaasEvents"];
  };
  "/items/saas_inbox": {
    /**
     * List Items
     * @description List the saas_inbox items.
     */
    get: operations["readItemsSaasInbox"];
    /**
     * Create an Item
     * @description Create a new saas_inbox item.
     */
    post: operations["createItemsSaasInbox"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_inbox items.
     */
    delete: operations["deleteItemsSaasInbox"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_inbox items at the same time.
     */
    patch: operations["updateItemsSaasInbox"];
  };
  "/items/saas_inbox/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_inbox item by unique identifier.
     */
    get: operations["readSingleItemsSaasInbox"];
    /**
     * Delete an Item
     * @description Delete an existing saas_inbox item.
     */
    delete: operations["deleteSingleItemsSaasInbox"];
    /**
     * Update an Item
     * @description Update an existing saas_inbox item.
     */
    patch: operations["updateSingleItemsSaasInbox"];
  };
  "/items/saas_teams_users": {
    /**
     * List Items
     * @description List the saas_teams_users items.
     */
    get: operations["readItemsSaasTeamsUsers"];
    /**
     * Create an Item
     * @description Create a new saas_teams_users item.
     */
    post: operations["createItemsSaasTeamsUsers"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_teams_users items.
     */
    delete: operations["deleteItemsSaasTeamsUsers"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_teams_users items at the same time.
     */
    patch: operations["updateItemsSaasTeamsUsers"];
  };
  "/items/saas_teams_users/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_teams_users item by unique identifier.
     */
    get: operations["readSingleItemsSaasTeamsUsers"];
    /**
     * Delete an Item
     * @description Delete an existing saas_teams_users item.
     */
    delete: operations["deleteSingleItemsSaasTeamsUsers"];
    /**
     * Update an Item
     * @description Update an existing saas_teams_users item.
     */
    patch: operations["updateSingleItemsSaasTeamsUsers"];
  };
  "/items/saas_teams": {
    /**
     * List Items
     * @description List the saas_teams items.
     */
    get: operations["readItemsSaasTeams"];
    /**
     * Create an Item
     * @description Create a new saas_teams item.
     */
    post: operations["createItemsSaasTeams"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_teams items.
     */
    delete: operations["deleteItemsSaasTeams"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_teams items at the same time.
     */
    patch: operations["updateItemsSaasTeams"];
  };
  "/items/saas_teams/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_teams item by unique identifier.
     */
    get: operations["readSingleItemsSaasTeams"];
    /**
     * Delete an Item
     * @description Delete an existing saas_teams item.
     */
    delete: operations["deleteSingleItemsSaasTeams"];
    /**
     * Update an Item
     * @description Update an existing saas_teams item.
     */
    patch: operations["updateSingleItemsSaasTeams"];
  };
  "/items/saas_tasks_files": {
    /**
     * List Items
     * @description List the saas_tasks_files items.
     */
    get: operations["readItemsSaasTasksFiles"];
    /**
     * Create an Item
     * @description Create a new saas_tasks_files item.
     */
    post: operations["createItemsSaasTasksFiles"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_tasks_files items.
     */
    delete: operations["deleteItemsSaasTasksFiles"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_tasks_files items at the same time.
     */
    patch: operations["updateItemsSaasTasksFiles"];
  };
  "/items/saas_tasks_files/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_tasks_files item by unique identifier.
     */
    get: operations["readSingleItemsSaasTasksFiles"];
    /**
     * Delete an Item
     * @description Delete an existing saas_tasks_files item.
     */
    delete: operations["deleteSingleItemsSaasTasksFiles"];
    /**
     * Update an Item
     * @description Update an existing saas_tasks_files item.
     */
    patch: operations["updateSingleItemsSaasTasksFiles"];
  };
  "/items/saas_tasks": {
    /**
     * List Items
     * @description List the saas_tasks items.
     */
    get: operations["readItemsSaasTasks"];
    /**
     * Create an Item
     * @description Create a new saas_tasks item.
     */
    post: operations["createItemsSaasTasks"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_tasks items.
     */
    delete: operations["deleteItemsSaasTasks"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_tasks items at the same time.
     */
    patch: operations["updateItemsSaasTasks"];
  };
  "/items/saas_tasks/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_tasks item by unique identifier.
     */
    get: operations["readSingleItemsSaasTasks"];
    /**
     * Delete an Item
     * @description Delete an existing saas_tasks item.
     */
    delete: operations["deleteSingleItemsSaasTasks"];
    /**
     * Update an Item
     * @description Update an existing saas_tasks item.
     */
    patch: operations["updateSingleItemsSaasTasks"];
  };
  "/items/api_logs": {
    /**
     * List Items
     * @description List the api_logs items.
     */
    get: operations["readItemsAPILogs"];
    /**
     * Create an Item
     * @description Create a new api_logs item.
     */
    post: operations["createItemsAPILogs"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing api_logs items.
     */
    delete: operations["deleteItemsAPILogs"];
    /**
     * Update Multiple Items
     * @description Update multiple api_logs items at the same time.
     */
    patch: operations["updateItemsAPILogs"];
  };
  "/items/api_logs/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single api_logs item by unique identifier.
     */
    get: operations["readSingleItemsAPILogs"];
    /**
     * Delete an Item
     * @description Delete an existing api_logs item.
     */
    delete: operations["deleteSingleItemsAPILogs"];
    /**
     * Update an Item
     * @description Update an existing api_logs item.
     */
    patch: operations["updateSingleItemsAPILogs"];
  };
  "/items/bots_directus_users": {
    /**
     * List Items
     * @description List the bots_directus_users items.
     */
    get: operations["readItemsBotsDirectusUsers"];
    /**
     * Create an Item
     * @description Create a new bots_directus_users item.
     */
    post: operations["createItemsBotsDirectusUsers"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_directus_users items.
     */
    delete: operations["deleteItemsBotsDirectusUsers"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_directus_users items at the same time.
     */
    patch: operations["updateItemsBotsDirectusUsers"];
  };
  "/items/bots_directus_users/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_directus_users item by unique identifier.
     */
    get: operations["readSingleItemsBotsDirectusUsers"];
    /**
     * Delete an Item
     * @description Delete an existing bots_directus_users item.
     */
    delete: operations["deleteSingleItemsBotsDirectusUsers"];
    /**
     * Update an Item
     * @description Update an existing bots_directus_users item.
     */
    patch: operations["updateSingleItemsBotsDirectusUsers"];
  };
  "/items/bots_knowledges": {
    /**
     * List Items
     * @description List the bots_knowledges items.
     */
    get: operations["readItemsBotsKnowledges"];
    /**
     * Create an Item
     * @description Create a new bots_knowledges item.
     */
    post: operations["createItemsBotsKnowledges"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_knowledges items.
     */
    delete: operations["deleteItemsBotsKnowledges"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_knowledges items at the same time.
     */
    patch: operations["updateItemsBotsKnowledges"];
  };
  "/items/bots_knowledges/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_knowledges item by unique identifier.
     */
    get: operations["readSingleItemsBotsKnowledges"];
    /**
     * Delete an Item
     * @description Delete an existing bots_knowledges item.
     */
    delete: operations["deleteSingleItemsBotsKnowledges"];
    /**
     * Update an Item
     * @description Update an existing bots_knowledges item.
     */
    patch: operations["updateSingleItemsBotsKnowledges"];
  };
  "/items/saas_prices": {
    /**
     * List Items
     * @description List the saas_prices items.
     */
    get: operations["readItemsSaasPrices"];
    /**
     * Create an Item
     * @description Create a new saas_prices item.
     */
    post: operations["createItemsSaasPrices"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_prices items.
     */
    delete: operations["deleteItemsSaasPrices"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_prices items at the same time.
     */
    patch: operations["updateItemsSaasPrices"];
  };
  "/items/saas_prices/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_prices item by unique identifier.
     */
    get: operations["readSingleItemsSaasPrices"];
    /**
     * Delete an Item
     * @description Delete an existing saas_prices item.
     */
    delete: operations["deleteSingleItemsSaasPrices"];
    /**
     * Update an Item
     * @description Update an existing saas_prices item.
     */
    patch: operations["updateSingleItemsSaasPrices"];
  };
  "/items/saas_subscriptions": {
    /**
     * List Items
     * @description List the saas_subscriptions items.
     */
    get: operations["readItemsSaasSubscriptions"];
    /**
     * Create an Item
     * @description Create a new saas_subscriptions item.
     */
    post: operations["createItemsSaasSubscriptions"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_subscriptions items.
     */
    delete: operations["deleteItemsSaasSubscriptions"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_subscriptions items at the same time.
     */
    patch: operations["updateItemsSaasSubscriptions"];
  };
  "/items/saas_subscriptions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_subscriptions item by unique identifier.
     */
    get: operations["readSingleItemsSaasSubscriptions"];
    /**
     * Delete an Item
     * @description Delete an existing saas_subscriptions item.
     */
    delete: operations["deleteSingleItemsSaasSubscriptions"];
    /**
     * Update an Item
     * @description Update an existing saas_subscriptions item.
     */
    patch: operations["updateSingleItemsSaasSubscriptions"];
  };
  "/items/bots_logs": {
    /**
     * List Items
     * @description List the bots_logs items.
     */
    get: operations["readItemsBotsLogs"];
    /**
     * Create an Item
     * @description Create a new bots_logs item.
     */
    post: operations["createItemsBotsLogs"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_logs items.
     */
    delete: operations["deleteItemsBotsLogs"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_logs items at the same time.
     */
    patch: operations["updateItemsBotsLogs"];
  };
  "/items/bots_logs/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_logs item by unique identifier.
     */
    get: operations["readSingleItemsBotsLogs"];
    /**
     * Delete an Item
     * @description Delete an existing bots_logs item.
     */
    delete: operations["deleteSingleItemsBotsLogs"];
    /**
     * Update an Item
     * @description Update an existing bots_logs item.
     */
    patch: operations["updateSingleItemsBotsLogs"];
  };
  "/items/pages_liff_page": {
    /**
     * List Items
     * @description List the pages_liff_page items.
     */
    get: operations["readItemsPagesLiffPage"];
    /**
     * Create an Item
     * @description Create a new pages_liff_page item.
     */
    post: operations["createItemsPagesLiffPage"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages_liff_page items.
     */
    delete: operations["deleteItemsPagesLiffPage"];
    /**
     * Update Multiple Items
     * @description Update multiple pages_liff_page items at the same time.
     */
    patch: operations["updateItemsPagesLiffPage"];
  };
  "/items/pages_liff_page/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages_liff_page item by unique identifier.
     */
    get: operations["readSingleItemsPagesLiffPage"];
    /**
     * Delete an Item
     * @description Delete an existing pages_liff_page item.
     */
    delete: operations["deleteSingleItemsPagesLiffPage"];
    /**
     * Update an Item
     * @description Update an existing pages_liff_page item.
     */
    patch: operations["updateSingleItemsPagesLiffPage"];
  };
  "/items/pages_liff": {
    /**
     * List Items
     * @description List the pages_liff items.
     */
    get: operations["readItemsPagesLiff"];
    /**
     * Create an Item
     * @description Create a new pages_liff item.
     */
    post: operations["createItemsPagesLiff"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages_liff items.
     */
    delete: operations["deleteItemsPagesLiff"];
    /**
     * Update Multiple Items
     * @description Update multiple pages_liff items at the same time.
     */
    patch: operations["updateItemsPagesLiff"];
  };
  "/items/pages_liff/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages_liff item by unique identifier.
     */
    get: operations["readSingleItemsPagesLiff"];
    /**
     * Delete an Item
     * @description Delete an existing pages_liff item.
     */
    delete: operations["deleteSingleItemsPagesLiff"];
    /**
     * Update an Item
     * @description Update an existing pages_liff item.
     */
    patch: operations["updateSingleItemsPagesLiff"];
  };
  "/items/channels": {
    /**
     * List Items
     * @description List the channels items.
     */
    get: operations["readItemsChannels"];
    /**
     * Create an Item
     * @description Create a new channels item.
     */
    post: operations["createItemsChannels"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing channels items.
     */
    delete: operations["deleteItemsChannels"];
    /**
     * Update Multiple Items
     * @description Update multiple channels items at the same time.
     */
    patch: operations["updateItemsChannels"];
  };
  "/items/channels/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single channels item by unique identifier.
     */
    get: operations["readSingleItemsChannels"];
    /**
     * Delete an Item
     * @description Delete an existing channels item.
     */
    delete: operations["deleteSingleItemsChannels"];
    /**
     * Update an Item
     * @description Update an existing channels item.
     */
    patch: operations["updateSingleItemsChannels"];
  };
  "/items/channels_datasets": {
    /**
     * List Items
     * @description List the channels_datasets items.
     */
    get: operations["readItemsChannelsDatasets"];
    /**
     * Create an Item
     * @description Create a new channels_datasets item.
     */
    post: operations["createItemsChannelsDatasets"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing channels_datasets items.
     */
    delete: operations["deleteItemsChannelsDatasets"];
    /**
     * Update Multiple Items
     * @description Update multiple channels_datasets items at the same time.
     */
    patch: operations["updateItemsChannelsDatasets"];
  };
  "/items/channels_datasets/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single channels_datasets item by unique identifier.
     */
    get: operations["readSingleItemsChannelsDatasets"];
    /**
     * Delete an Item
     * @description Delete an existing channels_datasets item.
     */
    delete: operations["deleteSingleItemsChannelsDatasets"];
    /**
     * Update an Item
     * @description Update an existing channels_datasets item.
     */
    patch: operations["updateSingleItemsChannelsDatasets"];
  };
  "/items/channels_bots": {
    /**
     * List Items
     * @description List the channels_bots items.
     */
    get: operations["readItemsChannelsBots"];
    /**
     * Create an Item
     * @description Create a new channels_bots item.
     */
    post: operations["createItemsChannelsBots"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing channels_bots items.
     */
    delete: operations["deleteItemsChannelsBots"];
    /**
     * Update Multiple Items
     * @description Update multiple channels_bots items at the same time.
     */
    patch: operations["updateItemsChannelsBots"];
  };
  "/items/channels_bots/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single channels_bots item by unique identifier.
     */
    get: operations["readSingleItemsChannelsBots"];
    /**
     * Delete an Item
     * @description Delete an existing channels_bots item.
     */
    delete: operations["deleteSingleItemsChannelsBots"];
    /**
     * Update an Item
     * @description Update an existing channels_bots item.
     */
    patch: operations["updateSingleItemsChannelsBots"];
  };
  "/items/saas_commission_rules": {
    /**
     * List Items
     * @description List the saas_commission_rules items.
     */
    get: operations["readItemsSaasCommissionRules"];
    /**
     * Create an Item
     * @description Create a new saas_commission_rules item.
     */
    post: operations["createItemsSaasCommissionRules"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_commission_rules items.
     */
    delete: operations["deleteItemsSaasCommissionRules"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_commission_rules items at the same time.
     */
    patch: operations["updateItemsSaasCommissionRules"];
  };
  "/items/saas_commission_rules/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_commission_rules item by unique identifier.
     */
    get: operations["readSingleItemsSaasCommissionRules"];
    /**
     * Delete an Item
     * @description Delete an existing saas_commission_rules item.
     */
    delete: operations["deleteSingleItemsSaasCommissionRules"];
    /**
     * Update an Item
     * @description Update an existing saas_commission_rules item.
     */
    patch: operations["updateSingleItemsSaasCommissionRules"];
  };
  "/items/ad_sets": {
    /**
     * List Items
     * @description List the ad_sets items.
     */
    get: operations["readItemsAdSets"];
    /**
     * Create an Item
     * @description Create a new ad_sets item.
     */
    post: operations["createItemsAdSets"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing ad_sets items.
     */
    delete: operations["deleteItemsAdSets"];
    /**
     * Update Multiple Items
     * @description Update multiple ad_sets items at the same time.
     */
    patch: operations["updateItemsAdSets"];
  };
  "/items/ad_sets/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single ad_sets item by unique identifier.
     */
    get: operations["readSingleItemsAdSets"];
    /**
     * Delete an Item
     * @description Delete an existing ad_sets item.
     */
    delete: operations["deleteSingleItemsAdSets"];
    /**
     * Update an Item
     * @description Update an existing ad_sets item.
     */
    patch: operations["updateSingleItemsAdSets"];
  };
  "/items/saas_prices_translations": {
    /**
     * List Items
     * @description List the saas_prices_translations items.
     */
    get: operations["readItemsSaasPricesTranslations"];
    /**
     * Create an Item
     * @description Create a new saas_prices_translations item.
     */
    post: operations["createItemsSaasPricesTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_prices_translations items.
     */
    delete: operations["deleteItemsSaasPricesTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_prices_translations items at the same time.
     */
    patch: operations["updateItemsSaasPricesTranslations"];
  };
  "/items/saas_prices_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_prices_translations item by unique identifier.
     */
    get: operations["readSingleItemsSaasPricesTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing saas_prices_translations item.
     */
    delete: operations["deleteSingleItemsSaasPricesTranslations"];
    /**
     * Update an Item
     * @description Update an existing saas_prices_translations item.
     */
    patch: operations["updateSingleItemsSaasPricesTranslations"];
  };
  "/items/ad_performance": {
    /**
     * List Items
     * @description List the ad_performance items.
     */
    get: operations["readItemsAdPerformance"];
    /**
     * Create an Item
     * @description Create a new ad_performance item.
     */
    post: operations["createItemsAdPerformance"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing ad_performance items.
     */
    delete: operations["deleteItemsAdPerformance"];
    /**
     * Update Multiple Items
     * @description Update multiple ad_performance items at the same time.
     */
    patch: operations["updateItemsAdPerformance"];
  };
  "/items/ad_performance/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single ad_performance item by unique identifier.
     */
    get: operations["readSingleItemsAdPerformance"];
    /**
     * Delete an Item
     * @description Delete an existing ad_performance item.
     */
    delete: operations["deleteSingleItemsAdPerformance"];
    /**
     * Update an Item
     * @description Update an existing ad_performance item.
     */
    patch: operations["updateSingleItemsAdPerformance"];
  };
  "/items/ai_rules": {
    /**
     * List Items
     * @description List the ai_rules items.
     */
    get: operations["readItemsAIRules"];
    /**
     * Create an Item
     * @description Create a new ai_rules item.
     */
    post: operations["createItemsAIRules"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing ai_rules items.
     */
    delete: operations["deleteItemsAIRules"];
    /**
     * Update Multiple Items
     * @description Update multiple ai_rules items at the same time.
     */
    patch: operations["updateItemsAIRules"];
  };
  "/items/ai_rules/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single ai_rules item by unique identifier.
     */
    get: operations["readSingleItemsAIRules"];
    /**
     * Delete an Item
     * @description Delete an existing ai_rules item.
     */
    delete: operations["deleteSingleItemsAIRules"];
    /**
     * Update an Item
     * @description Update an existing ai_rules item.
     */
    patch: operations["updateSingleItemsAIRules"];
  };
  "/items/saas_webinars": {
    /**
     * List Items
     * @description List the saas_webinars items.
     */
    get: operations["readItemsSaasWebinars"];
    /**
     * Create an Item
     * @description Create a new saas_webinars item.
     */
    post: operations["createItemsSaasWebinars"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_webinars items.
     */
    delete: operations["deleteItemsSaasWebinars"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_webinars items at the same time.
     */
    patch: operations["updateItemsSaasWebinars"];
  };
  "/items/saas_webinars/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_webinars item by unique identifier.
     */
    get: operations["readSingleItemsSaasWebinars"];
    /**
     * Delete an Item
     * @description Delete an existing saas_webinars item.
     */
    delete: operations["deleteSingleItemsSaasWebinars"];
    /**
     * Update an Item
     * @description Update an existing saas_webinars item.
     */
    patch: operations["updateSingleItemsSaasWebinars"];
  };
  "/items/rule_executions": {
    /**
     * List Items
     * @description List the rule_executions items.
     */
    get: operations["readItemsRuleExecutions"];
    /**
     * Create an Item
     * @description Create a new rule_executions item.
     */
    post: operations["createItemsRuleExecutions"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing rule_executions items.
     */
    delete: operations["deleteItemsRuleExecutions"];
    /**
     * Update Multiple Items
     * @description Update multiple rule_executions items at the same time.
     */
    patch: operations["updateItemsRuleExecutions"];
  };
  "/items/rule_executions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single rule_executions item by unique identifier.
     */
    get: operations["readSingleItemsRuleExecutions"];
    /**
     * Delete an Item
     * @description Delete an existing rule_executions item.
     */
    delete: operations["deleteSingleItemsRuleExecutions"];
    /**
     * Update an Item
     * @description Update an existing rule_executions item.
     */
    patch: operations["updateSingleItemsRuleExecutions"];
  };
  "/items/campaigns_ai_rules": {
    /**
     * List Items
     * @description List the campaigns_ai_rules items.
     */
    get: operations["readItemsCampaignsAIRules"];
    /**
     * Create an Item
     * @description Create a new campaigns_ai_rules item.
     */
    post: operations["createItemsCampaignsAIRules"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing campaigns_ai_rules items.
     */
    delete: operations["deleteItemsCampaignsAIRules"];
    /**
     * Update Multiple Items
     * @description Update multiple campaigns_ai_rules items at the same time.
     */
    patch: operations["updateItemsCampaignsAIRules"];
  };
  "/items/campaigns_ai_rules/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single campaigns_ai_rules item by unique identifier.
     */
    get: operations["readSingleItemsCampaignsAIRules"];
    /**
     * Delete an Item
     * @description Delete an existing campaigns_ai_rules item.
     */
    delete: operations["deleteSingleItemsCampaignsAIRules"];
    /**
     * Update an Item
     * @description Update an existing campaigns_ai_rules item.
     */
    patch: operations["updateSingleItemsCampaignsAIRules"];
  };
  "/items/ad_sets_ai_rules": {
    /**
     * List Items
     * @description List the ad_sets_ai_rules items.
     */
    get: operations["readItemsAdSetsAIRules"];
    /**
     * Create an Item
     * @description Create a new ad_sets_ai_rules item.
     */
    post: operations["createItemsAdSetsAIRules"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing ad_sets_ai_rules items.
     */
    delete: operations["deleteItemsAdSetsAIRules"];
    /**
     * Update Multiple Items
     * @description Update multiple ad_sets_ai_rules items at the same time.
     */
    patch: operations["updateItemsAdSetsAIRules"];
  };
  "/items/ad_sets_ai_rules/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single ad_sets_ai_rules item by unique identifier.
     */
    get: operations["readSingleItemsAdSetsAIRules"];
    /**
     * Delete an Item
     * @description Delete an existing ad_sets_ai_rules item.
     */
    delete: operations["deleteSingleItemsAdSetsAIRules"];
    /**
     * Update an Item
     * @description Update an existing ad_sets_ai_rules item.
     */
    patch: operations["updateSingleItemsAdSetsAIRules"];
  };
  "/items/ads_ai_rules": {
    /**
     * List Items
     * @description List the ads_ai_rules items.
     */
    get: operations["readItemsAdsAIRules"];
    /**
     * Create an Item
     * @description Create a new ads_ai_rules item.
     */
    post: operations["createItemsAdsAIRules"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing ads_ai_rules items.
     */
    delete: operations["deleteItemsAdsAIRules"];
    /**
     * Update Multiple Items
     * @description Update multiple ads_ai_rules items at the same time.
     */
    patch: operations["updateItemsAdsAIRules"];
  };
  "/items/ads_ai_rules/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single ads_ai_rules item by unique identifier.
     */
    get: operations["readSingleItemsAdsAIRules"];
    /**
     * Delete an Item
     * @description Delete an existing ads_ai_rules item.
     */
    delete: operations["deleteSingleItemsAdsAIRules"];
    /**
     * Update an Item
     * @description Update an existing ads_ai_rules item.
     */
    patch: operations["updateSingleItemsAdsAIRules"];
  };
  "/items/voucher_groups": {
    /**
     * List Items
     * @description List the voucher_groups items.
     */
    get: operations["readItemsVoucherGroups"];
    /**
     * Create an Item
     * @description Create a new voucher_groups item.
     */
    post: operations["createItemsVoucherGroups"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing voucher_groups items.
     */
    delete: operations["deleteItemsVoucherGroups"];
    /**
     * Update Multiple Items
     * @description Update multiple voucher_groups items at the same time.
     */
    patch: operations["updateItemsVoucherGroups"];
  };
  "/items/voucher_groups/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single voucher_groups item by unique identifier.
     */
    get: operations["readSingleItemsVoucherGroups"];
    /**
     * Delete an Item
     * @description Delete an existing voucher_groups item.
     */
    delete: operations["deleteSingleItemsVoucherGroups"];
    /**
     * Update an Item
     * @description Update an existing voucher_groups item.
     */
    patch: operations["updateSingleItemsVoucherGroups"];
  };
  "/items/ad_ads": {
    /**
     * List Items
     * @description List the ad_ads items.
     */
    get: operations["readItemsAdAds"];
    /**
     * Create an Item
     * @description Create a new ad_ads item.
     */
    post: operations["createItemsAdAds"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing ad_ads items.
     */
    delete: operations["deleteItemsAdAds"];
    /**
     * Update Multiple Items
     * @description Update multiple ad_ads items at the same time.
     */
    patch: operations["updateItemsAdAds"];
  };
  "/items/ad_ads/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single ad_ads item by unique identifier.
     */
    get: operations["readSingleItemsAdAds"];
    /**
     * Delete an Item
     * @description Delete an existing ad_ads item.
     */
    delete: operations["deleteSingleItemsAdAds"];
    /**
     * Update an Item
     * @description Update an existing ad_ads item.
     */
    patch: operations["updateSingleItemsAdAds"];
  };
  "/items/saas_referrals": {
    /**
     * List Items
     * @description List the saas_referrals items.
     */
    get: operations["readItemsSaasReferrals"];
    /**
     * Create an Item
     * @description Create a new saas_referrals item.
     */
    post: operations["createItemsSaasReferrals"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_referrals items.
     */
    delete: operations["deleteItemsSaasReferrals"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_referrals items at the same time.
     */
    patch: operations["updateItemsSaasReferrals"];
  };
  "/items/saas_referrals/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_referrals item by unique identifier.
     */
    get: operations["readSingleItemsSaasReferrals"];
    /**
     * Delete an Item
     * @description Delete an existing saas_referrals item.
     */
    delete: operations["deleteSingleItemsSaasReferrals"];
    /**
     * Update an Item
     * @description Update an existing saas_referrals item.
     */
    patch: operations["updateSingleItemsSaasReferrals"];
  };
  "/items/saas_customers": {
    /**
     * List Items
     * @description List the saas_customers items.
     */
    get: operations["readItemsSaasCustomers"];
    /**
     * Create an Item
     * @description Create a new saas_customers item.
     */
    post: operations["createItemsSaasCustomers"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_customers items.
     */
    delete: operations["deleteItemsSaasCustomers"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_customers items at the same time.
     */
    patch: operations["updateItemsSaasCustomers"];
  };
  "/items/saas_customers/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_customers item by unique identifier.
     */
    get: operations["readSingleItemsSaasCustomers"];
    /**
     * Delete an Item
     * @description Delete an existing saas_customers item.
     */
    delete: operations["deleteSingleItemsSaasCustomers"];
    /**
     * Update an Item
     * @description Update an existing saas_customers item.
     */
    patch: operations["updateSingleItemsSaasCustomers"];
  };
  "/items/ad_campaigns": {
    /**
     * List Items
     * @description List the ad_campaigns items.
     */
    get: operations["readItemsAdCampaigns"];
    /**
     * Create an Item
     * @description Create a new ad_campaigns item.
     */
    post: operations["createItemsAdCampaigns"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing ad_campaigns items.
     */
    delete: operations["deleteItemsAdCampaigns"];
    /**
     * Update Multiple Items
     * @description Update multiple ad_campaigns items at the same time.
     */
    patch: operations["updateItemsAdCampaigns"];
  };
  "/items/ad_campaigns/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single ad_campaigns item by unique identifier.
     */
    get: operations["readSingleItemsAdCampaigns"];
    /**
     * Delete an Item
     * @description Delete an existing ad_campaigns item.
     */
    delete: operations["deleteSingleItemsAdCampaigns"];
    /**
     * Update an Item
     * @description Update an existing ad_campaigns item.
     */
    patch: operations["updateSingleItemsAdCampaigns"];
  };
  "/items/bots_datasources": {
    /**
     * List Items
     * @description List the bots_datasources items.
     */
    get: operations["readItemsBotsDatasources"];
    /**
     * Create an Item
     * @description Create a new bots_datasources item.
     */
    post: operations["createItemsBotsDatasources"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_datasources items.
     */
    delete: operations["deleteItemsBotsDatasources"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_datasources items at the same time.
     */
    patch: operations["updateItemsBotsDatasources"];
  };
  "/items/bots_datasources/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_datasources item by unique identifier.
     */
    get: operations["readSingleItemsBotsDatasources"];
    /**
     * Delete an Item
     * @description Delete an existing bots_datasources item.
     */
    delete: operations["deleteSingleItemsBotsDatasources"];
    /**
     * Update an Item
     * @description Update an existing bots_datasources item.
     */
    patch: operations["updateSingleItemsBotsDatasources"];
  };
  "/items/ad_accounts": {
    /**
     * List Items
     * @description List the ad_accounts items.
     */
    get: operations["readItemsAdAccounts"];
    /**
     * Create an Item
     * @description Create a new ad_accounts item.
     */
    post: operations["createItemsAdAccounts"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing ad_accounts items.
     */
    delete: operations["deleteItemsAdAccounts"];
    /**
     * Update Multiple Items
     * @description Update multiple ad_accounts items at the same time.
     */
    patch: operations["updateItemsAdAccounts"];
  };
  "/items/ad_accounts/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single ad_accounts item by unique identifier.
     */
    get: operations["readSingleItemsAdAccounts"];
    /**
     * Delete an Item
     * @description Delete an existing ad_accounts item.
     */
    delete: operations["deleteSingleItemsAdAccounts"];
    /**
     * Update an Item
     * @description Update an existing ad_accounts item.
     */
    patch: operations["updateSingleItemsAdAccounts"];
  };
  "/items/saas_affiliates": {
    /**
     * List Items
     * @description List the saas_affiliates items.
     */
    get: operations["readItemsSaasAffiliates"];
    /**
     * Create an Item
     * @description Create a new saas_affiliates item.
     */
    post: operations["createItemsSaasAffiliates"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_affiliates items.
     */
    delete: operations["deleteItemsSaasAffiliates"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_affiliates items at the same time.
     */
    patch: operations["updateItemsSaasAffiliates"];
  };
  "/items/saas_affiliates/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_affiliates item by unique identifier.
     */
    get: operations["readSingleItemsSaasAffiliates"];
    /**
     * Delete an Item
     * @description Delete an existing saas_affiliates item.
     */
    delete: operations["deleteSingleItemsSaasAffiliates"];
    /**
     * Update an Item
     * @description Update an existing saas_affiliates item.
     */
    patch: operations["updateSingleItemsSaasAffiliates"];
  };
  "/items/bots_datasources_tables": {
    /**
     * List Items
     * @description List the bots_datasources_tables items.
     */
    get: operations["readItemsBotsDatasourcesTables"];
    /**
     * Create an Item
     * @description Create a new bots_datasources_tables item.
     */
    post: operations["createItemsBotsDatasourcesTables"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_datasources_tables items.
     */
    delete: operations["deleteItemsBotsDatasourcesTables"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_datasources_tables items at the same time.
     */
    patch: operations["updateItemsBotsDatasourcesTables"];
  };
  "/items/bots_datasources_tables/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_datasources_tables item by unique identifier.
     */
    get: operations["readSingleItemsBotsDatasourcesTables"];
    /**
     * Delete an Item
     * @description Delete an existing bots_datasources_tables item.
     */
    delete: operations["deleteSingleItemsBotsDatasourcesTables"];
    /**
     * Update an Item
     * @description Update an existing bots_datasources_tables item.
     */
    patch: operations["updateSingleItemsBotsDatasourcesTables"];
  };
  "/items/saas_affiliate_monthly_stats": {
    /**
     * List Items
     * @description List the saas_affiliate_monthly_stats items.
     */
    get: operations["readItemsSaasAffiliateMonthlyStats"];
    /**
     * Create an Item
     * @description Create a new saas_affiliate_monthly_stats item.
     */
    post: operations["createItemsSaasAffiliateMonthlyStats"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_affiliate_monthly_stats items.
     */
    delete: operations["deleteItemsSaasAffiliateMonthlyStats"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_affiliate_monthly_stats items at the same time.
     */
    patch: operations["updateItemsSaasAffiliateMonthlyStats"];
  };
  "/items/saas_affiliate_monthly_stats/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_affiliate_monthly_stats item by unique identifier.
     */
    get: operations["readSingleItemsSaasAffiliateMonthlyStats"];
    /**
     * Delete an Item
     * @description Delete an existing saas_affiliate_monthly_stats item.
     */
    delete: operations["deleteSingleItemsSaasAffiliateMonthlyStats"];
    /**
     * Update an Item
     * @description Update an existing saas_affiliate_monthly_stats item.
     */
    patch: operations["updateSingleItemsSaasAffiliateMonthlyStats"];
  };
  "/items/saas_commission_payments": {
    /**
     * List Items
     * @description List the saas_commission_payments items.
     */
    get: operations["readItemsSaasCommissionPayments"];
    /**
     * Create an Item
     * @description Create a new saas_commission_payments item.
     */
    post: operations["createItemsSaasCommissionPayments"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_commission_payments items.
     */
    delete: operations["deleteItemsSaasCommissionPayments"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_commission_payments items at the same time.
     */
    patch: operations["updateItemsSaasCommissionPayments"];
  };
  "/items/saas_commission_payments/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_commission_payments item by unique identifier.
     */
    get: operations["readSingleItemsSaasCommissionPayments"];
    /**
     * Delete an Item
     * @description Delete an existing saas_commission_payments item.
     */
    delete: operations["deleteSingleItemsSaasCommissionPayments"];
    /**
     * Update an Item
     * @description Update an existing saas_commission_payments item.
     */
    patch: operations["updateSingleItemsSaasCommissionPayments"];
  };
  "/items/mail_outbox": {
    /**
     * List Items
     * @description List the mail_outbox items.
     */
    get: operations["readItemsMailOutbox"];
    /**
     * Create an Item
     * @description Create a new mail_outbox item.
     */
    post: operations["createItemsMailOutbox"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing mail_outbox items.
     */
    delete: operations["deleteItemsMailOutbox"];
    /**
     * Update Multiple Items
     * @description Update multiple mail_outbox items at the same time.
     */
    patch: operations["updateItemsMailOutbox"];
  };
  "/items/mail_outbox/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single mail_outbox item by unique identifier.
     */
    get: operations["readSingleItemsMailOutbox"];
    /**
     * Delete an Item
     * @description Delete an existing mail_outbox item.
     */
    delete: operations["deleteSingleItemsMailOutbox"];
    /**
     * Update an Item
     * @description Update an existing mail_outbox item.
     */
    patch: operations["updateSingleItemsMailOutbox"];
  };
  "/items/bots": {
    /**
     * List Items
     * @description List the bots items.
     */
    get: operations["readItemsBots"];
    /**
     * Create an Item
     * @description Create a new bots item.
     */
    post: operations["createItemsBots"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots items.
     */
    delete: operations["deleteItemsBots"];
    /**
     * Update Multiple Items
     * @description Update multiple bots items at the same time.
     */
    patch: operations["updateItemsBots"];
  };
  "/items/bots/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots item by unique identifier.
     */
    get: operations["readSingleItemsBots"];
    /**
     * Delete an Item
     * @description Delete an existing bots item.
     */
    delete: operations["deleteSingleItemsBots"];
    /**
     * Update an Item
     * @description Update an existing bots item.
     */
    patch: operations["updateSingleItemsBots"];
  };
  "/items/saas_invoices": {
    /**
     * List Items
     * @description List the saas_invoices items.
     */
    get: operations["readItemsSaasInvoices"];
    /**
     * Create an Item
     * @description Create a new saas_invoices item.
     */
    post: operations["createItemsSaasInvoices"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_invoices items.
     */
    delete: operations["deleteItemsSaasInvoices"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_invoices items at the same time.
     */
    patch: operations["updateItemsSaasInvoices"];
  };
  "/items/saas_invoices/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_invoices item by unique identifier.
     */
    get: operations["readSingleItemsSaasInvoices"];
    /**
     * Delete an Item
     * @description Delete an existing saas_invoices item.
     */
    delete: operations["deleteSingleItemsSaasInvoices"];
    /**
     * Update an Item
     * @description Update an existing saas_invoices item.
     */
    patch: operations["updateSingleItemsSaasInvoices"];
  };
  "/items/saas_helpdesk": {
    /**
     * List Items
     * @description List the saas_helpdesk items.
     */
    get: operations["readItemsSaasHelpdesk"];
    /**
     * Create an Item
     * @description Create a new saas_helpdesk item.
     */
    post: operations["createItemsSaasHelpdesk"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_helpdesk items.
     */
    delete: operations["deleteItemsSaasHelpdesk"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_helpdesk items at the same time.
     */
    patch: operations["updateItemsSaasHelpdesk"];
  };
  "/items/saas_helpdesk/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_helpdesk item by unique identifier.
     */
    get: operations["readSingleItemsSaasHelpdesk"];
    /**
     * Delete an Item
     * @description Delete an existing saas_helpdesk item.
     */
    delete: operations["deleteSingleItemsSaasHelpdesk"];
    /**
     * Update an Item
     * @description Update an existing saas_helpdesk item.
     */
    patch: operations["updateSingleItemsSaasHelpdesk"];
  };
  "/items/saas_coupon_campaigns": {
    /**
     * List Items
     * @description List the saas_coupon_campaigns items.
     */
    get: operations["readItemsSaasCouponCampaigns"];
    /**
     * Create an Item
     * @description Create a new saas_coupon_campaigns item.
     */
    post: operations["createItemsSaasCouponCampaigns"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_coupon_campaigns items.
     */
    delete: operations["deleteItemsSaasCouponCampaigns"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_coupon_campaigns items at the same time.
     */
    patch: operations["updateItemsSaasCouponCampaigns"];
  };
  "/items/saas_coupon_campaigns/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_coupon_campaigns item by unique identifier.
     */
    get: operations["readSingleItemsSaasCouponCampaigns"];
    /**
     * Delete an Item
     * @description Delete an existing saas_coupon_campaigns item.
     */
    delete: operations["deleteSingleItemsSaasCouponCampaigns"];
    /**
     * Update an Item
     * @description Update an existing saas_coupon_campaigns item.
     */
    patch: operations["updateSingleItemsSaasCouponCampaigns"];
  };
  "/items/saas_terms": {
    /**
     * List Items
     * @description List the saas_terms items.
     */
    get: operations["readItemsSaasTerms"];
    /**
     * Create an Item
     * @description Create a new saas_terms item.
     */
    post: operations["createItemsSaasTerms"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_terms items.
     */
    delete: operations["deleteItemsSaasTerms"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_terms items at the same time.
     */
    patch: operations["updateItemsSaasTerms"];
  };
  "/items/saas_terms/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_terms item by unique identifier.
     */
    get: operations["readSingleItemsSaasTerms"];
    /**
     * Delete an Item
     * @description Delete an existing saas_terms item.
     */
    delete: operations["deleteSingleItemsSaasTerms"];
    /**
     * Update an Item
     * @description Update an existing saas_terms item.
     */
    patch: operations["updateSingleItemsSaasTerms"];
  };
  "/items/saas_coupons": {
    /**
     * List Items
     * @description List the saas_coupons items.
     */
    get: operations["readItemsSaasCoupons"];
    /**
     * Create an Item
     * @description Create a new saas_coupons item.
     */
    post: operations["createItemsSaasCoupons"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_coupons items.
     */
    delete: operations["deleteItemsSaasCoupons"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_coupons items at the same time.
     */
    patch: operations["updateItemsSaasCoupons"];
  };
  "/items/saas_coupons/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_coupons item by unique identifier.
     */
    get: operations["readSingleItemsSaasCoupons"];
    /**
     * Delete an Item
     * @description Delete an existing saas_coupons item.
     */
    delete: operations["deleteSingleItemsSaasCoupons"];
    /**
     * Update an Item
     * @description Update an existing saas_coupons item.
     */
    patch: operations["updateSingleItemsSaasCoupons"];
  };
  "/items/bot_documents_files": {
    /**
     * List Items
     * @description List the bot_documents_files items.
     */
    get: operations["readItemsBotDocumentsFiles"];
    /**
     * Create an Item
     * @description Create a new bot_documents_files item.
     */
    post: operations["createItemsBotDocumentsFiles"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bot_documents_files items.
     */
    delete: operations["deleteItemsBotDocumentsFiles"];
    /**
     * Update Multiple Items
     * @description Update multiple bot_documents_files items at the same time.
     */
    patch: operations["updateItemsBotDocumentsFiles"];
  };
  "/items/bot_documents_files/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bot_documents_files item by unique identifier.
     */
    get: operations["readSingleItemsBotDocumentsFiles"];
    /**
     * Delete an Item
     * @description Delete an existing bot_documents_files item.
     */
    delete: operations["deleteSingleItemsBotDocumentsFiles"];
    /**
     * Update an Item
     * @description Update an existing bot_documents_files item.
     */
    patch: operations["updateSingleItemsBotDocumentsFiles"];
  };
  "/items/bots_model": {
    /**
     * List Items
     * @description List the bots_model items.
     */
    get: operations["readItemsBotsModel"];
    /**
     * Create an Item
     * @description Create a new bots_model item.
     */
    post: operations["createItemsBotsModel"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_model items.
     */
    delete: operations["deleteItemsBotsModel"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_model items at the same time.
     */
    patch: operations["updateItemsBotsModel"];
  };
  "/items/bots_model/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_model item by unique identifier.
     */
    get: operations["readSingleItemsBotsModel"];
    /**
     * Delete an Item
     * @description Delete an existing bots_model item.
     */
    delete: operations["deleteSingleItemsBotsModel"];
    /**
     * Update an Item
     * @description Update an existing bots_model item.
     */
    patch: operations["updateSingleItemsBotsModel"];
  };
  "/items/saas_features": {
    /**
     * List Items
     * @description List the saas_features items.
     */
    get: operations["readItemsSaasFeatures"];
    /**
     * Create an Item
     * @description Create a new saas_features item.
     */
    post: operations["createItemsSaasFeatures"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_features items.
     */
    delete: operations["deleteItemsSaasFeatures"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_features items at the same time.
     */
    patch: operations["updateItemsSaasFeatures"];
  };
  "/items/saas_features/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_features item by unique identifier.
     */
    get: operations["readSingleItemsSaasFeatures"];
    /**
     * Delete an Item
     * @description Delete an existing saas_features item.
     */
    delete: operations["deleteSingleItemsSaasFeatures"];
    /**
     * Update an Item
     * @description Update an existing saas_features item.
     */
    patch: operations["updateSingleItemsSaasFeatures"];
  };
  "/items/bots_datasources_fields": {
    /**
     * List Items
     * @description List the bots_datasources_fields items.
     */
    get: operations["readItemsBotsDatasourcesFields"];
    /**
     * Create an Item
     * @description Create a new bots_datasources_fields item.
     */
    post: operations["createItemsBotsDatasourcesFields"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_datasources_fields items.
     */
    delete: operations["deleteItemsBotsDatasourcesFields"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_datasources_fields items at the same time.
     */
    patch: operations["updateItemsBotsDatasourcesFields"];
  };
  "/items/bots_datasources_fields/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_datasources_fields item by unique identifier.
     */
    get: operations["readSingleItemsBotsDatasourcesFields"];
    /**
     * Delete an Item
     * @description Delete an existing bots_datasources_fields item.
     */
    delete: operations["deleteSingleItemsBotsDatasourcesFields"];
    /**
     * Update an Item
     * @description Update an existing bots_datasources_fields item.
     */
    patch: operations["updateSingleItemsBotsDatasourcesFields"];
  };
  "/items/tmp": {
    /**
     * List Items
     * @description List the tmp items.
     */
    get: operations["readItemsTmp"];
    /**
     * Create an Item
     * @description Create a new tmp item.
     */
    post: operations["createItemsTmp"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing tmp items.
     */
    delete: operations["deleteItemsTmp"];
    /**
     * Update Multiple Items
     * @description Update multiple tmp items at the same time.
     */
    patch: operations["updateItemsTmp"];
  };
  "/items/tmp/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single tmp item by unique identifier.
     */
    get: operations["readSingleItemsTmp"];
    /**
     * Delete an Item
     * @description Delete an existing tmp item.
     */
    delete: operations["deleteSingleItemsTmp"];
    /**
     * Update an Item
     * @description Update an existing tmp item.
     */
    patch: operations["updateSingleItemsTmp"];
  };
  "/items/bots_muted_users": {
    /**
     * List Items
     * @description List the bots_muted_users items.
     */
    get: operations["readItemsBotsMutedUsers"];
    /**
     * Create an Item
     * @description Create a new bots_muted_users item.
     */
    post: operations["createItemsBotsMutedUsers"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_muted_users items.
     */
    delete: operations["deleteItemsBotsMutedUsers"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_muted_users items at the same time.
     */
    patch: operations["updateItemsBotsMutedUsers"];
  };
  "/items/bots_muted_users/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_muted_users item by unique identifier.
     */
    get: operations["readSingleItemsBotsMutedUsers"];
    /**
     * Delete an Item
     * @description Delete an existing bots_muted_users item.
     */
    delete: operations["deleteSingleItemsBotsMutedUsers"];
    /**
     * Update an Item
     * @description Update an existing bots_muted_users item.
     */
    patch: operations["updateSingleItemsBotsMutedUsers"];
  };
  "/items/vouchers_users": {
    /**
     * List Items
     * @description List the vouchers_users items.
     */
    get: operations["readItemsVouchersUsers"];
    /**
     * Create an Item
     * @description Create a new vouchers_users item.
     */
    post: operations["createItemsVouchersUsers"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing vouchers_users items.
     */
    delete: operations["deleteItemsVouchersUsers"];
    /**
     * Update Multiple Items
     * @description Update multiple vouchers_users items at the same time.
     */
    patch: operations["updateItemsVouchersUsers"];
  };
  "/items/vouchers_users/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single vouchers_users item by unique identifier.
     */
    get: operations["readSingleItemsVouchersUsers"];
    /**
     * Delete an Item
     * @description Delete an existing vouchers_users item.
     */
    delete: operations["deleteSingleItemsVouchersUsers"];
    /**
     * Update an Item
     * @description Update an existing vouchers_users item.
     */
    patch: operations["updateSingleItemsVouchersUsers"];
  };
  "/items/vouchers": {
    /**
     * List Items
     * @description List the vouchers items.
     */
    get: operations["readItemsVouchers"];
    /**
     * Create an Item
     * @description Create a new vouchers item.
     */
    post: operations["createItemsVouchers"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing vouchers items.
     */
    delete: operations["deleteItemsVouchers"];
    /**
     * Update Multiple Items
     * @description Update multiple vouchers items at the same time.
     */
    patch: operations["updateItemsVouchers"];
  };
  "/items/vouchers/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single vouchers item by unique identifier.
     */
    get: operations["readSingleItemsVouchers"];
    /**
     * Delete an Item
     * @description Delete an existing vouchers item.
     */
    delete: operations["deleteSingleItemsVouchers"];
    /**
     * Update an Item
     * @description Update an existing vouchers item.
     */
    patch: operations["updateSingleItemsVouchers"];
  };
  "/items/orders": {
    /**
     * List Items
     * @description List the orders items.
     */
    get: operations["readItemsOrders"];
    /**
     * Create an Item
     * @description Create a new orders item.
     */
    post: operations["createItemsOrders"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing orders items.
     */
    delete: operations["deleteItemsOrders"];
    /**
     * Update Multiple Items
     * @description Update multiple orders items at the same time.
     */
    patch: operations["updateItemsOrders"];
  };
  "/items/orders/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single orders item by unique identifier.
     */
    get: operations["readSingleItemsOrders"];
    /**
     * Delete an Item
     * @description Delete an existing orders item.
     */
    delete: operations["deleteSingleItemsOrders"];
    /**
     * Update an Item
     * @description Update an existing orders item.
     */
    patch: operations["updateSingleItemsOrders"];
  };
  "/items/products": {
    /**
     * List Items
     * @description List the products items.
     */
    get: operations["readItemsProducts"];
    /**
     * Create an Item
     * @description Create a new products item.
     */
    post: operations["createItemsProducts"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing products items.
     */
    delete: operations["deleteItemsProducts"];
    /**
     * Update Multiple Items
     * @description Update multiple products items at the same time.
     */
    patch: operations["updateItemsProducts"];
  };
  "/items/products/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single products item by unique identifier.
     */
    get: operations["readSingleItemsProducts"];
    /**
     * Delete an Item
     * @description Delete an existing products item.
     */
    delete: operations["deleteSingleItemsProducts"];
    /**
     * Update an Item
     * @description Update an existing products item.
     */
    patch: operations["updateSingleItemsProducts"];
  };
  "/items/orderbots": {
    /**
     * List Items
     * @description List the orderbots items.
     */
    get: operations["readItemsOrderbots"];
    /**
     * Create an Item
     * @description Create a new orderbots item.
     */
    post: operations["createItemsOrderbots"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing orderbots items.
     */
    delete: operations["deleteItemsOrderbots"];
    /**
     * Update Multiple Items
     * @description Update multiple orderbots items at the same time.
     */
    patch: operations["updateItemsOrderbots"];
  };
  "/items/orderbots/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single orderbots item by unique identifier.
     */
    get: operations["readSingleItemsOrderbots"];
    /**
     * Delete an Item
     * @description Delete an existing orderbots item.
     */
    delete: operations["deleteSingleItemsOrderbots"];
    /**
     * Update an Item
     * @description Update an existing orderbots item.
     */
    patch: operations["updateSingleItemsOrderbots"];
  };
  "/items/vouchers_codes": {
    /**
     * List Items
     * @description List the vouchers_codes items.
     */
    get: operations["readItemsVouchersCodes"];
    /**
     * Create an Item
     * @description Create a new vouchers_codes item.
     */
    post: operations["createItemsVouchersCodes"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing vouchers_codes items.
     */
    delete: operations["deleteItemsVouchersCodes"];
    /**
     * Update Multiple Items
     * @description Update multiple vouchers_codes items at the same time.
     */
    patch: operations["updateItemsVouchersCodes"];
  };
  "/items/vouchers_codes/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single vouchers_codes item by unique identifier.
     */
    get: operations["readSingleItemsVouchersCodes"];
    /**
     * Delete an Item
     * @description Delete an existing vouchers_codes item.
     */
    delete: operations["deleteSingleItemsVouchersCodes"];
    /**
     * Update an Item
     * @description Update an existing vouchers_codes item.
     */
    patch: operations["updateSingleItemsVouchersCodes"];
  };
  "/items/orderbots_channels": {
    /**
     * List Items
     * @description List the orderbots_channels items.
     */
    get: operations["readItemsOrderbotsChannels"];
    /**
     * Create an Item
     * @description Create a new orderbots_channels item.
     */
    post: operations["createItemsOrderbotsChannels"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing orderbots_channels items.
     */
    delete: operations["deleteItemsOrderbotsChannels"];
    /**
     * Update Multiple Items
     * @description Update multiple orderbots_channels items at the same time.
     */
    patch: operations["updateItemsOrderbotsChannels"];
  };
  "/items/orderbots_channels/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single orderbots_channels item by unique identifier.
     */
    get: operations["readSingleItemsOrderbotsChannels"];
    /**
     * Delete an Item
     * @description Delete an existing orderbots_channels item.
     */
    delete: operations["deleteSingleItemsOrderbotsChannels"];
    /**
     * Update an Item
     * @description Update an existing orderbots_channels item.
     */
    patch: operations["updateSingleItemsOrderbotsChannels"];
  };
  "/items/user_profile": {
    /**
     * List Items
     * @description List the user_profile items.
     */
    get: operations["readItemsUserProfile"];
    /**
     * Create an Item
     * @description Create a new user_profile item.
     */
    post: operations["createItemsUserProfile"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing user_profile items.
     */
    delete: operations["deleteItemsUserProfile"];
    /**
     * Update Multiple Items
     * @description Update multiple user_profile items at the same time.
     */
    patch: operations["updateItemsUserProfile"];
  };
  "/items/user_profile/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single user_profile item by unique identifier.
     */
    get: operations["readSingleItemsUserProfile"];
    /**
     * Delete an Item
     * @description Delete an existing user_profile item.
     */
    delete: operations["deleteSingleItemsUserProfile"];
    /**
     * Update an Item
     * @description Update an existing user_profile item.
     */
    patch: operations["updateSingleItemsUserProfile"];
  };
  "/items/bots_orders": {
    /**
     * List Items
     * @description List the bots_orders items.
     */
    get: operations["readItemsBotsOrders"];
    /**
     * Create an Item
     * @description Create a new bots_orders item.
     */
    post: operations["createItemsBotsOrders"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_orders items.
     */
    delete: operations["deleteItemsBotsOrders"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_orders items at the same time.
     */
    patch: operations["updateItemsBotsOrders"];
  };
  "/items/bots_orders/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_orders item by unique identifier.
     */
    get: operations["readSingleItemsBotsOrders"];
    /**
     * Delete an Item
     * @description Delete an existing bots_orders item.
     */
    delete: operations["deleteSingleItemsBotsOrders"];
    /**
     * Update an Item
     * @description Update an existing bots_orders item.
     */
    patch: operations["updateSingleItemsBotsOrders"];
  };
  "/items/saas_teams_invites": {
    /**
     * List Items
     * @description List the saas_teams_invites items.
     */
    get: operations["readItemsSaasTeamsInvites"];
    /**
     * Create an Item
     * @description Create a new saas_teams_invites item.
     */
    post: operations["createItemsSaasTeamsInvites"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_teams_invites items.
     */
    delete: operations["deleteItemsSaasTeamsInvites"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_teams_invites items at the same time.
     */
    patch: operations["updateItemsSaasTeamsInvites"];
  };
  "/items/saas_teams_invites/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_teams_invites item by unique identifier.
     */
    get: operations["readSingleItemsSaasTeamsInvites"];
    /**
     * Delete an Item
     * @description Delete an existing saas_teams_invites item.
     */
    delete: operations["deleteSingleItemsSaasTeamsInvites"];
    /**
     * Update an Item
     * @description Update an existing saas_teams_invites item.
     */
    patch: operations["updateSingleItemsSaasTeamsInvites"];
  };
  "/items/bots_fallback": {
    /**
     * List Items
     * @description List the bots_fallback items.
     */
    get: operations["readItemsBotsFallback"];
    /**
     * Create an Item
     * @description Create a new bots_fallback item.
     */
    post: operations["createItemsBotsFallback"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_fallback items.
     */
    delete: operations["deleteItemsBotsFallback"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_fallback items at the same time.
     */
    patch: operations["updateItemsBotsFallback"];
  };
  "/items/bots_fallback/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_fallback item by unique identifier.
     */
    get: operations["readSingleItemsBotsFallback"];
    /**
     * Delete an Item
     * @description Delete an existing bots_fallback item.
     */
    delete: operations["deleteSingleItemsBotsFallback"];
    /**
     * Update an Item
     * @description Update an existing bots_fallback item.
     */
    patch: operations["updateSingleItemsBotsFallback"];
  };
  "/comments": {
    /**
     * List Comments
     * @description List the comments.
     */
    get: operations["getComments"];
    /**
     * Create a Comment
     * @description Create a new comment.
     */
    post: operations["createComment"];
    /**
     * Delete Multiple Comments
     * @description Delete multiple existing comments.
     */
    delete: operations["deleteComments"];
    /**
     * Update Multiple Comments
     * @description Update multiple comments at the same time.
     */
    patch: operations["updateComments"];
  };
  "/comments/{id}": {
    /**
     * Retrieve a Comment
     * @description Retrieve a single comment by unique identifier.
     */
    get: operations["getComment"];
    /**
     * Delete a Comment
     * @description Delete an existing comment.
     */
    delete: operations["deleteComment"];
    /**
     * Update a Comment
     * @description Update an existing comment.
     */
    patch: operations["updateComment"];
  };
  "/items/bots_knowledges_files": {
    /**
     * List Items
     * @description List the bots_knowledges_files items.
     */
    get: operations["readItemsBotsKnowledgesFiles"];
    /**
     * Create an Item
     * @description Create a new bots_knowledges_files item.
     */
    post: operations["createItemsBotsKnowledgesFiles"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_knowledges_files items.
     */
    delete: operations["deleteItemsBotsKnowledgesFiles"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_knowledges_files items at the same time.
     */
    patch: operations["updateItemsBotsKnowledgesFiles"];
  };
  "/items/bots_knowledges_files/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_knowledges_files item by unique identifier.
     */
    get: operations["readSingleItemsBotsKnowledgesFiles"];
    /**
     * Delete an Item
     * @description Delete an existing bots_knowledges_files item.
     */
    delete: operations["deleteSingleItemsBotsKnowledgesFiles"];
    /**
     * Update an Item
     * @description Update an existing bots_knowledges_files item.
     */
    patch: operations["updateSingleItemsBotsKnowledgesFiles"];
  };
  "/items/user_feedback": {
    /**
     * List Items
     * @description List the user_feedback items.
     */
    get: operations["readItemsUserFeedback"];
    /**
     * Create an Item
     * @description Create a new user_feedback item.
     */
    post: operations["createItemsUserFeedback"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing user_feedback items.
     */
    delete: operations["deleteItemsUserFeedback"];
    /**
     * Update Multiple Items
     * @description Update multiple user_feedback items at the same time.
     */
    patch: operations["updateItemsUserFeedback"];
  };
  "/items/user_feedback/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single user_feedback item by unique identifier.
     */
    get: operations["readSingleItemsUserFeedback"];
    /**
     * Delete an Item
     * @description Delete an existing user_feedback item.
     */
    delete: operations["deleteSingleItemsUserFeedback"];
    /**
     * Update an Item
     * @description Update an existing user_feedback item.
     */
    patch: operations["updateSingleItemsUserFeedback"];
  };
  "/items/bots_knowledges_files_1": {
    /**
     * List Items
     * @description List the bots_knowledges_files_1 items.
     */
    get: operations["readItemsBotsKnowledgesFiles1"];
    /**
     * Create an Item
     * @description Create a new bots_knowledges_files_1 item.
     */
    post: operations["createItemsBotsKnowledgesFiles1"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_knowledges_files_1 items.
     */
    delete: operations["deleteItemsBotsKnowledgesFiles1"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_knowledges_files_1 items at the same time.
     */
    patch: operations["updateItemsBotsKnowledgesFiles1"];
  };
  "/items/bots_knowledges_files_1/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_knowledges_files_1 item by unique identifier.
     */
    get: operations["readSingleItemsBotsKnowledgesFiles1"];
    /**
     * Delete an Item
     * @description Delete an existing bots_knowledges_files_1 item.
     */
    delete: operations["deleteSingleItemsBotsKnowledgesFiles1"];
    /**
     * Update an Item
     * @description Update an existing bots_knowledges_files_1 item.
     */
    patch: operations["updateSingleItemsBotsKnowledgesFiles1"];
  };
  "/items/saas_coupons_translations": {
    /**
     * List Items
     * @description List the saas_coupons_translations items.
     */
    get: operations["readItemsSaasCouponsTranslations"];
    /**
     * Create an Item
     * @description Create a new saas_coupons_translations item.
     */
    post: operations["createItemsSaasCouponsTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_coupons_translations items.
     */
    delete: operations["deleteItemsSaasCouponsTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_coupons_translations items at the same time.
     */
    patch: operations["updateItemsSaasCouponsTranslations"];
  };
  "/items/saas_coupons_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_coupons_translations item by unique identifier.
     */
    get: operations["readSingleItemsSaasCouponsTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing saas_coupons_translations item.
     */
    delete: operations["deleteSingleItemsSaasCouponsTranslations"];
    /**
     * Update an Item
     * @description Update an existing saas_coupons_translations item.
     */
    patch: operations["updateSingleItemsSaasCouponsTranslations"];
  };
  "/items/tasks": {
    /**
     * List Items
     * @description List the tasks items.
     */
    get: operations["readItemsTasks"];
    /**
     * Create an Item
     * @description Create a new tasks item.
     */
    post: operations["createItemsTasks"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing tasks items.
     */
    delete: operations["deleteItemsTasks"];
    /**
     * Update Multiple Items
     * @description Update multiple tasks items at the same time.
     */
    patch: operations["updateItemsTasks"];
  };
  "/items/tasks/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single tasks item by unique identifier.
     */
    get: operations["readSingleItemsTasks"];
    /**
     * Delete an Item
     * @description Delete an existing tasks item.
     */
    delete: operations["deleteSingleItemsTasks"];
    /**
     * Update an Item
     * @description Update an existing tasks item.
     */
    patch: operations["updateSingleItemsTasks"];
  };
  "/items/bots_documents": {
    /**
     * List Items
     * @description List the bots_documents items.
     */
    get: operations["readItemsBotsDocuments"];
    /**
     * Create an Item
     * @description Create a new bots_documents item.
     */
    post: operations["createItemsBotsDocuments"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_documents items.
     */
    delete: operations["deleteItemsBotsDocuments"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_documents items at the same time.
     */
    patch: operations["updateItemsBotsDocuments"];
  };
  "/items/bots_documents/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_documents item by unique identifier.
     */
    get: operations["readSingleItemsBotsDocuments"];
    /**
     * Delete an Item
     * @description Delete an existing bots_documents item.
     */
    delete: operations["deleteSingleItemsBotsDocuments"];
    /**
     * Update an Item
     * @description Update an existing bots_documents item.
     */
    patch: operations["updateSingleItemsBotsDocuments"];
  };
  "/items/mail_templates": {
    /**
     * List Items
     * @description List the mail_templates items.
     */
    get: operations["readItemsMailTemplates"];
    /**
     * Create an Item
     * @description Create a new mail_templates item.
     */
    post: operations["createItemsMailTemplates"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing mail_templates items.
     */
    delete: operations["deleteItemsMailTemplates"];
    /**
     * Update Multiple Items
     * @description Update multiple mail_templates items at the same time.
     */
    patch: operations["updateItemsMailTemplates"];
  };
  "/items/mail_templates/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single mail_templates item by unique identifier.
     */
    get: operations["readSingleItemsMailTemplates"];
    /**
     * Delete an Item
     * @description Delete an existing mail_templates item.
     */
    delete: operations["deleteSingleItemsMailTemplates"];
    /**
     * Update an Item
     * @description Update an existing mail_templates item.
     */
    patch: operations["updateSingleItemsMailTemplates"];
  };
  "/items/vouchers_brands": {
    /**
     * List Items
     * @description List the vouchers_brands items.
     */
    get: operations["readItemsVouchersBrands"];
    /**
     * Create an Item
     * @description Create a new vouchers_brands item.
     */
    post: operations["createItemsVouchersBrands"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing vouchers_brands items.
     */
    delete: operations["deleteItemsVouchersBrands"];
    /**
     * Update Multiple Items
     * @description Update multiple vouchers_brands items at the same time.
     */
    patch: operations["updateItemsVouchersBrands"];
  };
  "/items/vouchers_brands/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single vouchers_brands item by unique identifier.
     */
    get: operations["readSingleItemsVouchersBrands"];
    /**
     * Delete an Item
     * @description Delete an existing vouchers_brands item.
     */
    delete: operations["deleteSingleItemsVouchersBrands"];
    /**
     * Update an Item
     * @description Update an existing vouchers_brands item.
     */
    patch: operations["updateSingleItemsVouchersBrands"];
  };
  "/items/channel_users": {
    /**
     * List Items
     * @description List the channel_users items.
     */
    get: operations["readItemsChannelUsers"];
    /**
     * Create an Item
     * @description Create a new channel_users item.
     */
    post: operations["createItemsChannelUsers"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing channel_users items.
     */
    delete: operations["deleteItemsChannelUsers"];
    /**
     * Update Multiple Items
     * @description Update multiple channel_users items at the same time.
     */
    patch: operations["updateItemsChannelUsers"];
  };
  "/items/channel_users/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single channel_users item by unique identifier.
     */
    get: operations["readSingleItemsChannelUsers"];
    /**
     * Delete an Item
     * @description Delete an existing channel_users item.
     */
    delete: operations["deleteSingleItemsChannelUsers"];
    /**
     * Update an Item
     * @description Update an existing channel_users item.
     */
    patch: operations["updateSingleItemsChannelUsers"];
  };
  "/items/test": {
    /**
     * List Items
     * @description List the test items.
     */
    get: operations["readItemsTest"];
    /**
     * Create an Item
     * @description Create a new test item.
     */
    post: operations["createItemsTest"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing test items.
     */
    delete: operations["deleteItemsTest"];
    /**
     * Update Multiple Items
     * @description Update multiple test items at the same time.
     */
    patch: operations["updateItemsTest"];
  };
  "/items/test/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single test item by unique identifier.
     */
    get: operations["readSingleItemsTest"];
    /**
     * Delete an Item
     * @description Delete an existing test item.
     */
    delete: operations["deleteSingleItemsTest"];
    /**
     * Update an Item
     * @description Update an existing test item.
     */
    patch: operations["updateSingleItemsTest"];
  };
  "/items/saas_terms_translations": {
    /**
     * List Items
     * @description List the saas_terms_translations items.
     */
    get: operations["readItemsSaasTermsTranslations"];
    /**
     * Create an Item
     * @description Create a new saas_terms_translations item.
     */
    post: operations["createItemsSaasTermsTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing saas_terms_translations items.
     */
    delete: operations["deleteItemsSaasTermsTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple saas_terms_translations items at the same time.
     */
    patch: operations["updateItemsSaasTermsTranslations"];
  };
  "/items/saas_terms_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single saas_terms_translations item by unique identifier.
     */
    get: operations["readSingleItemsSaasTermsTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing saas_terms_translations item.
     */
    delete: operations["deleteSingleItemsSaasTermsTranslations"];
    /**
     * Update an Item
     * @description Update an existing saas_terms_translations item.
     */
    patch: operations["updateSingleItemsSaasTermsTranslations"];
  };
  "/items/bots_inquiries": {
    /**
     * List Items
     * @description List the bots_inquiries items.
     */
    get: operations["readItemsBotsInquiries"];
    /**
     * Create an Item
     * @description Create a new bots_inquiries item.
     */
    post: operations["createItemsBotsInquiries"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bots_inquiries items.
     */
    delete: operations["deleteItemsBotsInquiries"];
    /**
     * Update Multiple Items
     * @description Update multiple bots_inquiries items at the same time.
     */
    patch: operations["updateItemsBotsInquiries"];
  };
  "/items/bots_inquiries/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bots_inquiries item by unique identifier.
     */
    get: operations["readSingleItemsBotsInquiries"];
    /**
     * Delete an Item
     * @description Delete an existing bots_inquiries item.
     */
    delete: operations["deleteSingleItemsBotsInquiries"];
    /**
     * Update an Item
     * @description Update an existing bots_inquiries item.
     */
    patch: operations["updateSingleItemsBotsInquiries"];
  };
  "/items/chat_hubs": {
    /**
     * List Items
     * @description List the chat_hubs items.
     */
    get: operations["readItemsChatHubs"];
    /**
     * Create an Item
     * @description Create a new chat_hubs item.
     */
    post: operations["createItemsChatHubs"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing chat_hubs items.
     */
    delete: operations["deleteItemsChatHubs"];
    /**
     * Update Multiple Items
     * @description Update multiple chat_hubs items at the same time.
     */
    patch: operations["updateItemsChatHubs"];
  };
  "/items/chat_hubs/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single chat_hubs item by unique identifier.
     */
    get: operations["readSingleItemsChatHubs"];
    /**
     * Delete an Item
     * @description Delete an existing chat_hubs item.
     */
    delete: operations["deleteSingleItemsChatHubs"];
    /**
     * Update an Item
     * @description Update an existing chat_hubs item.
     */
    patch: operations["updateSingleItemsChatHubs"];
  };
  "/items/bot_documents": {
    /**
     * List Items
     * @description List the bot_documents items.
     */
    get: operations["readItemsBotDocuments"];
    /**
     * Create an Item
     * @description Create a new bot_documents item.
     */
    post: operations["createItemsBotDocuments"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing bot_documents items.
     */
    delete: operations["deleteItemsBotDocuments"];
    /**
     * Update Multiple Items
     * @description Update multiple bot_documents items at the same time.
     */
    patch: operations["updateItemsBotDocuments"];
  };
  "/items/bot_documents/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single bot_documents item by unique identifier.
     */
    get: operations["readSingleItemsBotDocuments"];
    /**
     * Delete an Item
     * @description Delete an existing bot_documents item.
     */
    delete: operations["deleteSingleItemsBotDocuments"];
    /**
     * Update an Item
     * @description Update an existing bot_documents item.
     */
    patch: operations["updateSingleItemsBotDocuments"];
  };
  "/items/chat_hubs_channels": {
    /**
     * List Items
     * @description List the chat_hubs_channels items.
     */
    get: operations["readItemsChatHubsChannels"];
    /**
     * Create an Item
     * @description Create a new chat_hubs_channels item.
     */
    post: operations["createItemsChatHubsChannels"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing chat_hubs_channels items.
     */
    delete: operations["deleteItemsChatHubsChannels"];
    /**
     * Update Multiple Items
     * @description Update multiple chat_hubs_channels items at the same time.
     */
    patch: operations["updateItemsChatHubsChannels"];
  };
  "/items/chat_hubs_channels/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single chat_hubs_channels item by unique identifier.
     */
    get: operations["readSingleItemsChatHubsChannels"];
    /**
     * Delete an Item
     * @description Delete an existing chat_hubs_channels item.
     */
    delete: operations["deleteSingleItemsChatHubsChannels"];
    /**
     * Update an Item
     * @description Update an existing chat_hubs_channels item.
     */
    patch: operations["updateSingleItemsChatHubsChannels"];
  };
  "/items/lead_submissions": {
    /**
     * List Items
     * @description List the lead_submissions items.
     */
    get: operations["readItemsLeadSubmissions"];
    /**
     * Create an Item
     * @description Create a new lead_submissions item.
     */
    post: operations["createItemsLeadSubmissions"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing lead_submissions items.
     */
    delete: operations["deleteItemsLeadSubmissions"];
    /**
     * Update Multiple Items
     * @description Update multiple lead_submissions items at the same time.
     */
    patch: operations["updateItemsLeadSubmissions"];
  };
  "/items/lead_submissions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single lead_submissions item by unique identifier.
     */
    get: operations["readSingleItemsLeadSubmissions"];
    /**
     * Delete an Item
     * @description Delete an existing lead_submissions item.
     */
    delete: operations["deleteSingleItemsLeadSubmissions"];
    /**
     * Update an Item
     * @description Update an existing lead_submissions item.
     */
    patch: operations["updateSingleItemsLeadSubmissions"];
  };
  "/items/beacons": {
    /**
     * List Items
     * @description List the beacons items.
     */
    get: operations["readItemsBeacons"];
    /**
     * Create an Item
     * @description Create a new beacons item.
     */
    post: operations["createItemsBeacons"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing beacons items.
     */
    delete: operations["deleteItemsBeacons"];
    /**
     * Update Multiple Items
     * @description Update multiple beacons items at the same time.
     */
    patch: operations["updateItemsBeacons"];
  };
  "/items/beacons/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single beacons item by unique identifier.
     */
    get: operations["readSingleItemsBeacons"];
    /**
     * Delete an Item
     * @description Delete an existing beacons item.
     */
    delete: operations["deleteSingleItemsBeacons"];
    /**
     * Update an Item
     * @description Update an existing beacons item.
     */
    patch: operations["updateSingleItemsBeacons"];
  };
  "/items/locations": {
    /**
     * List Items
     * @description List the locations items.
     */
    get: operations["readItemsLocations"];
    /**
     * Create an Item
     * @description Create a new locations item.
     */
    post: operations["createItemsLocations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing locations items.
     */
    delete: operations["deleteItemsLocations"];
    /**
     * Update Multiple Items
     * @description Update multiple locations items at the same time.
     */
    patch: operations["updateItemsLocations"];
  };
  "/items/locations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single locations item by unique identifier.
     */
    get: operations["readSingleItemsLocations"];
    /**
     * Delete an Item
     * @description Delete an existing locations item.
     */
    delete: operations["deleteSingleItemsLocations"];
    /**
     * Update an Item
     * @description Update an existing locations item.
     */
    patch: operations["updateSingleItemsLocations"];
  };
  "/items/zones": {
    /**
     * List Items
     * @description List the zones items.
     */
    get: operations["readItemsZones"];
    /**
     * Create an Item
     * @description Create a new zones item.
     */
    post: operations["createItemsZones"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing zones items.
     */
    delete: operations["deleteItemsZones"];
    /**
     * Update Multiple Items
     * @description Update multiple zones items at the same time.
     */
    patch: operations["updateItemsZones"];
  };
  "/items/zones/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single zones item by unique identifier.
     */
    get: operations["readSingleItemsZones"];
    /**
     * Delete an Item
     * @description Delete an existing zones item.
     */
    delete: operations["deleteSingleItemsZones"];
    /**
     * Update an Item
     * @description Update an existing zones item.
     */
    patch: operations["updateSingleItemsZones"];
  };
  "/items/liff_tokens": {
    /**
     * List Items
     * @description List the liff_tokens items.
     */
    get: operations["readItemsLiffTokens"];
    /**
     * Create an Item
     * @description Create a new liff_tokens item.
     */
    post: operations["createItemsLiffTokens"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing liff_tokens items.
     */
    delete: operations["deleteItemsLiffTokens"];
    /**
     * Update Multiple Items
     * @description Update multiple liff_tokens items at the same time.
     */
    patch: operations["updateItemsLiffTokens"];
  };
  "/items/liff_tokens/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single liff_tokens item by unique identifier.
     */
    get: operations["readSingleItemsLiffTokens"];
    /**
     * Delete an Item
     * @description Delete an existing liff_tokens item.
     */
    delete: operations["deleteSingleItemsLiffTokens"];
    /**
     * Update an Item
     * @description Update an existing liff_tokens item.
     */
    patch: operations["updateSingleItemsLiffTokens"];
  };
  "/items/test2": {
    /**
     * List Items
     * @description List the test2 items.
     */
    get: operations["readItemsTest2"];
    /**
     * Create an Item
     * @description Create a new test2 item.
     */
    post: operations["createItemsTest2"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing test2 items.
     */
    delete: operations["deleteItemsTest2"];
    /**
     * Update Multiple Items
     * @description Update multiple test2 items at the same time.
     */
    patch: operations["updateItemsTest2"];
  };
  "/items/test2/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single test2 item by unique identifier.
     */
    get: operations["readSingleItemsTest2"];
    /**
     * Delete an Item
     * @description Delete an existing test2 item.
     */
    delete: operations["deleteSingleItemsTest2"];
    /**
     * Update an Item
     * @description Update an existing test2 item.
     */
    patch: operations["updateSingleItemsTest2"];
  };
  "/items/channel_notifications": {
    /**
     * List Items
     * @description List the channel_notifications items.
     */
    get: operations["readItemsChannelNotifications"];
    /**
     * Create an Item
     * @description Create a new channel_notifications item.
     */
    post: operations["createItemsChannelNotifications"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing channel_notifications items.
     */
    delete: operations["deleteItemsChannelNotifications"];
    /**
     * Update Multiple Items
     * @description Update multiple channel_notifications items at the same time.
     */
    patch: operations["updateItemsChannelNotifications"];
  };
  "/items/channel_notifications/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single channel_notifications item by unique identifier.
     */
    get: operations["readSingleItemsChannelNotifications"];
    /**
     * Delete an Item
     * @description Delete an existing channel_notifications item.
     */
    delete: operations["deleteSingleItemsChannelNotifications"];
    /**
     * Update an Item
     * @description Update an existing channel_notifications item.
     */
    patch: operations["updateSingleItemsChannelNotifications"];
  };
  "/items/pages_liff_vouchers_brands": {
    /**
     * List Items
     * @description List the pages_liff_vouchers_brands items.
     */
    get: operations["readItemsPagesLiffVouchersBrands"];
    /**
     * Create an Item
     * @description Create a new pages_liff_vouchers_brands item.
     */
    post: operations["createItemsPagesLiffVouchersBrands"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages_liff_vouchers_brands items.
     */
    delete: operations["deleteItemsPagesLiffVouchersBrands"];
    /**
     * Update Multiple Items
     * @description Update multiple pages_liff_vouchers_brands items at the same time.
     */
    patch: operations["updateItemsPagesLiffVouchersBrands"];
  };
  "/items/pages_liff_vouchers_brands/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages_liff_vouchers_brands item by unique identifier.
     */
    get: operations["readSingleItemsPagesLiffVouchersBrands"];
    /**
     * Delete an Item
     * @description Delete an existing pages_liff_vouchers_brands item.
     */
    delete: operations["deleteSingleItemsPagesLiffVouchersBrands"];
    /**
     * Update an Item
     * @description Update an existing pages_liff_vouchers_brands item.
     */
    patch: operations["updateSingleItemsPagesLiffVouchersBrands"];
  };
  "/items/channel_outboxes": {
    /**
     * List Items
     * @description List the channel_outboxes items.
     */
    get: operations["readItemsChannelOutboxes"];
    /**
     * Create an Item
     * @description Create a new channel_outboxes item.
     */
    post: operations["createItemsChannelOutboxes"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing channel_outboxes items.
     */
    delete: operations["deleteItemsChannelOutboxes"];
    /**
     * Update Multiple Items
     * @description Update multiple channel_outboxes items at the same time.
     */
    patch: operations["updateItemsChannelOutboxes"];
  };
  "/items/channel_outboxes/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single channel_outboxes item by unique identifier.
     */
    get: operations["readSingleItemsChannelOutboxes"];
    /**
     * Delete an Item
     * @description Delete an existing channel_outboxes item.
     */
    delete: operations["deleteSingleItemsChannelOutboxes"];
    /**
     * Update an Item
     * @description Update an existing channel_outboxes item.
     */
    patch: operations["updateSingleItemsChannelOutboxes"];
  };
  "/items/vouchers_translations": {
    /**
     * List Items
     * @description List the vouchers_translations items.
     */
    get: operations["readItemsVouchersTranslations"];
    /**
     * Create an Item
     * @description Create a new vouchers_translations item.
     */
    post: operations["createItemsVouchersTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing vouchers_translations items.
     */
    delete: operations["deleteItemsVouchersTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple vouchers_translations items at the same time.
     */
    patch: operations["updateItemsVouchersTranslations"];
  };
  "/items/vouchers_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single vouchers_translations item by unique identifier.
     */
    get: operations["readSingleItemsVouchersTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing vouchers_translations item.
     */
    delete: operations["deleteSingleItemsVouchersTranslations"];
    /**
     * Update an Item
     * @description Update an existing vouchers_translations item.
     */
    patch: operations["updateSingleItemsVouchersTranslations"];
  };
  "/items/profiles": {
    /**
     * List Items
     * @description List the profiles items.
     */
    get: operations["readItemsProfiles"];
    /**
     * Create an Item
     * @description Create a new profiles item.
     */
    post: operations["createItemsProfiles"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing profiles items.
     */
    delete: operations["deleteItemsProfiles"];
    /**
     * Update Multiple Items
     * @description Update multiple profiles items at the same time.
     */
    patch: operations["updateItemsProfiles"];
  };
  "/items/profiles/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single profiles item by unique identifier.
     */
    get: operations["readSingleItemsProfiles"];
    /**
     * Delete an Item
     * @description Delete an existing profiles item.
     */
    delete: operations["deleteSingleItemsProfiles"];
    /**
     * Update an Item
     * @description Update an existing profiles item.
     */
    patch: operations["updateSingleItemsProfiles"];
  };
  "/items/pages_liff_vouchers": {
    /**
     * List Items
     * @description List the pages_liff_vouchers items.
     */
    get: operations["readItemsPagesLiffVouchers"];
    /**
     * Create an Item
     * @description Create a new pages_liff_vouchers item.
     */
    post: operations["createItemsPagesLiffVouchers"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages_liff_vouchers items.
     */
    delete: operations["deleteItemsPagesLiffVouchers"];
    /**
     * Update Multiple Items
     * @description Update multiple pages_liff_vouchers items at the same time.
     */
    patch: operations["updateItemsPagesLiffVouchers"];
  };
  "/items/pages_liff_vouchers/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages_liff_vouchers item by unique identifier.
     */
    get: operations["readSingleItemsPagesLiffVouchers"];
    /**
     * Delete an Item
     * @description Delete an existing pages_liff_vouchers item.
     */
    delete: operations["deleteSingleItemsPagesLiffVouchers"];
    /**
     * Update an Item
     * @description Update an existing pages_liff_vouchers item.
     */
    patch: operations["updateSingleItemsPagesLiffVouchers"];
  };
  "/items/point_transactions": {
    /**
     * List Items
     * @description List the point_transactions items.
     */
    get: operations["readItemsPointTransactions"];
    /**
     * Create an Item
     * @description Create a new point_transactions item.
     */
    post: operations["createItemsPointTransactions"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing point_transactions items.
     */
    delete: operations["deleteItemsPointTransactions"];
    /**
     * Update Multiple Items
     * @description Update multiple point_transactions items at the same time.
     */
    patch: operations["updateItemsPointTransactions"];
  };
  "/items/point_transactions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single point_transactions item by unique identifier.
     */
    get: operations["readSingleItemsPointTransactions"];
    /**
     * Delete an Item
     * @description Delete an existing point_transactions item.
     */
    delete: operations["deleteSingleItemsPointTransactions"];
    /**
     * Update an Item
     * @description Update an existing point_transactions item.
     */
    patch: operations["updateSingleItemsPointTransactions"];
  };
  "/items/user_events": {
    /**
     * List Items
     * @description List the user_events items.
     */
    get: operations["readItemsUserEvents"];
    /**
     * Create an Item
     * @description Create a new user_events item.
     */
    post: operations["createItemsUserEvents"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing user_events items.
     */
    delete: operations["deleteItemsUserEvents"];
    /**
     * Update Multiple Items
     * @description Update multiple user_events items at the same time.
     */
    patch: operations["updateItemsUserEvents"];
  };
  "/items/user_events/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single user_events item by unique identifier.
     */
    get: operations["readSingleItemsUserEvents"];
    /**
     * Delete an Item
     * @description Delete an existing user_events item.
     */
    delete: operations["deleteSingleItemsUserEvents"];
    /**
     * Update an Item
     * @description Update an existing user_events item.
     */
    patch: operations["updateSingleItemsUserEvents"];
  };
  "/items/referrals": {
    /**
     * List Items
     * @description List the referrals items.
     */
    get: operations["readItemsReferrals"];
    /**
     * Create an Item
     * @description Create a new referrals item.
     */
    post: operations["createItemsReferrals"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing referrals items.
     */
    delete: operations["deleteItemsReferrals"];
    /**
     * Update Multiple Items
     * @description Update multiple referrals items at the same time.
     */
    patch: operations["updateItemsReferrals"];
  };
  "/items/referrals/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single referrals item by unique identifier.
     */
    get: operations["readSingleItemsReferrals"];
    /**
     * Delete an Item
     * @description Delete an existing referrals item.
     */
    delete: operations["deleteSingleItemsReferrals"];
    /**
     * Update an Item
     * @description Update an existing referrals item.
     */
    patch: operations["updateSingleItemsReferrals"];
  };
  "/items/vouchers_brands_voucher_categories": {
    /**
     * List Items
     * @description List the vouchers_brands_voucher_categories items.
     */
    get: operations["readItemsVouchersBrandsVoucherCategories"];
    /**
     * Create an Item
     * @description Create a new vouchers_brands_voucher_categories item.
     */
    post: operations["createItemsVouchersBrandsVoucherCategories"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing vouchers_brands_voucher_categories items.
     */
    delete: operations["deleteItemsVouchersBrandsVoucherCategories"];
    /**
     * Update Multiple Items
     * @description Update multiple vouchers_brands_voucher_categories items at the same time.
     */
    patch: operations["updateItemsVouchersBrandsVoucherCategories"];
  };
  "/items/vouchers_brands_voucher_categories/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single vouchers_brands_voucher_categories item by unique identifier.
     */
    get: operations["readSingleItemsVouchersBrandsVoucherCategories"];
    /**
     * Delete an Item
     * @description Delete an existing vouchers_brands_voucher_categories item.
     */
    delete: operations["deleteSingleItemsVouchersBrandsVoucherCategories"];
    /**
     * Update an Item
     * @description Update an existing vouchers_brands_voucher_categories item.
     */
    patch: operations["updateSingleItemsVouchersBrandsVoucherCategories"];
  };
  "/items/pages_liff_voucher_categories": {
    /**
     * List Items
     * @description List the pages_liff_voucher_categories items.
     */
    get: operations["readItemsPagesLiffVoucherCategories"];
    /**
     * Create an Item
     * @description Create a new pages_liff_voucher_categories item.
     */
    post: operations["createItemsPagesLiffVoucherCategories"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages_liff_voucher_categories items.
     */
    delete: operations["deleteItemsPagesLiffVoucherCategories"];
    /**
     * Update Multiple Items
     * @description Update multiple pages_liff_voucher_categories items at the same time.
     */
    patch: operations["updateItemsPagesLiffVoucherCategories"];
  };
  "/items/pages_liff_voucher_categories/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages_liff_voucher_categories item by unique identifier.
     */
    get: operations["readSingleItemsPagesLiffVoucherCategories"];
    /**
     * Delete an Item
     * @description Delete an existing pages_liff_voucher_categories item.
     */
    delete: operations["deleteSingleItemsPagesLiffVoucherCategories"];
    /**
     * Update an Item
     * @description Update an existing pages_liff_voucher_categories item.
     */
    patch: operations["updateSingleItemsPagesLiffVoucherCategories"];
  };
  "/items/documents": {
    /**
     * List Items
     * @description List the documents items.
     */
    get: operations["readItemsDocuments"];
    /**
     * Create an Item
     * @description Create a new documents item.
     */
    post: operations["createItemsDocuments"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing documents items.
     */
    delete: operations["deleteItemsDocuments"];
    /**
     * Update Multiple Items
     * @description Update multiple documents items at the same time.
     */
    patch: operations["updateItemsDocuments"];
  };
  "/items/documents/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single documents item by unique identifier.
     */
    get: operations["readSingleItemsDocuments"];
    /**
     * Delete an Item
     * @description Delete an existing documents item.
     */
    delete: operations["deleteSingleItemsDocuments"];
    /**
     * Update an Item
     * @description Update an existing documents item.
     */
    patch: operations["updateSingleItemsDocuments"];
  };
  "/items/pages_liff_vouchers_1": {
    /**
     * List Items
     * @description List the pages_liff_vouchers_1 items.
     */
    get: operations["readItemsPagesLiffVouchers1"];
    /**
     * Create an Item
     * @description Create a new pages_liff_vouchers_1 item.
     */
    post: operations["createItemsPagesLiffVouchers1"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages_liff_vouchers_1 items.
     */
    delete: operations["deleteItemsPagesLiffVouchers1"];
    /**
     * Update Multiple Items
     * @description Update multiple pages_liff_vouchers_1 items at the same time.
     */
    patch: operations["updateItemsPagesLiffVouchers1"];
  };
  "/items/pages_liff_vouchers_1/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages_liff_vouchers_1 item by unique identifier.
     */
    get: operations["readSingleItemsPagesLiffVouchers1"];
    /**
     * Delete an Item
     * @description Delete an existing pages_liff_vouchers_1 item.
     */
    delete: operations["deleteSingleItemsPagesLiffVouchers1"];
    /**
     * Update an Item
     * @description Update an existing pages_liff_vouchers_1 item.
     */
    patch: operations["updateSingleItemsPagesLiffVouchers1"];
  };
  "/items/voucher_groups_vouchers": {
    /**
     * List Items
     * @description List the voucher_groups_vouchers items.
     */
    get: operations["readItemsVoucherGroupsVouchers"];
    /**
     * Create an Item
     * @description Create a new voucher_groups_vouchers item.
     */
    post: operations["createItemsVoucherGroupsVouchers"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing voucher_groups_vouchers items.
     */
    delete: operations["deleteItemsVoucherGroupsVouchers"];
    /**
     * Update Multiple Items
     * @description Update multiple voucher_groups_vouchers items at the same time.
     */
    patch: operations["updateItemsVoucherGroupsVouchers"];
  };
  "/items/voucher_groups_vouchers/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single voucher_groups_vouchers item by unique identifier.
     */
    get: operations["readSingleItemsVoucherGroupsVouchers"];
    /**
     * Delete an Item
     * @description Delete an existing voucher_groups_vouchers item.
     */
    delete: operations["deleteSingleItemsVoucherGroupsVouchers"];
    /**
     * Update an Item
     * @description Update an existing voucher_groups_vouchers item.
     */
    patch: operations["updateSingleItemsVoucherGroupsVouchers"];
  };
  "/items/vouchers_voucher_categories": {
    /**
     * List Items
     * @description List the vouchers_voucher_categories items.
     */
    get: operations["readItemsVouchersVoucherCategories"];
    /**
     * Create an Item
     * @description Create a new vouchers_voucher_categories item.
     */
    post: operations["createItemsVouchersVoucherCategories"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing vouchers_voucher_categories items.
     */
    delete: operations["deleteItemsVouchersVoucherCategories"];
    /**
     * Update Multiple Items
     * @description Update multiple vouchers_voucher_categories items at the same time.
     */
    patch: operations["updateItemsVouchersVoucherCategories"];
  };
  "/items/vouchers_voucher_categories/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single vouchers_voucher_categories item by unique identifier.
     */
    get: operations["readSingleItemsVouchersVoucherCategories"];
    /**
     * Delete an Item
     * @description Delete an existing vouchers_voucher_categories item.
     */
    delete: operations["deleteSingleItemsVouchersVoucherCategories"];
    /**
     * Update an Item
     * @description Update an existing vouchers_voucher_categories item.
     */
    patch: operations["updateSingleItemsVouchersVoucherCategories"];
  };
  "/items/voucher_categories": {
    /**
     * List Items
     * @description List the voucher_categories items.
     */
    get: operations["readItemsVoucherCategories"];
    /**
     * Create an Item
     * @description Create a new voucher_categories item.
     */
    post: operations["createItemsVoucherCategories"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing voucher_categories items.
     */
    delete: operations["deleteItemsVoucherCategories"];
    /**
     * Update Multiple Items
     * @description Update multiple voucher_categories items at the same time.
     */
    patch: operations["updateItemsVoucherCategories"];
  };
  "/items/voucher_categories/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single voucher_categories item by unique identifier.
     */
    get: operations["readSingleItemsVoucherCategories"];
    /**
     * Delete an Item
     * @description Delete an existing voucher_categories item.
     */
    delete: operations["deleteSingleItemsVoucherCategories"];
    /**
     * Update an Item
     * @description Update an existing voucher_categories item.
     */
    patch: operations["updateSingleItemsVoucherCategories"];
  };
  "/items/pages_liff_vouchers_2": {
    /**
     * List Items
     * @description List the pages_liff_vouchers_2 items.
     */
    get: operations["readItemsPagesLiffVouchers2"];
    /**
     * Create an Item
     * @description Create a new pages_liff_vouchers_2 item.
     */
    post: operations["createItemsPagesLiffVouchers2"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages_liff_vouchers_2 items.
     */
    delete: operations["deleteItemsPagesLiffVouchers2"];
    /**
     * Update Multiple Items
     * @description Update multiple pages_liff_vouchers_2 items at the same time.
     */
    patch: operations["updateItemsPagesLiffVouchers2"];
  };
  "/items/pages_liff_vouchers_2/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages_liff_vouchers_2 item by unique identifier.
     */
    get: operations["readSingleItemsPagesLiffVouchers2"];
    /**
     * Delete an Item
     * @description Delete an existing pages_liff_vouchers_2 item.
     */
    delete: operations["deleteSingleItemsPagesLiffVouchers2"];
    /**
     * Update an Item
     * @description Update an existing pages_liff_vouchers_2 item.
     */
    patch: operations["updateSingleItemsPagesLiffVouchers2"];
  };
  "/items/campaign_missions": {
    /**
     * List Items
     * @description List the campaign_missions items.
     */
    get: operations["readItemsCampaignMissions"];
    /**
     * Create an Item
     * @description Create a new campaign_missions item.
     */
    post: operations["createItemsCampaignMissions"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing campaign_missions items.
     */
    delete: operations["deleteItemsCampaignMissions"];
    /**
     * Update Multiple Items
     * @description Update multiple campaign_missions items at the same time.
     */
    patch: operations["updateItemsCampaignMissions"];
  };
  "/items/campaign_missions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single campaign_missions item by unique identifier.
     */
    get: operations["readSingleItemsCampaignMissions"];
    /**
     * Delete an Item
     * @description Delete an existing campaign_missions item.
     */
    delete: operations["deleteSingleItemsCampaignMissions"];
    /**
     * Update an Item
     * @description Update an existing campaign_missions item.
     */
    patch: operations["updateSingleItemsCampaignMissions"];
  };
  "/items/campaigns": {
    /**
     * List Items
     * @description List the campaigns items.
     */
    get: operations["readItemsCampaigns"];
    /**
     * Create an Item
     * @description Create a new campaigns item.
     */
    post: operations["createItemsCampaigns"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing campaigns items.
     */
    delete: operations["deleteItemsCampaigns"];
    /**
     * Update Multiple Items
     * @description Update multiple campaigns items at the same time.
     */
    patch: operations["updateItemsCampaigns"];
  };
  "/items/campaigns/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single campaigns item by unique identifier.
     */
    get: operations["readSingleItemsCampaigns"];
    /**
     * Delete an Item
     * @description Delete an existing campaigns item.
     */
    delete: operations["deleteSingleItemsCampaigns"];
    /**
     * Update an Item
     * @description Update an existing campaigns item.
     */
    patch: operations["updateSingleItemsCampaigns"];
  };
  "/items/user_campaign_registrations": {
    /**
     * List Items
     * @description List the user_campaign_registrations items.
     */
    get: operations["readItemsUserCampaignRegistrations"];
    /**
     * Create an Item
     * @description Create a new user_campaign_registrations item.
     */
    post: operations["createItemsUserCampaignRegistrations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing user_campaign_registrations items.
     */
    delete: operations["deleteItemsUserCampaignRegistrations"];
    /**
     * Update Multiple Items
     * @description Update multiple user_campaign_registrations items at the same time.
     */
    patch: operations["updateItemsUserCampaignRegistrations"];
  };
  "/items/user_campaign_registrations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single user_campaign_registrations item by unique identifier.
     */
    get: operations["readSingleItemsUserCampaignRegistrations"];
    /**
     * Delete an Item
     * @description Delete an existing user_campaign_registrations item.
     */
    delete: operations["deleteSingleItemsUserCampaignRegistrations"];
    /**
     * Update an Item
     * @description Update an existing user_campaign_registrations item.
     */
    patch: operations["updateSingleItemsUserCampaignRegistrations"];
  };
  "/items/user_reward_credits": {
    /**
     * List Items
     * @description List the user_reward_credits items.
     */
    get: operations["readItemsUserRewardCredits"];
    /**
     * Create an Item
     * @description Create a new user_reward_credits item.
     */
    post: operations["createItemsUserRewardCredits"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing user_reward_credits items.
     */
    delete: operations["deleteItemsUserRewardCredits"];
    /**
     * Update Multiple Items
     * @description Update multiple user_reward_credits items at the same time.
     */
    patch: operations["updateItemsUserRewardCredits"];
  };
  "/items/user_reward_credits/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single user_reward_credits item by unique identifier.
     */
    get: operations["readSingleItemsUserRewardCredits"];
    /**
     * Delete an Item
     * @description Delete an existing user_reward_credits item.
     */
    delete: operations["deleteSingleItemsUserRewardCredits"];
    /**
     * Update an Item
     * @description Update an existing user_reward_credits item.
     */
    patch: operations["updateSingleItemsUserRewardCredits"];
  };
  "/items/user_mission_submissions": {
    /**
     * List Items
     * @description List the user_mission_submissions items.
     */
    get: operations["readItemsUserMissionSubmissions"];
    /**
     * Create an Item
     * @description Create a new user_mission_submissions item.
     */
    post: operations["createItemsUserMissionSubmissions"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing user_mission_submissions items.
     */
    delete: operations["deleteItemsUserMissionSubmissions"];
    /**
     * Update Multiple Items
     * @description Update multiple user_mission_submissions items at the same time.
     */
    patch: operations["updateItemsUserMissionSubmissions"];
  };
  "/items/user_mission_submissions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single user_mission_submissions item by unique identifier.
     */
    get: operations["readSingleItemsUserMissionSubmissions"];
    /**
     * Delete an Item
     * @description Delete an existing user_mission_submissions item.
     */
    delete: operations["deleteSingleItemsUserMissionSubmissions"];
    /**
     * Update an Item
     * @description Update an existing user_mission_submissions item.
     */
    patch: operations["updateSingleItemsUserMissionSubmissions"];
  };
  "/items/reward_credit_transactions": {
    /**
     * List Items
     * @description List the reward_credit_transactions items.
     */
    get: operations["readItemsRewardCreditTransactions"];
    /**
     * Create an Item
     * @description Create a new reward_credit_transactions item.
     */
    post: operations["createItemsRewardCreditTransactions"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing reward_credit_transactions items.
     */
    delete: operations["deleteItemsRewardCreditTransactions"];
    /**
     * Update Multiple Items
     * @description Update multiple reward_credit_transactions items at the same time.
     */
    patch: operations["updateItemsRewardCreditTransactions"];
  };
  "/items/reward_credit_transactions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single reward_credit_transactions item by unique identifier.
     */
    get: operations["readSingleItemsRewardCreditTransactions"];
    /**
     * Delete an Item
     * @description Delete an existing reward_credit_transactions item.
     */
    delete: operations["deleteSingleItemsRewardCreditTransactions"];
    /**
     * Update an Item
     * @description Update an existing reward_credit_transactions item.
     */
    patch: operations["updateSingleItemsRewardCreditTransactions"];
  };
  "/items/pages_liff_campaigns": {
    /**
     * List Items
     * @description List the pages_liff_campaigns items.
     */
    get: operations["readItemsPagesLiffCampaigns"];
    /**
     * Create an Item
     * @description Create a new pages_liff_campaigns item.
     */
    post: operations["createItemsPagesLiffCampaigns"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages_liff_campaigns items.
     */
    delete: operations["deleteItemsPagesLiffCampaigns"];
    /**
     * Update Multiple Items
     * @description Update multiple pages_liff_campaigns items at the same time.
     */
    patch: operations["updateItemsPagesLiffCampaigns"];
  };
  "/items/pages_liff_campaigns/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages_liff_campaigns item by unique identifier.
     */
    get: operations["readSingleItemsPagesLiffCampaigns"];
    /**
     * Delete an Item
     * @description Delete an existing pages_liff_campaigns item.
     */
    delete: operations["deleteSingleItemsPagesLiffCampaigns"];
    /**
     * Update an Item
     * @description Update an existing pages_liff_campaigns item.
     */
    patch: operations["updateSingleItemsPagesLiffCampaigns"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Diff: {
      hash?: string;
      diff?: {
        collections?: {
            collection?: string;
            diff?: Record<string, never>[];
          }[];
        fields?: {
            collection?: string;
            field?: string;
            diff?: Record<string, never>[];
          }[];
        relations?: {
            collection?: string;
            field?: string;
            related_collection?: string;
            diff?: Record<string, never>[];
          }[];
      };
    };
    Files: {
      /**
       * @description Size of the file in bytes.
       * @example 137862
       */
      filesize?: number;
      /**
       * @description Duration of the file in seconds. Only applies to audio and video.
       * @example 0
       */
      duration?: number | null;
      /**
       * @description Height of the file in pixels. Only applies to images.
       * @example 838
       */
      height?: number | null;
      /**
       * @description Width of the file in pixels. Only applies to images.
       * @example 800
       */
      width?: number | null;
      focal_point_y?: number | null;
      focal_point_x?: number | null;
      /** @description Tags for the file. Is automatically populated based on Exif data for images. */
      tags?: string[] | null;
      /** @description Where the file was created. Is automatically populated based on Exif data for images. */
      location?: string | null;
      /** @description Description for the file. */
      description?: string | null;
      /** @description IPTC, Exif, and ICC metadata extracted from file */
      metadata?: Record<string, unknown> | null;
      tus_data?: unknown;
      tus_id?: string | null;
      /**
       * @description Name of the file on disk. By default, Directus uses a random hash for the filename.
       * @example a88c3b72-ac58-5436-a4ec-b2858531333a.jpg
       */
      filename_disk?: string;
      /**
       * @description How you want to the file to be named when it's being downloaded.
       * @example avatar.jpg
       */
      filename_download?: string;
      /**
       * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
       * @example User Avatar
       */
      title?: string;
      /**
       * @description MIME type of the file.
       * @example image/jpeg
       */
      type?: string;
      /**
       * @description Character set of the file.
       * @example binary
       */
      charset?: string | null;
      /**
       * @description Where the file was embedded from.
       * @example null
       */
      embed?: string | null;
      /**
       * @description Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).
       * @example local
       */
      storage?: string;
      /**
       * Format: date-time
       * @description When the file was last uploaded/replaced.
       * @example 2019-12-03T00:10:15+00:00
       */
      uploaded_on?: string;
      /** Format: timestamp */
      modified_on?: string;
      /**
       * Format: date-time
       * @description When the file was created.
       * @example 2019-12-03T00:10:15+00:00
       */
      created_on?: string;
      /**
       * @description Who uploaded the file.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      uploaded_by?: string | components["schemas"]["Users"];
      modified_by?: string | components["schemas"]["Users"] | null;
      /**
       * @description Unique identifier for the file.
       * @example 8cbb43fe-4cdf-4991-8352-c461779cec02
       */
      id?: string;
      /**
       * @description Virtual folder where this file resides in.
       * @example null
       */
      folder?: string | components["schemas"]["Folders"] | null;
    };
    Folders: {
      /**
       * @description Name of the folder.
       * @example New York
       */
      name?: string;
      /**
       * @description Unique identifier for the folder.
       * @example 0cf0e03d-4364-45df-b77b-ca61f61869d2
       */
      id?: string;
      /**
       * @description Unique identifier of the parent folder. This allows for nested folders.
       * @example null
       */
      parent?: string | components["schemas"]["Folders"] | null;
    };
    Roles: {
      /**
       * @description Description of the role.
       * @example Admins have access to all managed data within the system by default
       */
      description?: string | null;
      /**
       * @description Name of the role.
       * @example Administrator
       */
      name?: string;
      /**
       * @description The role's icon.
       * @example verified_user
       */
      icon?: string;
      /**
       * @description Unique identifier for the role.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      id?: string;
      /** @description $t:field_options.directus_roles.parent_note */
      parent?: string | components["schemas"]["Roles"] | null;
      /** @description $t:field_options.directus_roles.children_note */
      children?: ((string | components["schemas"]["Roles"])[]) | null;
      policies?: unknown;
      users?: ((string | components["schemas"]["Users"])[]) | null;
    };
    Schema: {
      /** @example 1 */
      version?: number;
      directus?: string;
      vendor?: string;
      collections?: components["schemas"]["Collections"][];
      fields?: components["schemas"]["Fields"][];
      relations?: components["schemas"]["Relations"][];
    };
    Users: {
      email_notifications?: boolean | null;
      theme_light_overrides?: unknown;
      /**
       * @description The user's description.
       * @example null
       */
      description?: string | null;
      theme_dark_overrides?: unknown;
      auth_data?: unknown;
      /**
       * @description The user's tags.
       * @example null
       */
      tags?: string[] | null;
      /**
       * @description The user's language used in Directus.
       * @example en-US
       */
      language?: string;
      /**
       * @description The user's title.
       * @example null
       */
      title?: string | null;
      /**
       * @description The user's location.
       * @example null
       */
      location?: string | null;
      /** @description Password of the user. */
      password?: string;
      /**
       * Format: email
       * @description Unique email address for the user.
       * @example admin@example.com
       */
      email?: string;
      /**
       * @description Last name of the user.
       * @example User
       */
      last_name?: string;
      stripe_customer_id?: string | null;
      /**
       * @description First name of the user.
       * @example Admin
       */
      first_name?: string;
      /** @description Static token for the user. */
      token?: string | null;
      /**
       * @description Status of the user.
       * @example active
       * @enum {string}
       */
      status?: "active" | "invited" | "draft" | "suspended" | "deleted";
      /**
       * @description The 2FA secret string that's used to generate one time passwords.
       * @example null
       */
      tfa_secret?: string | null;
      appearance?: string | null;
      external_identifier?: string | null;
      theme_dark?: string | null;
      provider?: string;
      /**
       * @description Last page that the user was on.
       * @example /my-project/settings/collections/a
       */
      last_page?: string | null;
      theme_light?: string | null;
      /**
       * Format: date-time
       * @description When this user used the API last.
       * @example 2020-05-31T14:32:37Z
       */
      last_access?: string | null;
      /**
       * @description The user's avatar.
       * @example null
       */
      avatar?: string | components["schemas"]["Files"] | null;
      /**
       * @description Unique identifier of the role of this user.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      role?: string | components["schemas"]["Roles"];
      /**
       * @description Unique identifier for the user.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      id?: string;
      teams?: ((string | components["schemas"]["ItemsSaasTeamsUsers"])[]) | null;
      policies?: unknown;
    };
    Query: {
      /**
       * @description Control what fields are being returned in the object.
       * @example [
       *   "*",
       *   "*.*"
       * ]
       */
      fields?: string[];
      /**
       * @example {
       *   "<field>": {
       *     "<operator>": "<value>"
       *   }
       * }
       */
      filter?: Record<string, never>;
      /** @description Filter by items that contain the given search query in one of their fields. */
      search?: string;
      /**
       * @description How to sort the returned items.
       * @example [
       *   "-date_created"
       * ]
       */
      sort?: string[];
      /** @description Set the maximum number of items that will be returned */
      limit?: number;
      /** @description How many items to skip when fetching data. */
      offset?: number;
      /** @description Cursor for use in pagination. Often used in combination with limit. */
      page?: number;
      /**
       * @description Deep allows you to set any of the other query parameters on a nested relational dataset.
       * @example {
       *   "related_articles": {
       *     "_limit": 3
       *   }
       * }
       */
      deep?: Record<string, never>;
    };
    "x-metadata": {
      /** @description Returns the total item count of the collection you're querying. */
      total_count?: number;
      /** @description Returns the item count of the collection you're querying, taking the current filter/search parameters into account. */
      filter_count?: number;
    };
    ItemsLLMModels: {
      sort?: number | null;
      max_input_tokens?: number | null;
      max_output_tokens?: number | null;
      model_context_length?: number | null;
      model_output_length?: number | null;
      provider?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
    };
    ItemsAdvanceProfiles: {
      birth_year?: number | null;
      birth_month?: number | null;
      interests?: unknown;
      display_name?: string | null;
      email?: string | null;
      company?: string | null;
      refcode?: string | null;
      phone?: string | null;
      gender?: string | null;
      id: string;
      last_name?: string | null;
      first_name?: string | null;
      uid?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      picture_url?: string | components["schemas"]["Files"] | null;
      point_transactions?: ((string | components["schemas"]["ItemsPointTransactions"])[]) | null;
      channel_users?: string | null;
    };
    ItemsAdvancedProfiles: {
      id?: number;
    };
    ItemsVoucherViews: {
      user_id?: string | components["schemas"]["ItemsProfiles"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: timestamp */
      first_viewed_at?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      voucher_id: string | components["schemas"]["ItemsVouchers"];
      /** Format: uuid */
      id: string;
    };
    ItemsLanguages: {
      direction?: string | null;
      name?: string | null;
      code: string;
    };
    ItemsSaasHelpdeskTranslations: {
      id?: number;
      saas_helpdesk_id?: number | components["schemas"]["ItemsSaasHelpdesk"] | null;
      content?: string | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      name?: string | null;
    };
    Collections: {
      archive_app_filter?: boolean;
      versioning?: boolean;
      singleton?: boolean;
      hidden?: boolean;
      sort?: number | null;
      item_duplication_fields?: unknown;
      note?: string | null;
      translations?: unknown;
      display_template?: string | null;
      icon?: string | null;
      /**
       * @description The collection key.
       * @example customers
       */
      collection?: string;
      color?: string | null;
      accountability?: string | null;
      sort_field?: string | null;
      unarchive_value?: string | null;
      archive_value?: string | null;
      archive_field?: string | null;
      preview_url?: string | null;
      collapse?: string;
      group?: string | components["schemas"]["Collections"] | null;
    };
    Presets: {
      /**
       * @description Unique identifier for this single collection preset.
       * @example 155
       */
      id?: number;
      refresh_interval?: number | null;
      /**
       * @description Options of the views. The properties in here are controlled by the layout.
       * @example {
       *   "cards": {
       *     "icon": "account_circle",
       *     "title": "{{ first_name }} {{ last_name }}",
       *     "subtitle": "{{ title }}",
       *     "size": 3
       *   }
       * }
       */
      layout_options?: unknown;
      filter?: unknown;
      /**
       * @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.
       * @example {
       *   "cards": {
       *     "sort": "-published_on"
       *   }
       * }
       */
      layout_query?: unknown;
      color?: string | null;
      icon?: string | null;
      /**
       * @description What collection this collection preset is used for.
       * @example articles
       */
      collection?: string | components["schemas"]["Collections"];
      /** @description Search query. */
      search?: string | null;
      /**
       * @description Key of the layout that is used.
       * @example null
       */
      layout?: string;
      /** @description Name for the bookmark. If this is set, the preset will be considered a bookmark. */
      bookmark?: string | null;
      /**
       * @description The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role.
       * @example 50419801-0f30-8644-2b3c-9bc2d980d0a0
       */
      role?: string | components["schemas"]["Roles"] | null;
      /**
       * @description The unique identifier of the user to whom this collection preset applies.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user?: string | components["schemas"]["Users"] | null;
    };
    Revisions: {
      /**
       * @description If the current item was updated relationally, this is the id of the parent revision record
       * @example null
       */
      parent?: number | null;
      /**
       * @description Unique identifier for the activity record.
       * @example 2
       */
      activity?: number | components["schemas"]["Activity"];
      /**
       * @description Unique identifier for the revision.
       * @example 1
       */
      id?: number;
      /**
       * @description Copy of item state at time of update.
       * @example {
       *   "author": 1,
       *   "body": "This is my first post",
       *   "featured_image": 15,
       *   "id": "168",
       *   "title": "Hello, World!"
       * }
       */
      data?: Record<string, unknown> | null;
      /**
       * @description Changes between the previous and the current revision.
       * @example {
       *   "title": "Hello, World!"
       * }
       */
      delta?: Record<string, never>;
      /**
       * @description Collection of the updated item.
       * @example articles
       */
      collection?: string | components["schemas"]["Collections"];
      /**
       * @description Primary key of updated item.
       * @example 168
       */
      item?: string;
      /**
       * @description Associated version of this revision.
       * @example draft
       */
      version?: string | components["schemas"]["Versions"];
    };
    ItemsBotsUserActiveSessions: {
      closed_notified?: boolean | null;
      uid?: string | null;
      provider_id?: string | null;
      bot_id?: string | null;
      /** Format: timestamp */
      expires_at?: string | null;
      /** Format: timestamp */
      closed_at?: string | null;
      /** Format: timestamp */
      last_active?: string | null;
      /** Format: timestamp */
      session_started_at?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
    };
    Permissions: {
      /**
       * @description Unique identifier for the permission.
       * @example 1
       */
      id?: number;
      /** @description CSV of fields that the user is allowed to interact with. */
      fields?: string[] | null;
      /** @description JSON structure containing the validation checks for this permission. */
      validation?: Record<string, unknown> | null;
      /** @description JSON structure containing the preset value for created/updated items. */
      presets?: Record<string, unknown> | null;
      /** @description JSON structure containing the permissions checks for this permission. */
      permissions?: Record<string, unknown> | null;
      /**
       * @description What action this permission applies to.
       * @example create
       * @enum {string}
       */
      action?: "create" | "read" | "update" | "delete";
      /**
       * @description What collection this permission applies to.
       * @example customers
       */
      collection?: string;
      policy?: unknown;
    };
    Fields: {
      hidden?: boolean;
      readonly?: boolean;
      required?: boolean | null;
      sort?: number | null;
      id?: number;
      validation_message?: string | null;
      note?: string | null;
      translations?: unknown;
      display_options?: unknown;
      options?: unknown;
      validation?: unknown;
      conditions?: unknown;
      /**
       * @description Unique name of the collection this field is in.
       * @example about_us
       */
      collection?: string;
      /**
       * @description Unique name of the field. Field name is unique within the collection.
       * @example id
       */
      field?: string;
      special?: string[] | null;
      interface?: string | null;
      display?: string | null;
      width?: string | null;
      group?: number | components["schemas"]["Fields"] | null;
    };
    Relations: {
      /**
       * @description Unique identifier for the relation.
       * @example 1
       */
      id?: number;
      one_allowed_collections?: string[] | null;
      /**
       * @description Collection that has the field that holds the foreign key.
       * @example directus_activity
       */
      many_collection?: string;
      one_deselect_action?: string;
      sort_field?: string | null;
      /**
       * @description Field on the junction table that holds the many field of the related relation.
       * @example null
       */
      junction_field?: string | null;
      one_collection_field?: string | null;
      /**
       * @description Alias column that serves as the _one_ side of the relationship.
       * @example null
       */
      one_field?: string | null;
      /**
       * @description Collection on the _one_ side of the relationship.
       * @example directus_users
       */
      one_collection?: string;
      /**
       * @description Foreign key. Field that holds the primary key of the related collection.
       * @example user
       */
      many_field?: string;
    };
    Activity: {
      /**
       * @description Unique identifier for the object.
       * @example 2
       */
      id?: number;
      /**
       * @description User agent string of the browser the user used when the action took place.
       * @example Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/78.0.3904.108 Safari/537.36
       */
      user_agent?: string;
      /**
       * @description Origin of the request when the action took place.
       * @example https://directus.io
       */
      origin?: string;
      /**
       * @description Unique identifier for the item the action applied to. This is always a string, even for integer primary keys.
       * @example 328
       */
      item?: string;
      /** @description Collection identifier in which the item resides. */
      collection?: string | components["schemas"]["Collections"];
      /**
       * @description The IP address of the user at the time the action took place.
       * @example 127.0.0.1
       */
      ip?: string;
      /**
       * @description Action that was performed.
       * @example update
       * @enum {string}
       */
      action?: "create" | "update" | "delete" | "login";
      /**
       * Format: date-time
       * @description When the action happened.
       * @example 2019-12-05T22:52:09Z
       */
      timestamp?: string;
      /** @description The user who performed this action. */
      user?: string | components["schemas"]["Users"] | null;
      revisions?: ((number | components["schemas"]["Revisions"])[]) | null;
    };
    ItemsBotsEnabledUsers: {
      picture_url?: string | null;
      last_message_text?: string | null;
      /** Format: date-time */
      last_message_event_at?: string | null;
      display_name?: string | null;
      uid?: string | null;
      bot?: string | components["schemas"]["ItemsBots"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
    };
    ItemsPageLiffTokens: {
      id?: number;
      /** Format: timestamp */
      date_created?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      page?: string | components["schemas"]["ItemsPagesLiff"] | null;
    };
    Webhooks: {
      was_active_before_deprecation?: boolean;
      /**
       * @description If yes, send the content of what was done
       * @example true
       */
      data?: boolean;
      /**
       * @description The index of the webhook.
       * @example 1
       */
      id?: number;
      headers?: unknown;
      collections?: string[];
      /**
       * @description The actions that triggers this webhook.
       * @example null
       */
      actions?: string[] | null;
      /**
       * @description The status of the webhook.
       * @example inactive
       */
      status?: string;
      /**
       * @description The url of the webhook.
       * @example null
       */
      url?: string | null;
      /**
       * @description Method used in the webhook.
       * @example POST
       */
      method?: string;
      /**
       * @description The name of the webhook.
       * @example create articles
       */
      name?: string;
      migrated_flow?: string | components["schemas"]["Flows"] | null;
    };
    Flows: {
      description?: string | null;
      /**
       * @description Options of the selected trigger for the flow.
       * @example null
       */
      options?: Record<string, unknown> | null;
      /**
       * @description Current status of the flow.
       * @default active
       * @example active
       * @enum {string}
       */
      status?: "active" | "inactive";
      /**
       * @description Color of the icon displayed in the Admin App for the flow.
       * @example #112233
       */
      color?: string | null;
      /**
       * @description Icon displayed in the Admin App for the flow.
       * @example bolt
       */
      icon?: string;
      /**
       * @description The name of the flow.
       * @example Update Articles Flow
       */
      name?: string;
      /**
       * @description The permission used during the flow. One of `$public`, `$trigger`, `$full`, or UUID of a role.
       * @example $trigger
       */
      accountability?: string;
      /**
       * @description Type of trigger for the flow. One of `hook`, `webhook`, `operation`, `schedule`, `manual`.
       * @example manual
       */
      trigger?: string;
      /**
       * Format: date-time
       * @description Timestamp in ISO8601 when the flow was created.
       * @example 2022-05-11T13:14:52Z
       */
      date_created?: string | null;
      /**
       * @description Unique identifier for the flow.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      id?: string;
      /**
       * @description UUID of the operation connected to the trigger in the flow.
       * @example 92e82998-e421-412f-a513-13701e83e4ce
       */
      operation?: string | components["schemas"]["Operations"];
      /**
       * @description The user who created the flow.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user_created?: string | components["schemas"]["Users"];
      operations?: ((string | components["schemas"]["Operations"])[]) | null;
    };
    Operations: {
      /**
       * @description Position of the operation on the X axis within the flow workspace.
       * @example 12
       */
      position_x?: number;
      /**
       * @description Position of the operation on the Y axis within the flow workspace.
       * @example 12
       */
      position_y?: number;
      /**
       * @description Options depending on the type of the operation.
       * @example null
       */
      options?: Record<string, unknown> | null;
      /**
       * @description Type of operation. One of `log`, `mail`, `notification`, `create`, `read`, `request`, `sleep`, `transform`, `trigger`, `condition`, or any type of custom operation extensions.
       * @example log
       */
      type?: string;
      /**
       * @description Key for the operation. Must be unique within a given flow.
       * @example log_console
       */
      key?: string;
      /**
       * @description The name of the operation.
       * @example Log to Console
       */
      name?: string;
      /**
       * Format: date-time
       * @description Timestamp in ISO8601 when the operation was created.
       * @example 2022-05-11T13:14:52Z
       */
      date_created?: string | null;
      /**
       * @description Unique identifier for the operation.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      id?: string;
      /**
       * @description The operation triggered when the current operation succeeds (or `then` logic of a condition operation).
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      resolve?: string | components["schemas"]["Operations"];
      /**
       * @description The operation triggered when the current operation fails (or `otherwise` logic of a condition operation).
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      reject?: string | components["schemas"]["Operations"];
      flow?: string | components["schemas"]["Flows"];
      /**
       * @description The user who created the operation.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user_created?: string | components["schemas"]["Users"];
    };
    Settings: {
      /** @description $t:fields.directus_settings.public_registration_note */
      public_registration?: boolean;
      /** @description $t:fields.directus_settings.public_registration_verify_email_note */
      public_registration_verify_email?: boolean;
      /**
       * @description Unique identifier for the setting.
       * @example 1
       */
      id?: number;
      /**
       * @description Allowed authentication login attempts before the user's status is set to blocked.
       * @example 25
       */
      auth_login_attempts?: number;
      custom_css?: string | null;
      /**
       * @description Note rendered on the public pages of the app.
       * @example null
       */
      public_note?: string | null;
      theme_dark_overrides?: unknown;
      custom_aspect_ratios?: unknown;
      module_bar?: unknown;
      basemaps?: unknown;
      visual_editor_urls?: unknown;
      /** @description $t:fields.directus_settings.public_registration_email_filter_note */
      public_registration_email_filter?: unknown;
      /**
       * @description Array of allowed
       * @example null
       */
      storage_asset_presets?: (({
          /** @description Key for the asset. Used in the assets endpoint. */
          key?: string;
          /**
           * @description Whether to crop the thumbnail to match the size, or maintain the aspect ratio.
           * @enum {string}
           */
          fit?: "cover" | "contain" | "inside" | "outside";
          /** @description Width of the thumbnail. */
          width?: number;
          /** @description Height of the thumbnail. */
          height?: number;
          /** @description No image upscale */
          withoutEnlargement?: boolean;
          /** @description Quality of the compression used. */
          quality?: number;
          /**
           * @description Reformat output image
           * @enum {string}
           */
          format?: "" | "jpeg" | "png" | "webp" | "tiff" | "avif";
          /** @description Additional transformations to apply */
          transforms?: (({
              /** @description The Sharp method name */
              method?: string;
              /** @description A list of arguments to pass to the Sharp method */
              arguments?: {
                  /** @description A JSON representation of the argument value */
                  argument?: string;
                }[] | null;
            })[]) | null;
        })[]) | null;
      theme_light_overrides?: unknown;
      default_theme_light?: string | null;
      default_appearance?: string;
      default_language?: string;
      project_descriptor?: string | null;
      mapbox_key?: string | null;
      /**
       * @description What transformations are allowed in the assets endpoint.
       * @example all
       * @enum {string|null}
       */
      storage_asset_transform?: "all" | "none" | "presets" | null;
      /** @description Authentication password policy. */
      auth_password_policy?: string | null;
      /**
       * @description The brand color of the project.
       * @example null
       */
      project_color?: string | null;
      /**
       * @description The url of the project.
       * @example null
       */
      project_url?: string | null;
      /**
       * @description The name of the project.
       * @example Directus
       */
      project_name?: string;
      report_feature_url?: string | null;
      report_bug_url?: string | null;
      report_error_url?: string | null;
      default_theme_dark?: string | null;
      /**
       * @description The logo of the project.
       * @example null
       */
      project_logo?: string | null;
      /**
       * @description The foreground of the project.
       * @example null
       */
      public_foreground?: string | null;
      /**
       * @description The background of the project.
       * @example null
       */
      public_background?: {
        id?: string;
        type?: string;
      } | null;
      /**
       * Format: uuid
       * @description Default folder to place files
       */
      storage_default_folder?: string;
      /** @description $t:field_options.directus_settings.project_favicon_note */
      public_favicon?: string | components["schemas"]["Files"] | null;
      /** @description $t:fields.directus_settings.public_registration_role_note */
      public_registration_role?: string | components["schemas"]["Roles"] | null;
    };
    ItemsSaasProducts: {
      active?: boolean | null;
      description?: string | null;
      stripe_product_id?: string | null;
      image_url?: string | null;
      name?: string | null;
      status?: string | null;
      id: string;
      prices?: ((string | components["schemas"]["ItemsSaasPrices"])[]) | null;
    };
    ItemsSaasProjects: {
      sort?: number | null;
      description?: string | null;
      name?: string | null;
      status?: string;
      /** Format: timestamp */
      due_date?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      team?: string | components["schemas"]["ItemsSaasTeams"] | null;
      tasks?: ((string | components["schemas"]["ItemsSaasTasks"])[]) | null;
    };
    ItemsSaasLogs: {
      /** Format: timestamp */
      timestamp?: string | null;
      /** Format: uuid */
      id: string;
    };
    Extensions: {
      enabled?: boolean;
      source?: string;
      folder?: string;
      /** Format: uuid */
      id?: string;
      /**
       * @description Name of the bundle the extension is in.
       * @example directus-extension-my-bundle
       */
      bundle?: string | null;
    };
    ItemsSaasMetrics: {
      description?: string | null;
      /** Format: float */
      value?: number | null;
      key?: string | null;
      service?: string | null;
      /** Format: timestamp */
      timestamp?: string | null;
      /** Format: uuid */
      id: string;
    };
    Versions: {
      /**
       * @description The current changes compared to the main version of the item.
       * @example {
       *   "my_field": "Updated Value"
       * }
       */
      delta?: Record<string, never>;
      hash?: string | null;
      /**
       * @description The item the Content Version is created on.
       * @example 168
       */
      item?: string;
      /**
       * @description Name of the collection the Content Version is created on.
       * @example articles
       */
      collection?: string | components["schemas"]["Collections"];
      /**
       * @description Descriptive name of the Content Version.
       * @example My Draft
       */
      name?: string;
      /**
       * @description Key of the Content Version, used as the value for the "version" query parameter.
       * @example draft
       */
      key?: string;
      /**
       * Format: date-time
       * @description When the Content Version was last updated.
       * @example 2022-05-11T13:14:53Z
       */
      date_updated?: string | null;
      /**
       * Format: date-time
       * @description When the Content Version was created.
       * @example 2022-05-11T13:14:52Z
       */
      date_created?: string | null;
      /**
       * @description Primary key of the Content Version.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      id?: string;
      /**
       * @description User that created the Content Version.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user_created?: string | components["schemas"]["Users"];
      /**
       * @description User that last updated the Content Version.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user_updated?: string | components["schemas"]["Users"];
    };
    ItemsSaasEvents: {
      metadata?: unknown;
      ip_address?: string | null;
      service?: string | null;
      key?: string | null;
      /** Format: timestamp */
      timestamp?: string | null;
      /** Format: uuid */
      id: string;
      user?: string | components["schemas"]["Users"] | null;
      team?: string | components["schemas"]["ItemsSaasTeams"] | null;
    };
    ItemsSaasInbox: {
      subject?: string | null;
      message?: string | null;
      metadata?: unknown;
      status?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_updated?: string | components["schemas"]["Users"] | null;
      assigned_to?: string | components["schemas"]["Users"] | null;
      user?: string | components["schemas"]["Users"] | null;
      team?: string | components["schemas"]["ItemsSaasTeams"] | null;
    };
    ItemsSaasTeamsUsers: {
      is_team_admin?: boolean | null;
      sort?: number | null;
      role?: string | null;
      status?: string | null;
      /** Format: timestamp */
      date_accepted?: string | null;
      /** Format: timestamp */
      date_invited?: string | null;
      /** Format: uuid */
      id: string;
      team_id?: string | components["schemas"]["ItemsSaasTeams"] | null;
      user_id?: string | components["schemas"]["Users"] | null;
    };
    ItemsSaasTeams: {
      billing_address?: unknown;
      feature_flags?: unknown;
      billing_phone?: string | null;
      stripe_customer_id?: string | null;
      color?: string | null;
      billing_email?: string | null;
      slug?: string | null;
      type?: string | null;
      name?: string | null;
      status?: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      avatar?: string | components["schemas"]["Files"] | null;
      folder?: string | components["schemas"]["Folders"] | null;
      bots?: ((string | components["schemas"]["ItemsBots"])[]) | null;
      channels?: ((string | components["schemas"]["ItemsChannels"])[]) | null;
      products?: ((string | components["schemas"]["ItemsProducts"])[]) | null;
      orderbots?: ((string | components["schemas"]["ItemsOrderbots"])[]) | null;
      documents?: ((string | components["schemas"]["ItemsDocuments"])[]) | null;
      users?: ((string | components["schemas"]["ItemsSaasTeamsUsers"])[]) | null;
      page_liffs?: ((string | components["schemas"]["ItemsPagesLiff"])[]) | null;
    };
    ItemsSaasTasksFiles: {
      sort?: number | null;
      /** Format: uuid */
      id: string;
      task_id?: string | components["schemas"]["ItemsSaasTasks"] | null;
      files_id?: string | components["schemas"]["Files"] | null;
    };
    ItemsSaasTasks: {
      sort?: number | null;
      description?: string | null;
      name?: string | null;
      status?: string;
      /** Format: timestamp */
      due_date?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      team?: string | components["schemas"]["ItemsSaasTeams"] | null;
      project?: string | components["schemas"]["ItemsSaasProjects"] | null;
      assigned_to?: string | components["schemas"]["Users"] | null;
      files?: ((string | components["schemas"]["ItemsSaasTasksFiles"])[]) | null;
    };
    ItemsAPILogs: {
      output_tokens?: number | null;
      sort?: number | null;
      input_tokens?: number | null;
      body?: unknown;
      response?: unknown;
      type?: string | null;
      model?: string | null;
      status?: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      team?: string | components["schemas"]["ItemsSaasTeams"] | null;
      documents?: ((string | components["schemas"]["ItemsDocuments"])[]) | null;
    };
    ItemsBotsDirectusUsers: {
      id?: number;
      bot_id?: string | components["schemas"]["ItemsBots"] | null;
      user_id?: string | components["schemas"]["Users"] | null;
    };
    ItemsBotsKnowledges: {
      sort?: number | null;
      total_intent?: number | null;
      source?: unknown;
      intents?: unknown;
      lang?: string | null;
      name?: string | null;
      bot?: string | components["schemas"]["ItemsBots"] | null;
      status?: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      documents?: ((number | components["schemas"]["ItemsBotsKnowledgesFiles1"])[]) | null;
    };
    ItemsSaasPrices: {
      popular?: boolean | null;
      /** @description Is this price active or not? */
      active?: boolean | null;
      trial_period_days?: number | null;
      interval_count?: number | null;
      sort?: number | null;
      svg_icon?: string | null;
      features?: unknown;
      metadata?: unknown;
      name?: string | null;
      env?: string | null;
      lookup_key?: string | null;
      pricing_plan_interval?: string | null;
      pricing_type?: string | null;
      product_id?: string | components["schemas"]["ItemsSaasProducts"] | null;
      status?: string;
      id: string;
      /** Format: timestamp */
      created?: string | null;
      translations?: ((number | components["schemas"]["ItemsSaasPricesTranslations"])[]) | null;
    };
    ItemsSaasSubscriptions: {
      /** @description Whether subscription will be canceled at period end */
      cancel_at_period_end?: boolean;
      features?: unknown;
      /** @description Additional subscription metadata */
      metadata?: unknown;
      env?: string | null;
      collection_method?: string;
      status?: string;
      currency?: string;
      plan_type?: string;
      /** @description month/year */
      interval: string;
      /** @description Stripe product reference */
      stripe_product_id: string;
      /** @description Stripe price reference */
      stripe_price_id: string;
      /** @description Stripe customer reference */
      stripe_customer_id: string;
      /** @description Stripe subscription reference */
      id: string;
      /**
       * Format: timestamp
       * @description Current billing period end date
       */
      current_period_end: string;
      /**
       * Format: timestamp
       * @description Current billing period start date
       */
      current_period_start: string;
      /**
       * Format: timestamp
       * @description Next billing cycle start date
       */
      billing_cycle_anchor: string;
      /**
       * Format: timestamp
       * @description Trial period end date
       */
      trial_end?: string | null;
      /**
       * Format: timestamp
       * @description Trial period start date
       */
      trial_start?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /**
       * Format: timestamp
       * @description Cancellation date
       */
      canceled_at?: string | null;
      amount: number;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      customer?: string | components["schemas"]["ItemsSaasCustomers"] | null;
    };
    ItemsBotsLogs: {
      sort?: number | null;
      input_tokens?: number | null;
      output_tokens?: number | null;
      /** Format: float */
      confidence?: number | null;
      answer?: string | null;
      sentence?: string | null;
      intent?: string | null;
      bot?: string | components["schemas"]["ItemsBots"] | null;
      social_id?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
    };
    ItemsPagesLiffPage: {
      /** Format: uuid */
      id: string;
    };
    ItemsPagesLiff: {
      sort?: number | null;
      require_login?: number | null;
      metadata?: unknown;
      favicon?: string | null;
      env?: string | null;
      name?: string | null;
      bg_color?: string | null;
      fore_color?: string | null;
      liff_id: string;
      slug?: string | null;
      status?: string;
      liff_secret_ciphertext?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      team?: string | components["schemas"]["ItemsSaasTeams"] | null;
      image?: string | components["schemas"]["Files"] | null;
      channel?: string | components["schemas"]["ItemsChannels"] | null;
      brands?: ((number | components["schemas"]["ItemsPagesLiffVouchersBrands"])[]) | null;
      populars?: ((number | components["schemas"]["ItemsPagesLiffVouchers"])[]) | null;
      vouchers?: ((number | components["schemas"]["ItemsPagesLiffVouchers1"])[]) | null;
      categories?: ((number | components["schemas"]["ItemsPagesLiffVoucherCategories"])[]) | null;
      banner_vouchers?: ((number | components["schemas"]["ItemsPagesLiffVouchers2"])[]) | null;
      campaigns?: ((number | components["schemas"]["ItemsPagesLiffCampaigns"])[]) | null;
    };
    ItemsChannels: {
      disabled?: boolean | null;
      sort?: number | null;
      provider_info?: unknown;
      forward_urls?: unknown;
      dataset?: string | null;
      name?: string | null;
      platform?: string | null;
      provider_access_token?: string | null;
      provider_secret?: string | null;
      provider_name?: string | null;
      provider_id?: string | null;
      provider?: string | null;
      status?: string;
      /** Format: date-time */
      expired_at?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      logo?: string | components["schemas"]["Files"] | null;
      team?: string | components["schemas"]["ItemsSaasTeams"] | null;
      orderbots?: ((number | components["schemas"]["ItemsOrderbotsChannels"])[]) | null;
      bots?: ((number | components["schemas"]["ItemsChannelsBots"])[]) | null;
    };
    ItemsChannelsDatasets: {
      sort?: number | null;
      status?: string;
      name?: string | null;
      code?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      channel?: string | components["schemas"]["ItemsChannels"] | null;
    };
    ItemsChannelsBots: {
      id?: number;
      bot_id?: string | components["schemas"]["ItemsBots"] | null;
      channel_id?: string | components["schemas"]["ItemsChannels"] | null;
    };
    ItemsSaasCommissionRules: {
      /** @description Number of months to pay recurring commission */
      recurring_months?: number;
      tier: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** @description Commission percentage for first payment */
      first_payment_rate: number;
      /** @description Commission percentage for recurring payments */
      recurring_rate: number;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
    };
    ItemsAdSets: {
      sort?: number | null;
      data?: unknown;
      status?: string | null;
      adset_id?: string | null;
      ad_account_id?: string | null;
      campaign_id?: string | null;
      name?: string | null;
      /** Format: timestamp */
      last_synced?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      ad_account?: string | components["schemas"]["ItemsAdAccounts"] | null;
      ad_campaign?: string | components["schemas"]["ItemsAdCampaigns"] | null;
    };
    ItemsSaasPricesTranslations: {
      id?: number;
      /** Format: int64 */
      unit_amount?: number | null;
      description?: string | null;
      currency?: string | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      saas_prices_id?: string | components["schemas"]["ItemsSaasPrices"] | null;
    };
    ItemsAdPerformance: {
      sort?: number | null;
      impressions?: number | null;
      clicks?: number | null;
      conversions?: number | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      spend?: number | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
    };
    ItemsAIRules: {
      sort?: number | null;
      action?: unknown;
      condition?: unknown;
      name?: string | null;
      status?: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      team?: string | components["schemas"]["ItemsSaasTeams"] | null;
      /** Format: uuid */
      id: string;
      ad_sets?: ((number | components["schemas"]["ItemsAdSetsAIRules"])[]) | null;
      rule_executions?: ((string | components["schemas"]["ItemsRuleExecutions"])[]) | null;
      campaigns?: ((number | components["schemas"]["ItemsCampaignsAIRules"])[]) | null;
      ads?: ((number | components["schemas"]["ItemsAdsAIRules"])[]) | null;
    };
    ItemsSaasWebinars: {
      id?: number;
      sort?: number | null;
      description?: string | null;
      content?: unknown;
      tags?: unknown;
      metadata?: unknown;
      register_link?: string | null;
      name?: string | null;
      status?: string;
      /** Format: date-time */
      start_date?: string | null;
      /** Format: date-time */
      end_date?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      cover?: string | components["schemas"]["Files"] | null;
      og_image?: string | components["schemas"]["Files"] | null;
    };
    ItemsRuleExecutions: {
      sort?: number | null;
      result?: unknown;
      /** Format: timestamp */
      execution_date?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      rule?: string | components["schemas"]["ItemsAIRules"] | null;
    };
    ItemsCampaignsAIRules: {
      id?: number;
      rule_id?: string | components["schemas"]["ItemsAIRules"] | null;
    };
    ItemsAdSetsAIRules: {
      id?: number;
      ad_sets_id?: string | components["schemas"]["ItemsAdSets"] | null;
      rule_id?: string | components["schemas"]["ItemsAIRules"] | null;
    };
    ItemsAdsAIRules: {
      id?: number;
      rule_id?: string | components["schemas"]["ItemsAIRules"] | null;
    };
    ItemsVoucherGroups: {
      claim_limit?: number | null;
      name?: string | null;
      status?: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      vouchers?: ((number | components["schemas"]["ItemsVoucherGroupsVouchers"])[]) | null;
    };
    ItemsAdAds: {
      sort?: number | null;
      data?: unknown;
      adset_id?: string | null;
      status?: string | null;
      ad_account_id?: string | null;
      campaign_id?: string | null;
      name?: string | null;
      ad_id?: string | null;
      /** Format: timestamp */
      last_synced?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      ad_set?: string | components["schemas"]["ItemsAdSets"] | null;
      ad_campaign?: string | components["schemas"]["ItemsAdCampaigns"] | null;
      ad_account?: string | components["schemas"]["ItemsAdAccounts"] | null;
    };
    ItemsSaasReferrals: {
      status?: string;
      program_type: string;
      /**
       * Format: timestamp
       * @description When the referral was converted
       */
      converted_at?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** @description User who referred */
      referrer_id?: string | components["schemas"]["Users"] | null;
      /** @description User who was referred */
      referred_id?: string | components["schemas"]["Users"] | null;
    };
    ItemsSaasCustomers: {
      metadata?: unknown;
      postal_code?: string | null;
      state?: string | null;
      city?: string | null;
      address_line2?: string | null;
      address_line1?: string | null;
      tax_type?: string | null;
      /** @description VAT ID or Tax ID */
      tax_id?: string | null;
      phone?: string | null;
      email?: string | null;
      company_name?: string | null;
      /** @description Stripe customer reference */
      stripe_customer_id: string;
      env?: string | null;
      name?: string | null;
      country?: string | null;
      /** Format: date-time */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      coupons?: ((string | components["schemas"]["ItemsSaasCoupons"])[]) | null;
    };
    ItemsAdCampaigns: {
      sort?: number | null;
      data?: unknown;
      ad_account_id?: string | null;
      status?: string | null;
      name?: string | null;
      campaign_id?: string | null;
      /** Format: date-time */
      start_date?: string | null;
      /** Format: date-time */
      end_date?: string | null;
      /** Format: timestamp */
      last_synced?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      ad_account?: string | components["schemas"]["ItemsAdAccounts"] | null;
    };
    ItemsBotsDatasources: {
      sort?: number | null;
      bot?: string | components["schemas"]["ItemsBots"] | null;
      type?: string | null;
      connection_string?: string | null;
      name?: string | null;
      status?: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      tables?: ((string | components["schemas"]["ItemsBotsDatasourcesTables"])[]) | null;
    };
    ItemsAdAccounts: {
      sort?: number | null;
      metadata?: unknown;
      platform?: string | null;
      access_token?: string | null;
      name?: string | null;
      ad_account_id?: string | null;
      /** Format: timestamp */
      last_synced?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      team?: string | components["schemas"]["ItemsSaasTeams"] | null;
      /** Format: uuid */
      id: string;
      bots?: ((string | components["schemas"]["ItemsBots"])[]) | null;
    };
    ItemsSaasAffiliates: {
      status?: string;
      current_tier?: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      user_id?: string | components["schemas"]["Users"] | null;
    };
    ItemsBotsDatasourcesTables: {
      instructions?: string | null;
      description?: string | null;
      metadata?: unknown;
      name?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      datasource?: string | components["schemas"]["ItemsBotsDatasources"] | null;
      fields?: ((string | components["schemas"]["ItemsBotsDatasourcesFields"])[]) | null;
    };
    ItemsSaasAffiliateMonthlyStats: {
      /** @description Number of converted referrals this month */
      successful_referrals?: number;
      achieved_tier?: string;
      /**
       * Format: date
       * @description Month/Year of stats
       */
      period: string;
      /**
       * Format: timestamp
       * @description When these stats were last calculated
       */
      calculated_at: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** @description Total commission earned this month */
      commission_earned?: number;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      affiliate_id?: string | components["schemas"]["ItemsSaasAffiliates"] | null;
    };
    ItemsSaasCommissionPayments: {
      status?: string;
      payment_type?: string;
      /** @description Reference to Stripe transfer */
      stripe_transfer_id: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      affiliate_id?: string | components["schemas"]["ItemsSaasAffiliates"] | null;
      referral_id?: string | components["schemas"]["ItemsSaasReferrals"] | null;
    };
    ItemsMailOutbox: {
      recipients?: unknown;
      status?: string | null;
      email?: string | null;
      field2?: string | null;
      field1?: string | null;
      name?: string | null;
      field8?: string | null;
      field7?: string | null;
      field6?: string | null;
      field5?: string | null;
      field4?: string | null;
      field3?: string | null;
      subject?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      template?: string | components["schemas"]["ItemsMailTemplates"] | null;
    };
    ItemsBots: {
      sort?: number | null;
      allowed_topics?: string | null;
      context?: string | null;
      guidelines?: string | null;
      product_description?: string | null;
      sql_agent_prompt?: string | null;
      system_prompt_mobile?: string | null;
      greeting_message_mobile?: string | null;
      greeting_message?: string | null;
      expertise?: string | null;
      system_prompt?: string | null;
      mcp_servers?: unknown;
      data_sources?: unknown;
      metadata?: unknown;
      greeting_quick_reply?: unknown;
      special_keywords?: unknown;
      routing_config?: unknown;
      bots_enabled_messages_en?: unknown;
      irrelevant_answers?: unknown;
      functions?: unknown;
      bots_enabled_messages?: unknown;
      bots_disabled_messages?: unknown;
      start_keyword_en?: string | null;
      version?: string | null;
      gender?: string | null;
      slug?: string | null;
      product_name?: string | null;
      start_keyword?: string | null;
      type?: string | null;
      stop_keyword?: string | null;
      status?: string;
      id: string;
      user_prompt?: string | null;
      model?: string | components["schemas"]["ItemsLLMModels"] | null;
      name?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      logo?: string | components["schemas"]["Files"] | null;
      icon?: string | components["schemas"]["Files"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      team: string | components["schemas"]["ItemsSaasTeams"];
      avatar?: string | components["schemas"]["Files"] | null;
      ad_account?: string | components["schemas"]["ItemsAdAccounts"] | null;
      knowledges?: ((string | components["schemas"]["ItemsBotsKnowledges"])[]) | null;
      context_documents?: ((number | components["schemas"]["ItemsBotDocuments"])[]) | null;
      channels?: ((number | components["schemas"]["ItemsChannelsBots"])[]) | null;
      datasources?: ((string | components["schemas"]["ItemsBotsDatasources"])[]) | null;
      muted_users?: ((string | components["schemas"]["ItemsBotsMutedUsers"])[]) | null;
      orders?: ((string | components["schemas"]["ItemsBotsOrders"])[]) | null;
      documents?: ((string | components["schemas"]["ItemsBotsDocuments"])[]) | null;
      bots_enabled_users?: ((string | components["schemas"]["ItemsBotsEnabledUsers"])[]) | null;
    };
    ItemsSaasInvoices: {
      /** @description Number of payment attempts */
      attempt_count?: number;
      /** @description Additional invoice metadata */
      metadata?: unknown;
      /** @description Stripe customer reference */
      stripe_customer_id: string;
      /** @description Stripe invoice reference */
      id: string;
      /** @description Stripe subscription reference */
      stripe_subscription_id: string;
      /** @description Payment method used */
      payment_method?: string | null;
      /** @description URL for hosted invoice page */
      hosted_invoice_url?: string | null;
      /** @description URL for PDF invoice */
      pdf_invoice_url?: string | null;
      /** @description Invoice number */
      number?: string | null;
      /** @description Stripe payment intent reference */
      stripe_payment_intent_id?: string | null;
      /** @description Reason for invoice generation */
      billing_reason?: string | null;
      currency?: string;
      status?: string;
      /**
       * Format: timestamp
       * @description Next automatic payment attempt
       */
      next_payment_attempt?: string | null;
      /**
       * Format: timestamp
       * @description Invoice due date
       */
      due_date?: string | null;
      /**
       * Format: timestamp
       * @description Invoice period end date
       */
      period_end: string;
      /**
       * Format: timestamp
       * @description Invoice period start date
       */
      period_start: string;
      /**
       * Format: timestamp
       * @description When the invoice was paid
       */
      paid_at?: string | null;
      /** @description Total before tax and discounts */
      subtotal: number;
      /** @description Tax amount */
      tax?: number | null;
      /** @description Final total after tax and discounts */
      total: number;
      amount_due: number;
      customer?: string | components["schemas"]["ItemsSaasCustomers"] | null;
    };
    ItemsSaasHelpdesk: {
      id?: number;
      service?: string | null;
      status?: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      translations?: ((number | components["schemas"]["ItemsSaasHelpdeskTranslations"])[]) | null;
    };
    ItemsSaasCouponCampaigns: {
      description?: string | null;
      name: string;
      status?: string;
      /** Format: timestamp */
      date_updated: string;
      /** Format: timestamp */
      date_created: string;
      /** Format: timestamp */
      end_date: string;
      /** Format: timestamp */
      start_date: string;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      user_created: string;
      /** Format: uuid */
      user_updated: string;
    };
    ItemsSaasTerms: {
      sort?: number | null;
      id: string;
      status?: string;
      name?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      translations?: ((number | components["schemas"]["ItemsSaasTermsTranslations"])[]) | null;
    };
    ItemsSaasCoupons: {
      sort?: number | null;
      env?: string | null;
      status?: string;
      code?: string | null;
      /** Format: date-time */
      end_date?: string | null;
      /** Format: date-time */
      start_date?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      customer?: string | components["schemas"]["ItemsSaasCustomers"] | null;
      translations?: ((number | components["schemas"]["ItemsSaasCouponsTranslations"])[]) | null;
    };
    ItemsBotDocumentsFiles: {
      bot_documents_id?: number | components["schemas"]["ItemsBotDocuments"] | null;
      id?: number;
      directus_files_id?: string | components["schemas"]["Files"] | null;
    };
    ItemsBotsModel: {
      max_output_tokens?: number | null;
      max_input_tokens?: number | null;
      id?: number;
      mode?: string | null;
      model?: string | null;
      provider?: string | null;
      api_key?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
    };
    ItemsSaasFeatures: {
      sort?: number | null;
      name?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
    };
    ItemsBotsDatasourcesFields: {
      is_noun?: boolean | null;
      description?: string | null;
      map_type?: string | null;
      example?: string | null;
      name?: string | null;
      data_type?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      table?: string | components["schemas"]["ItemsBotsDatasourcesTables"] | null;
    };
    ItemsTmp: {
      /** Format: uuid */
      id: string;
    };
    ItemsBotsMutedUsers: {
      uid?: string | null;
      bot?: string | components["schemas"]["ItemsBots"] | null;
      provider_id?: string | null;
      /** Format: date-time */
      expires_on?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
    };
    ItemsVouchersUsers: {
      discount_value?: number | null;
      sort?: number | null;
      utm_source?: string | null;
      utm_medium?: string | null;
      utm_campaign?: string | null;
      referral?: string | null;
      ad_ref?: string | null;
      discount_type?: string | null;
      collected_by?: string | components["schemas"]["ItemsProfiles"] | null;
      /** Format: timestamp */
      used_date?: string | null;
      /** Format: timestamp */
      expired_date?: string | null;
      /** Format: timestamp */
      collected_date?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      channel?: string | components["schemas"]["ItemsChannels"] | null;
      code: string | components["schemas"]["ItemsVouchersCodes"];
    };
    ItemsVouchers: {
      hide_on_homepage?: boolean | null;
      validity_in_seconds?: number | null;
      sort?: number | null;
      metadata?: unknown;
      ref_code?: string | null;
      voucher_brand_id?: string | components["schemas"]["ItemsVouchersBrands"] | null;
      name?: string | null;
      primary_color?: string | null;
      status?: string;
      /** Format: timestamp */
      end_date?: string | null;
      /** Format: timestamp */
      start_date?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      cover?: string | components["schemas"]["Files"] | null;
      page?: string | components["schemas"]["ItemsPagesLiff"] | null;
      banner?: string | components["schemas"]["Files"] | null;
      poster?: string | components["schemas"]["Files"] | null;
      teaser?: string | components["schemas"]["Files"] | null;
      /** Format: uuid */
      id: string;
      codes?: ((string | components["schemas"]["ItemsVouchersCodes"])[]) | null;
      translations?: ((number | components["schemas"]["ItemsVouchersTranslations"])[]) | null;
      categories?: ((number | components["schemas"]["ItemsVouchersVoucherCategories"])[]) | null;
    };
    ItemsOrders: {
      sort?: number | null;
      id?: number;
      status?: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
    };
    ItemsProducts: {
      is_available?: boolean | null;
      sort?: number | null;
      description?: string | null;
      metadata?: unknown;
      /** Format: float */
      weight?: number | null;
      /** Format: float */
      price?: number | null;
      collections?: unknown;
      tags?: unknown;
      vendor?: string | null;
      made_in?: string | null;
      name?: string | null;
      type?: string | null;
      sku?: string | null;
      brand?: string | null;
      slug?: string | null;
      status?: string;
      manufacturer?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      thumbnail?: string | components["schemas"]["Files"] | null;
      team?: string | components["schemas"]["ItemsSaasTeams"] | null;
    };
    ItemsOrderbots: {
      sort?: number | null;
      system_prompt?: string | null;
      expertise?: string | null;
      greeting_message?: string | null;
      greeting_message_mobile?: string | null;
      system_prompt_mobile?: string | null;
      sql_agent_prompt?: string | null;
      product_description?: string | null;
      guidelines?: string | null;
      context?: string | null;
      routing_config?: unknown;
      irrelevant_answers?: unknown;
      functions?: unknown;
      data_sources?: unknown;
      metadata?: unknown;
      id: string;
      name?: string | null;
      status?: string;
      version?: string | null;
      gender?: string | null;
      product_name?: string | null;
      slug?: string | null;
      type?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      team?: string | components["schemas"]["ItemsSaasTeams"] | null;
      /** Format: uuid */
      avatar?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      channels?: ((number | components["schemas"]["ItemsOrderbotsChannels"])[]) | null;
    };
    ItemsVouchersCodes: {
      sort?: number | null;
      status?: string;
      code_status?: string | null;
      code?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      voucher?: string | components["schemas"]["ItemsVouchers"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsOrderbotsChannels: {
      id?: number;
      orderbot_id?: string | components["schemas"]["ItemsOrderbots"] | null;
      channel_id?: string | components["schemas"]["ItemsChannels"] | null;
    };
    ItemsUserProfile: {
      phone?: string | null;
      company?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsBotsOrders: {
      metadata?: unknown;
      template?: string | null;
      name?: string | null;
      bot?: string | components["schemas"]["ItemsBots"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsSaasTeamsInvites: {
      id: string;
      email?: string | null;
      team_name?: string | null;
      role?: string | null;
      token?: string | null;
      /** Format: timestamp */
      date_invite?: string | null;
      user_id?: string | components["schemas"]["Users"] | null;
      team_id?: string | components["schemas"]["ItemsSaasTeams"] | null;
      user_invite?: string | components["schemas"]["Users"] | null;
    };
    ItemsBotsFallback: {
      emails?: unknown;
      payload?: unknown;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    Comments: {
      /**
       * @description User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app.
       * @example This is a comment
       */
      comment?: string;
      /**
       * @description The collection of the item the Comment is created for.
       * @example articles
       */
      collection?: string | components["schemas"]["Collections"];
      /**
       * @description The item the Comment is created for.
       * @example 123
       */
      item?: string;
      /**
       * Format: date-time
       * @description When the Comment was updated.
       * @example 2024-01-23T12:34:56Z
       */
      date_updated?: string | null;
      /**
       * Format: date-time
       * @description When the Comment was created.
       * @example 2024-01-23T12:34:56Z
       */
      date_created?: string | null;
      /**
       * @description User that updated the Comment.
       * @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28
       */
      user_updated?: string | components["schemas"]["Users"];
      /**
       * @description User that created the Comment.
       * @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28
       */
      user_created?: string | components["schemas"]["Users"];
      /**
       * @description Unique identifier for this single collection preset.
       * @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28
       */
      id?: string;
    };
    ItemsBotsKnowledgesFiles: {
      id?: number;
      directus_files_id?: string | components["schemas"]["Files"] | null;
      bots_knowledges_id?: string | components["schemas"]["ItemsBotsKnowledges"] | null;
    };
    ItemsUserFeedback: {
      comment?: string | null;
      uid?: string | null;
      provider_id?: string | null;
      bot?: string | components["schemas"]["ItemsBots"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      rating?: number | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsBotsKnowledgesFiles1: {
      id?: number;
      directus_files_id?: string | components["schemas"]["Files"] | null;
      bots_knowledges_id?: string | components["schemas"]["ItemsBotsKnowledges"] | null;
    };
    ItemsSaasCouponsTranslations: {
      id?: number;
      metadata?: unknown;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      saas_coupons_id?: string | components["schemas"]["ItemsSaasCoupons"] | null;
    };
    ItemsTasks: {
      /** @description Sort order of the task */
      sort?: number;
      /** @description Detailed task description */
      description?: string | null;
      /** @description Task title */
      title: string;
      /** @description Current status of the task */
      status?: string;
      /**
       * Format: uuid
       * @description The unique identifier of the task
       */
      id: string;
    };
    ItemsBotsDocuments: {
      total_pages?: number | null;
      sort?: number | null;
      file_size?: number | null;
      description?: string | null;
      text?: string | null;
      example_queries?: unknown;
      json_schema?: unknown;
      json_data?: unknown;
      document_url?: string | null;
      callback_url?: string | null;
      bot?: string | components["schemas"]["ItemsBots"] | null;
      status?: string;
      language?: string | null;
      name?: string | null;
      crc32_hash?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      dest?: string | components["schemas"]["Files"] | null;
      src?: string | components["schemas"]["Files"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsMailTemplates: {
      body?: string | null;
      to?: unknown;
      cc?: unknown;
      name?: string | null;
      reference?: string | null;
      reference_id?: string | null;
      subject?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsVouchersBrands: {
      sort?: number | null;
      metadata?: unknown;
      id: string;
      status?: string;
      name?: string | null;
      primaryColor?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      logo?: string | components["schemas"]["Files"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      liff?: ((number | components["schemas"]["ItemsPagesLiffVouchersBrands"])[]) | null;
      categories?: ((number | components["schemas"]["ItemsVouchersBrandsVoucherCategories"])[]) | null;
    };
    ItemsChannelUsers: {
      bot_enabled?: boolean | null;
      advanace_profiles?: number | components["schemas"]["ItemsAdvancedProfiles"] | null;
      sort?: number | null;
      profile_pic?: string | null;
      last_message?: string | null;
      status?: string;
      social_id?: string | null;
      display_name?: string | null;
      first_name?: string | null;
      last_name?: string | null;
      preferred_language?: string | null;
      /** Format: date-time */
      last_message_at?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      channel_id?: string | components["schemas"]["ItemsChannels"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsTest: {
      /** Format: uuid */
      id: string;
    };
    ItemsSaasTermsTranslations: {
      id?: number;
      content?: string | null;
      saas_terms_id?: string | components["schemas"]["ItemsSaasTerms"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
    };
    ItemsBotsInquiries: {
      description: string;
      metadata?: unknown;
      bot: string | components["schemas"]["ItemsBots"];
      name: string;
      email: string;
      subject: string;
      inquiry_type: string;
      phone?: string | null;
      priority?: string | null;
      status?: string;
      uid?: string | null;
      /** Format: timestamp */
      date_created: string;
      /** Format: uuid */
      id: string;
    };
    ItemsChatHubs: {
      id: string;
      name?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      team?: string | components["schemas"]["ItemsSaasTeams"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      channels?: ((number | components["schemas"]["ItemsChatHubsChannels"])[]) | null;
    };
    ItemsBotDocuments: {
      sort?: number | null;
      id?: number;
      text?: string | null;
      description?: string | null;
      example_queries?: unknown;
      bot?: string | components["schemas"]["ItemsBots"] | null;
      title?: string | null;
      language?: string | null;
      status?: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      documents?: ((number | components["schemas"]["ItemsBotDocumentsFiles"])[]) | null;
    };
    ItemsChatHubsChannels: {
      id?: number;
      chat_hubs_id?: string | components["schemas"]["ItemsChatHubs"] | null;
      channels_id?: string | components["schemas"]["ItemsChannels"] | null;
    };
    ItemsLeadSubmissions: {
      data?: unknown;
      metadata?: unknown;
      status?: string;
      source?: string | null;
      source_id?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsBeacons: {
      sort?: number | null;
      id?: number;
      status?: string;
      hwid?: string | null;
      passcode?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
    };
    ItemsLocations: {
      sort?: number | null;
      id?: number;
      status?: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
    };
    ItemsZones: {
      sort?: number | null;
      id?: number;
      status?: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
    };
    ItemsLiffTokens: {
      remain?: number | null;
      uid?: string | null;
      token?: string | null;
      /** Format: date-time */
      expires_on?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      id: string;
    };
    ItemsTest2: {
      sort?: number | null;
      id?: number;
    };
    ItemsChannelNotifications: {
      sort?: number | null;
      payload?: unknown;
      status?: string;
      uid?: string | null;
      tag?: string | null;
      /** Format: date-time */
      schedule?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      channel?: string | components["schemas"]["ItemsChannels"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsPagesLiffVouchersBrands: {
      sort?: number | null;
      id?: number;
      vouchers_brands_id?: string | components["schemas"]["ItemsVouchersBrands"] | null;
      pages_liff_id?: string | components["schemas"]["ItemsPagesLiff"] | null;
    };
    ItemsChannelOutboxes: {
      sort?: number | null;
      payload?: unknown;
      status?: string;
      uid?: string | null;
      tag?: string | null;
      /** Format: date-time */
      sent_at?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      channel_notification?: string | components["schemas"]["ItemsChannelNotifications"] | null;
      channel?: string | components["schemas"]["ItemsChannels"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsVouchersTranslations: {
      id?: number;
      description?: string | null;
      condition?: string | null;
      congrat?: string | null;
      push_message?: unknown;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
      vouchers_id?: string | components["schemas"]["ItemsVouchers"] | null;
    };
    ItemsProfiles: {
      interests?: unknown;
      display_name?: string | null;
      picture_url?: string | null;
      id: string;
      status?: string;
      liff_id?: string | null;
      uid?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      point_transactions?: ((string | components["schemas"]["ItemsPointTransactions"])[]) | null;
    };
    ItemsPagesLiffVouchers: {
      id?: number;
      vouchers_id?: string | components["schemas"]["ItemsVouchers"] | null;
      pages_liff_id?: string | components["schemas"]["ItemsPagesLiff"] | null;
    };
    ItemsPointTransactions: {
      points_amount?: number | null;
      description?: string | null;
      profile?: string | components["schemas"]["ItemsProfiles"] | null;
      advance_profile?: string | components["schemas"]["ItemsAdvanceProfiles"] | null;
      transaction_type: string;
      source?: string | null;
      source_id?: string | null;
      status?: string | null;
      /** Format: date */
      expiry_date?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsUserEvents: {
      event_properties?: unknown;
      user?: string | components["schemas"]["ItemsProfiles"] | null;
      event_type?: string | null;
      /** Format: timestamp */
      created_at: string;
      /** Format: timestamp */
      date_created?: string | null;
      liff?: string | components["schemas"]["ItemsPagesLiff"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsReferrals: {
      /** Format: int64 */
      id?: number;
      status?: string;
      referrer_id?: string | null;
      referred_id?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
    };
    ItemsVouchersBrandsVoucherCategories: {
      id?: number;
      vouchers_brands_id?: string | components["schemas"]["ItemsVouchersBrands"] | null;
      voucher_categories_id?: string | components["schemas"]["ItemsVoucherCategories"] | null;
    };
    ItemsPagesLiffVoucherCategories: {
      id?: number;
      voucher_categories_id?: string | components["schemas"]["ItemsVoucherCategories"] | null;
      pages_liff_id?: string | components["schemas"]["ItemsPagesLiff"] | null;
    };
    ItemsDocuments: {
      total_pages?: number | null;
      text_tokens?: number | null;
      text_length?: number | null;
      src_file_size?: number | null;
      description?: string | null;
      text?: string | null;
      text_code?: string | null;
      json_schema?: unknown;
      json_data?: unknown;
      example_queries?: unknown;
      src_url?: string | null;
      language?: string | null;
      callback_url?: string | null;
      status?: string;
      name?: string | null;
      src_mimetype?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      api_logs?: string | components["schemas"]["ItemsAPILogs"] | null;
      dest?: string | components["schemas"]["Files"] | null;
      src?: string | components["schemas"]["Files"] | null;
      team?: string | components["schemas"]["ItemsSaasTeams"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsPagesLiffVouchers1: {
      id?: number;
      vouchers_id?: string | components["schemas"]["ItemsVouchers"] | null;
      pages_liff_id?: string | components["schemas"]["ItemsPagesLiff"] | null;
    };
    ItemsVoucherGroupsVouchers: {
      id?: number;
      vouchers_id?: string | components["schemas"]["ItemsVouchers"] | null;
      voucher_groups_id?: string | components["schemas"]["ItemsVoucherGroups"] | null;
    };
    ItemsVouchersVoucherCategories: {
      id?: number;
      voucher_categories_id?: string | components["schemas"]["ItemsVoucherCategories"] | null;
      vouchers_id?: string | components["schemas"]["ItemsVouchers"] | null;
    };
    ItemsVoucherCategories: {
      sort?: number | null;
      name?: unknown;
      type?: string | null;
      icon_name?: string | null;
      color?: string | null;
      status?: string;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsPagesLiffVouchers2: {
      id?: number;
      vouchers_id?: string | components["schemas"]["ItemsVouchers"] | null;
      pages_liff_id?: string | components["schemas"]["ItemsPagesLiff"] | null;
    };
    ItemsCampaignMissions: {
      sort?: number | null;
      reward_credits?: number | null;
      title?: unknown;
      mission_data?: unknown;
      status?: string;
      frequency?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      campaign?: string | components["schemas"]["ItemsCampaigns"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
      user_created?: string | components["schemas"]["Users"] | null;
    };
    ItemsCampaigns: {
      sort?: number | null;
      title?: unknown;
      description?: unknown;
      registration_form?: unknown;
      status?: string;
      /** Format: timestamp */
      end_date?: string | null;
      /** Format: timestamp */
      start_date?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
      poster_image?: string | components["schemas"]["Files"] | null;
      banner_image?: string | components["schemas"]["Files"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
    };
    ItemsUserCampaignRegistrations: {
      has_agreed_pdpa?: boolean | null;
      registration_data?: unknown;
      user?: string | components["schemas"]["ItemsProfiles"] | null;
      /** Format: timestamp */
      registered_at?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      campaign?: string | components["schemas"]["ItemsCampaigns"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsUserRewardCredits: {
      total_earned?: number | null;
      user_id?: string | components["schemas"]["ItemsProfiles"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      campaign_id?: string | components["schemas"]["ItemsCampaigns"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsUserMissionSubmissions: {
      submission_data?: unknown;
      user_id?: string | components["schemas"]["ItemsProfiles"] | null;
      /** Format: timestamp */
      submitted_at?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      mission_id?: string | components["schemas"]["ItemsCampaignMissions"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: uuid */
      id: string;
    };
    ItemsRewardCreditTransactions: {
      user_id?: string | components["schemas"]["ItemsProfiles"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      related_submission_id?: string | components["schemas"]["ItemsUserMissionSubmissions"] | null;
      /** Format: uuid */
      id: string;
      user_updated?: string | components["schemas"]["Users"] | null;
      user_created?: string | components["schemas"]["Users"] | null;
      campaign_id?: string | components["schemas"]["ItemsCampaigns"] | null;
    };
    ItemsPagesLiffCampaigns: {
      id?: number;
      pages_liff_id?: string | components["schemas"]["ItemsPagesLiff"] | null;
      campaigns_id?: string | components["schemas"]["ItemsCampaigns"] | null;
    };
  };
  responses: {
    /** @description Error: Not found. */
    NotFoundError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
    /** @description Error: Unauthorized request */
    UnauthorizedError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
  };
  parameters: {
    /** @description Index */
    Id: number;
    /** @description Unique identifier for the object. */
    UUId: string;
    /** @description Collection of which you want to retrieve the items from. */
    Collection: string;
    /** @description Filter by items that contain the given search query in one of their fields. */
    Search?: string;
    /** @description Cursor for use in pagination. Often used in combination with limit. */
    Page?: number;
    /** @description How many items to skip when fetching data. */
    Offset?: number;
    /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
    Sort?: string[];
    /** @description What metadata to return in the response. */
    Meta?: string;
    /** @description A limit on the number of objects that are returned. */
    Limit?: number;
    /** @description Select items in collection by given conditions. */
    Filter?: string;
    /** @description Control what fields are being returned in the object. */
    Fields?: string[];
    /** @description Saves the API response to a file. Accepts one of "csv", "json", "xml", "yaml". */
    Export?: "csv" | "json" | "xml" | "yaml";
    /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version. */
    Version?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get an Asset
   * @description Image typed files can be dynamically resized and transformed to fit any need.
   */
  getAsset: {
    parameters: {
      query?: {
        /** @description The key of the asset size configured in settings. */
        key?: string;
        /** @description A JSON array of image transformations */
        transforms?: string;
        /** @description Download the asset to your computer */
        download?: boolean;
      };
      path: {
        /** @description The id of the file. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "text/plain": string;
        };
      };
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Temporary Access Token
   * @description Retrieve a Temporary Access Token
   */
  login: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're retrieving the access token for.
           * @example admin@example.com
           */
          email: string;
          /**
           * Format: password
           * @description Password of the user.
           * @example password
           */
          password: string;
          /**
           * @description Whether to retrieve the refresh token in the JSON response, or in a httpOnly cookie.
           * @default json
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
          /** @description The user's one-time-password (if MFA is enabled). */
          otp?: string;
        };
      };
    };
    responses: {
      /** @description Successful authentification */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example yuOJkjdPXMd... */
              refresh_token?: string;
            };
          };
        };
      };
    };
  };
  /**
   * Refresh Token
   * @description Refresh a Temporary Access Token.
   */
  refresh: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description JWT access token you want to refresh. This token can't be expired.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
          /**
           * @description Whether to submit and retrieve the refresh token in the JSON response, or in a httpOnly cookie.
           * @default json
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example Gy-caJMpmGTA... */
              refresh_token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Log Out
   * @description Log Out
   */
  logout: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
          /**
           * @description Whether the refresh token is submitted in the JSON response, or in a httpOnly cookie.
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
        };
      };
    };
    responses: {
      /** @description Request successful */
      200: {
        content: never;
      };
    };
  };
  /**
   * Request a Password Reset
   * @description Request a reset password email to be send.
   */
  passwordRequest: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're requesting a reset for.
           * @example admin@example.com
           */
          email: string;
        };
      };
    };
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Reset a Password
   * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
   */
  passwordReset: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description One-time use JWT token that is used to verify the user.
           * @example eyJ0eXAiOiJKV1Qi...
           */
          token: string;
          /**
           * Format: password
           * @description New password for the user.
           * @example password
           */
          password: string;
        };
      };
    };
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List OAuth Providers
   * @description List configured OAuth providers.
   */
  oauth: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            /**
             * @example [
             *   "github",
             *   "facebook"
             * ]
             */
            data?: string[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Authenticated using an OAuth provider
   * @description Start OAuth flow using the specified provider
   */
  oauthProvider: {
    parameters: {
      query?: {
        /** @description Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned. */
        redirect?: string;
      };
      path: {
        /** @description Key of the activated OAuth provider. */
        provider: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            data?: {
              token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve Schema Snapshot
   * @description Retrieve the current schema. This endpoint is only available to admin users.
   */
  schemaSnapshot: {
    parameters: {
      query?: {
        export?: components["parameters"]["Export"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Schema"];
          };
          "text/yaml": string;
        };
      };
      403: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Apply Schema Difference
   * @description Update the instance's schema by passing the diff previously retrieved via `/schema/diff` endpoint in the JSON request body or a JSON/YAML file. This endpoint is only available to admin users.
   */
  schemaApply: {
    requestBody: {
      content: {
        "application/json": {
          data?: components["schemas"]["Diff"];
        };
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      204: {
        content: never;
      };
      403: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve Schema Difference
   * @description Compare the current instance's schema against the schema snapshot in JSON request body or a JSON/YAML file and retrieve the difference. This endpoint is only available to admin users.
   */
  schemaDiff: {
    parameters: {
      query?: {
        /** @description Bypass version and database vendor restrictions. */
        force?: boolean;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          data?: components["schemas"]["Schema"];
        };
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Diff"];
          };
        };
      };
      /** @description No schema difference. */
      204: {
        content: never;
      };
      403: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * System Info
   * @description Perform a system status check and return the options.
   */
  serverInfo: {
    parameters: {
      query: {
        /** @description The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server. */
        super_admin_token: number;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Ping
   * @description Ping, pong. Ping.. pong.
   */
  ping: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/text": string;
        };
      };
    };
  };
  /**
   * Hash a string
   * @description Generate a hash for a given string.
   */
  "hash-generate": {
    requestBody?: {
      content: {
        "application/json": {
          /** @description String to hash. */
          string: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            /** @example $argon2i$v=19$m=4096,t=3,p=1$pOyIa/zmRAjCVLb2f7kOyg$DasoO6LzMM+6iKfzCDq6JbsYsZWLSm33p7i9NxL9mDc */
            data?: string;
          };
        };
      };
    };
  };
  /**
   * Hash a string
   * @description Generate a hash for a given string.
   */
  "hash-verify": {
    requestBody?: {
      content: {
        "application/json": {
          /** @description String to hash. */
          string: string;
          /** @description Hash you want to verify against. */
          hash: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            /** @example true */
            data?: boolean;
          };
        };
      };
    };
  };
  /**
   * Sort Items
   * @description Re-sort items in collection based on start and to value of item
   */
  sort: {
    parameters: {
      path: {
        /** @description Collection identifier */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Primary key of item to move */
          item?: number;
          /** @description Primary key of item where to move the current item to */
          to?: number;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Import Items
   * @description Import multiple records from a JSON or CSV file into a collection.
   */
  import: {
    parameters: {
      path: {
        /** @description Collection identifier */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Export Items
   * @description Export a larger data set to a file in the File Library
   */
  export: {
    parameters: {
      path: {
        /** @description Collection identifier */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description What file format to save the export to. One of csv, xml, json
           * @enum {string}
           */
          format: "csv" | "xml" | "json";
          query: components["schemas"]["Query"];
          file: components["schemas"]["Files"];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Clear Cache
   * @description Resets both the data and schema cache of Directus.
   */
  "clear-cache": {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get a Random String
   * @description Returns a random string of given length.
   */
  random: {
    parameters: {
      query?: {
        /** @description Length of the random string. */
        length?: number;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            /** @example 1>M3+4oh.S */
            data?: string;
          };
        };
      };
    };
  };
  /**
   * List Items
   * @description List the llm_models items.
   */
  readItemsLLMModels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLLMModels"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new llm_models item.
   */
  createItemsLLMModels: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLLMModels"][] | components["schemas"]["ItemsLLMModels"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLLMModels"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing llm_models items.
   */
  deleteItemsLLMModels: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple llm_models items at the same time.
   */
  updateItemsLLMModels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLLMModels"][] | components["schemas"]["ItemsLLMModels"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLLMModels"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single llm_models item by unique identifier.
   */
  readSingleItemsLLMModels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLLMModels"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing llm_models item.
   */
  deleteSingleItemsLLMModels: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing llm_models item.
   */
  updateSingleItemsLLMModels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLLMModels"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLLMModels"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the advance_profiles items.
   */
  readItemsAdvanceProfiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdvanceProfiles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new advance_profiles item.
   */
  createItemsAdvanceProfiles: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdvanceProfiles"][] | components["schemas"]["ItemsAdvanceProfiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdvanceProfiles"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing advance_profiles items.
   */
  deleteItemsAdvanceProfiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple advance_profiles items at the same time.
   */
  updateItemsAdvanceProfiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdvanceProfiles"][] | components["schemas"]["ItemsAdvanceProfiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdvanceProfiles"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single advance_profiles item by unique identifier.
   */
  readSingleItemsAdvanceProfiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdvanceProfiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing advance_profiles item.
   */
  deleteSingleItemsAdvanceProfiles: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing advance_profiles item.
   */
  updateSingleItemsAdvanceProfiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdvanceProfiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdvanceProfiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the advanced_profiles items.
   */
  readItemsAdvancedProfiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdvancedProfiles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new advanced_profiles item.
   */
  createItemsAdvancedProfiles: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdvancedProfiles"][] | components["schemas"]["ItemsAdvancedProfiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdvancedProfiles"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing advanced_profiles items.
   */
  deleteItemsAdvancedProfiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple advanced_profiles items at the same time.
   */
  updateItemsAdvancedProfiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdvancedProfiles"][] | components["schemas"]["ItemsAdvancedProfiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdvancedProfiles"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single advanced_profiles item by unique identifier.
   */
  readSingleItemsAdvancedProfiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdvancedProfiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing advanced_profiles item.
   */
  deleteSingleItemsAdvancedProfiles: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing advanced_profiles item.
   */
  updateSingleItemsAdvancedProfiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdvancedProfiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdvancedProfiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the voucher_views items.
   */
  readItemsVoucherViews: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherViews"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new voucher_views item.
   */
  createItemsVoucherViews: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoucherViews"][] | components["schemas"]["ItemsVoucherViews"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherViews"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing voucher_views items.
   */
  deleteItemsVoucherViews: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple voucher_views items at the same time.
   */
  updateItemsVoucherViews: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoucherViews"][] | components["schemas"]["ItemsVoucherViews"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherViews"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single voucher_views item by unique identifier.
   */
  readSingleItemsVoucherViews: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherViews"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing voucher_views item.
   */
  deleteSingleItemsVoucherViews: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing voucher_views item.
   */
  updateSingleItemsVoucherViews: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoucherViews"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherViews"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the languages items.
   */
  readItemsLanguages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new languages item.
   */
  createItemsLanguages: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLanguages"][] | components["schemas"]["ItemsLanguages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing languages items.
   */
  deleteItemsLanguages: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple languages items at the same time.
   */
  updateItemsLanguages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLanguages"][] | components["schemas"]["ItemsLanguages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single languages item by unique identifier.
   */
  readSingleItemsLanguages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing languages item.
   */
  deleteSingleItemsLanguages: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing languages item.
   */
  updateSingleItemsLanguages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLanguages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_helpdesk_translations items.
   */
  readItemsSaasHelpdeskTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasHelpdeskTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_helpdesk_translations item.
   */
  createItemsSaasHelpdeskTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasHelpdeskTranslations"][] | components["schemas"]["ItemsSaasHelpdeskTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasHelpdeskTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_helpdesk_translations items.
   */
  deleteItemsSaasHelpdeskTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_helpdesk_translations items at the same time.
   */
  updateItemsSaasHelpdeskTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasHelpdeskTranslations"][] | components["schemas"]["ItemsSaasHelpdeskTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasHelpdeskTranslations"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_helpdesk_translations item by unique identifier.
   */
  readSingleItemsSaasHelpdeskTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasHelpdeskTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_helpdesk_translations item.
   */
  deleteSingleItemsSaasHelpdeskTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_helpdesk_translations item.
   */
  updateSingleItemsSaasHelpdeskTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasHelpdeskTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasHelpdeskTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Roles
   * @description List the roles.
   */
  getRoles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Role
   * @description Create a new role.
   */
  createRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Description of the role. */
          description?: string;
          /** @description Whether or not this role enforces the use of 2FA. */
          enforce_tfa?: boolean;
          /** @description ID used with external services in SCIM. */
          external_id?: string;
          /** @description Array of IP addresses that are allowed to connect to the API as a user of this role. */
          ip_access?: string[];
          /** @description Custom override for the admin app module bar navigation. */
          module_listing?: string;
          /**
           * @description Name of the role.
           * @example Interns
           */
          name?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Roles
   * @description Delete multiple existing roles.
   */
  deleteRoles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Roles
   * @description Update multiple roles at the same time.
   */
  updateRoles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          keys?: string[];
          data?: {
            /** @description Description of the role. */
            description?: string;
            /** @description Whether or not this role enforces the use of 2FA. */
            enforce_tfa?: boolean;
            /** @description ID used with external services in SCIM. */
            external_id?: string;
            /** @description Array of IP addresses that are allowed to connect to the API as a user of this role. */
            ip_access?: string[];
            /** @description Custom override for the admin app module bar navigation. */
            module_listing?: string;
            /**
             * @description Name of the role.
             * @example Interns
             */
            name?: string;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Role
   * @description Retrieve a single role by unique identifier.
   */
  getRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Role
   * @description Delete an existing role
   */
  deleteRole: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Role
   * @description Update an existing role
   */
  updateRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Description of the role. */
          description?: string;
          /** @description Whether or not this role enforces the use of 2FA. */
          enforce_tfa?: boolean;
          /** @description ID used with external services in SCIM. */
          external_id?: string;
          /** @description Array of IP addresses that are allowed to connect to the API as a user of this role. */
          ip_access?: string[];
          /** @description Custom override for the admin app module bar navigation. */
          module_listing?: string;
          /** @description Name of the role. */
          name?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Collections
   * @description Returns a list of the collections available in the project.
   */
  getCollections: {
    parameters: {
      query?: {
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Collection
   * @description Create a new collection in Directus.
   */
  createCollection: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Unique name of the collection.
           * @example my_collection
           */
          collection: string;
          /** @description The fields contained in this collection. See the fields reference for more information. Each individual field requires field, type, and interface to be provided. */
          fields: Record<string, never>[];
          /**
           * @description Name of a Google Material Design Icon that's assigned to this collection.
           * @example people
           */
          icon?: string | null;
          /**
           * @description A note describing the collection.
           * @example null
           */
          note?: string | null;
          /**
           * @description Text representation of how items from this collection are shown across the system.
           * @example null
           */
          display_template?: string | null;
          /**
           * @description Whether or not the collection is hidden from the navigation in the admin app.
           * @example false
           */
          hidden?: boolean;
          /**
           * @description Whether or not the collection is treated as a single object.
           * @example false
           */
          singleton?: boolean;
          /**
           * @description Key value pairs of how to show this collection's name in different languages in the admin app.
           * @example null
           */
          translation?: string | null;
          /**
           * @description Whether or not Content Versioning is enabled for this collection.
           * @example false
           */
          versioning?: boolean;
          /**
           * @description What field holds the archive value.
           * @example null
           */
          archive_field?: string | null;
          /**
           * @description What value to use for "archived" items.
           * @example null
           */
          archive_app_filter?: string | null;
          /**
           * @description What value to use to "unarchive" items.
           * @example null
           */
          archive_value?: string | null;
          /**
           * @description Whether or not to show the "archived" filter.
           * @example null
           */
          unarchive_value?: string | null;
          /**
           * @description The sort field in the collection.
           * @example null
           */
          sort_field?: string | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Collection
   * @description Retrieves the details of a single collection.
   */
  getCollection: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Unique identifier of the collection. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Collection
   * @description Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.
   */
  deleteCollection: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Collection
   * @description Update an existing collection.
   */
  updateCollection: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Unique identifier of the collection. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Metadata of the collection. */
          meta?: {
            /**
             * @description Name of a Google Material Design Icon that's assigned to this collection.
             * @example people
             */
            icon?: string | null;
            /**
             * @description Choose the color for the icon assigned to this collection.
             * @example #6644ff
             */
            color?: string | null;
            /**
             * @description A note describing the collection.
             * @example null
             */
            note?: string | null;
            /**
             * @description Text representation of how items from this collection are shown across the system.
             * @example null
             */
            display_template?: string | null;
            /**
             * @description Whether or not the collection is hidden from the navigation in the admin app.
             * @example false
             */
            hidden?: boolean;
            /**
             * @description Whether or not the collection is treated as a single object.
             * @example false
             */
            singleton?: boolean;
            /**
             * @description Key value pairs of how to show this collection's name in different languages in the admin app.
             * @example null
             */
            translation?: string | null;
            /**
             * @description Whether or not Content Versioning is enabled for this collection.
             * @example false
             */
            versioning?: boolean;
            /**
             * @description What field holds the archive value.
             * @example null
             */
            archive_field?: string | null;
            /**
             * @description What value to use for "archived" items.
             * @example null
             */
            archive_app_filter?: string | null;
            /**
             * @description What value to use to "unarchive" items.
             * @example null
             */
            archive_value?: string | null;
            /**
             * @description Whether or not to show the "archived" filter.
             * @example null
             */
            unarchive_value?: string | null;
            /**
             * @description The sort field in the collection.
             * @example null
             */
            sort_field?: string | null;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Users
   * @description List the users.
   */
  getUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a User
   * @description Create a new user.
   */
  createUser: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Users"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Users
   * @description Delete multiple existing users.
   */
  deleteUsers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Users
   * @description Update multiple users at the same time.
   */
  updateUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: components["schemas"]["Users"];
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a User
   * @description Retrieve a single user by unique identifier.
   */
  getUser: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a User
   * @description Delete an existing user
   */
  deleteUser: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a User
   * @description Update an existing user
   */
  updateUser: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Users"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Invite User(s)
   * @description Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.
   */
  invite: {
    requestBody?: {
      content: {
        "application/json": {
          /** @description Email address or array of email addresses of the to-be-invited user(s). */
          email?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Accept User Invite
   * @description Accepts and enables an invited user using a JWT invitation token.
   */
  acceptInvite: {
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Accept invite token.
           * @example eyJh...KmUk
           */
          token?: string;
          /**
           * Format: password
           * @description Password of the user.
           * @example d1r3ctu5
           */
          password?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve Current User
   * @description Retrieve the currently authenticated user.
   */
  getMe: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update Current User
   * @description Update the currently authenticated user.
   */
  updateMe: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update Last Page
   * @description Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.
   */
  updateLastUsedPageMe: {
    requestBody?: {
      content: {
        "application/json": {
          /** @description Path of the page you used last. */
          last_page?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Enable 2FA
   * @description Enables two-factor authentication for the currently authenticated user.
   */
  meTfaEnable: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Disable 2FA
   * @description Disables two-factor authentication for the currently authenticated user.
   */
  meTfaDisable: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Presets
   * @description List the presets.
   */
  getPresets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        page?: components["parameters"]["Page"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create a Preset
   * @description Create a new preset.
   */
  createPreset: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description What collection this collection preset is used for.
           * @example articles
           */
          collection: string;
          /**
           * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
           * @example Highly rated articles
           */
          title?: string;
          /**
           * @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.
           * @example null
           */
          role?: string;
          /** @description What the user searched for in search/filter in the header bar. */
          search?: string;
          filters?: {
              /** @example aHKLAakdVghzD */
              key?: string;
              /** @example rating */
              field?: string;
              /** @example gte */
              operator?: string;
              /** @example 4.5 */
              value?: number;
            }[];
          /** @description Name of the view type that is used. */
          layout?: string;
          /** @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
          layout_query?: string;
          /** @description Options of the views. The properties in here are controlled by the layout. */
          layout_options?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Presets
   * @description Delete multiple existing presets.
   */
  deletePresets: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Presets
   * @description Update multiple presets at the same time.
   */
  updatePresets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          keys?: string[];
          data?: {
            /**
             * @description What collection this collection preset is used for.
             * @example articles
             */
            collection: string;
            /**
             * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
             * @example Highly rated articles
             */
            title?: string;
            /**
             * @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.
             * @example null
             */
            role?: string;
            /** @description What the user searched for in search/filter in the header bar. */
            search?: string;
            filters?: {
                /** @example aHKLAakdVghzD */
                key?: string;
                /** @example rating */
                field?: string;
                /** @example gte */
                operator?: string;
                /** @example 4.5 */
                value?: number;
              }[];
            /** @description Name of the view type that is used. */
            layout?: string;
            /** @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
            layout_query?: string;
            /** @description Options of the views. The properties in here are controlled by the layout. */
            layout_options?: string;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Preset
   * @description Retrieve a single preset by unique identifier.
   */
  getPreset: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete a Preset
   * @description Delete an existing preset.
   */
  deletePreset: {
    parameters: {
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update a Preset
   * @description Update an existing preset.
   */
  updatePreset: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description What collection this collection preset is used for.
           * @example articles
           */
          collection: string;
          /**
           * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
           * @example Highly rated articles
           */
          title?: string;
          /** @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role. */
          role?: number;
          /** @description What the user searched for in search/filter in the header bar. */
          search_query?: string;
          filters?: {
              /** @example rating */
              field?: string;
              /** @example gte */
              operator?: string;
              /** @example 4.5 */
              value?: number;
            }[];
          /** @description Name of the view type that is used. Defaults to tabular. */
          view_type?: string;
          /** @description View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
          view_query?: string;
          /** @description Options of the views. The properties in here are controlled by the layout. */
          view_options?: string;
          /** @description Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages. */
          translation?: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List Revisions
   * @description List the revisions.
   */
  getRevisions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Revisions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Revision
   * @description Retrieve a single revision by unique identifier.
   */
  getRevision: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Revisions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Folders
   * @description List the folders.
   */
  getFolders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Folder
   * @description Create a new folder.
   */
  createFolder: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Name of the folder.
           * @example Amsterdam
           */
          name: string;
          /** @description Unique identifier of the parent folder. This allows for nested folders. */
          parent?: number;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Folders
   * @description Delete multiple existing folders.
   */
  deleteFolders: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Folders
   * @description Update multiple folders at the same time.
   */
  updateFolders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description Name of the folder.
             * @example Amsterdam
             */
            name: string;
            /** @description Unique identifier of the parent folder. This allows for nested folders. */
            parent?: number;
          };
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Folder
   * @description Retrieve a single folder by unique identifier.
   */
  getFolder: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Folder
   * @description Delete an existing folder
   */
  deleteFolder: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Folder
   * @description Update an existing folder
   */
  updateFolder: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Name of the folder. Can't be null or empty. */
          name?: string;
          /**
           * @description Unique identifier of the parent folder. This allows for nested folders.
           * @example 3
           */
          parent?: number;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Files
   * @description List the files.
   */
  getFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create a File
   * @description Create a new file
   */
  createFile: {
    requestBody?: {
      content: {
        "application/json": {
          data?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Files
   * @description Delete multiple existing files.
   */
  deleteFiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Files
   * @description Update multiple files at the same time.
   */
  updateFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: {
            data?: string;
          };
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Files
   * @description Retrieve a single file by unique identifier.
   */
  getFile: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete a File
   * @description Delete an existing file.
   */
  deleteFile: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update a File
   * @description Update an existing file, and/or replace it's file contents.
   */
  updateFile: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "multipart/data": {
          /**
           * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
           * @example User Avatar
           */
          title?: string;
          /** @description Preferred filename when file is downloaded. */
          filename_download?: string;
          /** @description Description for the file. */
          description?: string | null;
          /**
           * @description Virtual folder where this file resides in.
           * @example null
           */
          folder?: string | components["schemas"]["Folders"] | null;
          /** @description Tags for the file. Is automatically populated based on Exif data for images. */
          tags?: string[] | null;
          /**
           * Format: binary
           * @description File contents.
           */
          file: unknown;
        };
        "application/json": {
          /**
           * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
           * @example User Avatar
           */
          title?: string;
          /** @description Preferred filename when file is downloaded. */
          filename_download?: string;
          /** @description Description for the file. */
          description?: string | null;
          /**
           * @description Virtual folder where this file resides in.
           * @example null
           */
          folder?: string | components["schemas"]["Folders"] | null;
          /** @description Tags for the file. Is automatically populated based on Exif data for images. */
          tags?: string[] | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List Items
   * @description List the bots_user_active_sessions items.
   */
  readItemsBotsUserActiveSessions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsUserActiveSessions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_user_active_sessions item.
   */
  createItemsBotsUserActiveSessions: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsUserActiveSessions"][] | components["schemas"]["ItemsBotsUserActiveSessions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsUserActiveSessions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_user_active_sessions items.
   */
  deleteItemsBotsUserActiveSessions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_user_active_sessions items at the same time.
   */
  updateItemsBotsUserActiveSessions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsUserActiveSessions"][] | components["schemas"]["ItemsBotsUserActiveSessions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsUserActiveSessions"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_user_active_sessions item by unique identifier.
   */
  readSingleItemsBotsUserActiveSessions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsUserActiveSessions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_user_active_sessions item.
   */
  deleteSingleItemsBotsUserActiveSessions: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_user_active_sessions item.
   */
  updateSingleItemsBotsUserActiveSessions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsUserActiveSessions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsUserActiveSessions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Permissions
   * @description List all permissions.
   */
  getPermissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Permission
   * @description Create a new permission.
   */
  createPermission: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description What collection this permission applies to.
           * @example customers
           */
          collection?: string;
          /**
           * @description If the user can post comments.
           * @enum {string}
           */
          comment?: "none" | "create" | "update" | "full";
          /**
           * @description If the user can create items.
           * @enum {string}
           */
          create?: "none" | "full";
          /**
           * @description If the user can update items.
           * @enum {string}
           */
          delete?: "none" | "mine" | "role" | "full";
          /**
           * @description If the user is required to leave a comment explaining what was changed.
           * @enum {string}
           */
          explain?: "none" | "create" | "update" | "always";
          /**
           * @description If the user can read items.
           * @enum {string}
           */
          read?: "none" | "mine" | "role" | "full";
          /**
           * @description Unique identifier of the role this permission applies to.
           * @example 3
           */
          role?: number;
          /**
           * @description Explicitly denies read access for specific fields.
           * @example [
           *   "featured_image"
           * ]
           */
          read_field_blacklist?: string[];
          /** @description What status this permission applies to. */
          status?: string;
          /** @description Explicitly denies specific statuses to be used. */
          status_blacklist?: string[];
          /**
           * @description If the user can update items.
           * @enum {string}
           */
          update?: "none" | "mine" | "role" | "full";
          /** @description Explicitly denies write access for specific fields. */
          write_field_blacklist?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Permissions
   * @description Delete multiple existing permissions.
   */
  deletePermissions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Permissions
   * @description Update multiple permissions at the same time.
   */
  updatePermissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          keys?: string[];
          data?: {
            /**
             * @description What collection this permission applies to.
             * @example customers
             */
            collection?: string;
            /**
             * @description If the user can post comments.
             * @enum {string}
             */
            comment?: "none" | "create" | "update" | "full";
            /**
             * @description If the user can create items.
             * @enum {string}
             */
            create?: "none" | "full";
            /**
             * @description If the user can update items.
             * @enum {string}
             */
            delete?: "none" | "mine" | "role" | "full";
            /**
             * @description If the user is required to leave a comment explaining what was changed.
             * @enum {string}
             */
            explain?: "none" | "create" | "update" | "always";
            /**
             * @description If the user can read items.
             * @enum {string}
             */
            read?: "none" | "mine" | "role" | "full";
            /**
             * @description Unique identifier of the role this permission applies to.
             * @example 3
             */
            role?: number;
            /**
             * @description Explicitly denies read access for specific fields.
             * @example [
             *   "featured_image"
             * ]
             */
            read_field_blacklist?: string[];
            /** @description What status this permission applies to. */
            status?: string;
            /** @description Explicitly denies specific statuses to be used. */
            status_blacklist?: string[];
            /**
             * @description If the user can update items.
             * @enum {string}
             */
            update?: "none" | "mine" | "role" | "full";
            /** @description Explicitly denies write access for specific fields. */
            write_field_blacklist?: string[];
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List My Permissions
   * @description List the permissions that apply to the current user.
   */
  getMyPermissions: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Permission
   * @description Retrieve a single permissions object by unique identifier.
   */
  getPermission: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Permission
   * @description Delete an existing permission
   */
  deletePermission: {
    parameters: {
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Permission
   * @description Update an existing permission
   */
  updatePermission: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description What collection this permission applies to. */
          collection?: Record<string, never>;
          /**
           * @description If the user can post comments. `full`.
           * @enum {string}
           */
          comment?: "none" | "create" | "update";
          /**
           * @description If the user can create items.
           * @enum {string}
           */
          create?: "none" | "full";
          /**
           * @description If the user can update items.
           * @enum {string}
           */
          delete?: "none" | "mine" | "role" | "full";
          /**
           * @description If the user is required to leave a comment explaining what was changed.
           * @enum {string}
           */
          explain?: "none" | "create" | "update" | "always";
          /**
           * @description If the user can read items.
           * @enum {string}
           */
          read?: "none" | "mine" | "role" | "full";
          /** @description Explicitly denies read access for specific fields. */
          read_field_blacklist?: Record<string, never>;
          /** @description Unique identifier of the role this permission applies to. */
          role?: Record<string, never>;
          /** @description What status this permission applies to. */
          status?: Record<string, never>;
          /** @description Explicitly denies specific statuses to be used. */
          status_blacklist?: Record<string, never>;
          /**
           * @description If the user can update items.
           * @enum {string}
           */
          update?: "none" | "mine" | "role" | "full";
          /** @description Explicitly denies write access for specific fields. */
          write_field_blacklist?: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List All Fields
   * @description Returns a list of the fields available in the project.
   */
  getFields: {
    parameters: {
      query?: {
        limit?: components["parameters"]["Limit"];
        sort?: components["parameters"]["Sort"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Fields in Collection
   * @description Returns a list of the fields available in the given collection.
   */
  getCollectionFields: {
    parameters: {
      query?: {
        sort?: components["parameters"]["Sort"];
      };
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create Field in Collection
   * @description Create a new field in a given collection.
   */
  createField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Unique name of the field. Field name is unique within the collection.
           * @example id
           */
          field: string;
          /**
           * @description Directus specific data type. Used to cast values in the API.
           * @example integer
           */
          type: string;
          /** @description The schema info. */
          schema?: {
            /**
             * @description The name of the field.
             * @example title
             */
            name?: string;
            /**
             * @description The collection of the field.
             * @example posts
             */
            table?: string;
            /**
             * @description The type of the field.
             * @example string
             */
            type?: string;
            /**
             * @description The default value of the field.
             * @example null
             */
            default_value?: string | null;
            /**
             * @description The max length of the field.
             * @example null
             */
            max_length?: number | null;
            /**
             * @description If the field is nullable.
             * @example false
             */
            is_nullable?: boolean;
            /**
             * @description If the field is primary key.
             * @example false
             */
            is_primary_key?: boolean;
            /**
             * @description If the field has auto increment.
             * @example false
             */
            has_auto_increment?: boolean;
            /**
             * @description Related column from the foreign key constraint.
             * @example null
             */
            foreign_key_column?: string | null;
            /**
             * @description Related table from the foreign key constraint.
             * @example null
             */
            foreign_key_table?: string | null;
            /**
             * @description Comment as saved in the database.
             * @example null
             */
            comment?: string | null;
            /**
             * @description Database schema (pg only).
             * @example public
             */
            schema?: string;
            /**
             * @description Related schema from the foreign key constraint (pg only).
             * @example null
             */
            foreign_key_schema?: string | null;
          };
          /** @description The meta info. */
          meta?: ({
            /**
             * @description Unique identifier for the field in the `directus_fields` collection.
             * @example 3
             */
            id?: number;
            /**
             * @description Unique name of the collection this field is in.
             * @example posts
             */
            collection?: string;
            /**
             * @description Unique name of the field. Field name is unique within the collection.
             * @example title
             */
            field?: string;
            /**
             * @description Transformation flag for field
             * @example null
             */
            special?: string[] | null;
            /**
             * @description What interface is used in the admin app to edit the value for this field.
             * @example primary-key
             */
            "system-interface"?: string | null;
            /**
             * @description Options for the interface that's used. This format is based on the individual interface.
             * @example null
             */
            options?: Record<string, unknown> | null;
            /**
             * @description What display is used in the admin app to display the value for this field.
             * @example null
             */
            display?: string | null;
            /**
             * @description Options for the display that's used. This format is based on the individual display.
             * @example null
             */
            display_options?: Record<string, unknown> | null;
            /**
             * @description If the field can be altered by the end user. Directus system fields have this value set to `true`.
             * @example true
             */
            locked?: boolean;
            /**
             * @description Prevents the user from editing the value in the field.
             * @example false
             */
            readonly?: boolean;
            /**
             * @description If this field should be hidden.
             * @example true
             */
            hidden?: boolean;
            /**
             * @description Sort order of this field on the edit page of the admin app.
             * @example 1
             */
            sort?: number | null;
            /**
             * @description Width of the field on the edit form.
             * @example null
             * @enum {string|null}
             */
            width?: "half" | "half-left" | "half-right" | "full" | "fill" | null;
            /**
             * @description What field group this field is part of.
             * @example null
             */
            group?: number | null;
            /**
             * @description Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.
             * @example null
             */
            translation?: Record<string, unknown> | null;
            /**
             * @description A user provided note for the field. Will be rendered alongside the interface on the edit page.
             * @example
             */
            note?: string | null;
          }) | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Field
   * @description Retrieves the details of a single field in a given collection.
   */
  getCollectionField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
        /** @description Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Field
   * @description Delete an existing field.
   */
  deleteField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
        /** @description Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Field
   * @description Update an existing field.
   */
  updateField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
        /** @description Unique identifier of the field. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Unique name of the field. Field name is unique within the collection.
           * @example id
           */
          field?: string;
          /**
           * @description Directus specific data type. Used to cast values in the API.
           * @example integer
           */
          type?: string;
          /** @description The schema info. */
          schema?: {
            /**
             * @description The name of the field.
             * @example title
             */
            name?: string;
            /**
             * @description The collection of the field.
             * @example posts
             */
            table?: string;
            /**
             * @description The type of the field.
             * @example string
             */
            type?: string;
            /**
             * @description The default value of the field.
             * @example null
             */
            default_value?: string | null;
            /**
             * @description The max length of the field.
             * @example null
             */
            max_length?: number | null;
            /**
             * @description If the field is nullable.
             * @example false
             */
            is_nullable?: boolean;
            /**
             * @description If the field is primary key.
             * @example false
             */
            is_primary_key?: boolean;
            /**
             * @description If the field has auto increment.
             * @example false
             */
            has_auto_increment?: boolean;
            /**
             * @description Related column from the foreign key constraint.
             * @example null
             */
            foreign_key_column?: string | null;
            /**
             * @description Related table from the foreign key constraint.
             * @example null
             */
            foreign_key_table?: string | null;
            /**
             * @description Comment as saved in the database.
             * @example null
             */
            comment?: string | null;
            /**
             * @description Database schema (pg only).
             * @example public
             */
            schema?: string;
            /**
             * @description Related schema from the foreign key constraint (pg only).
             * @example null
             */
            foreign_key_schema?: string | null;
          };
          /** @description The meta info. */
          meta?: ({
            /**
             * @description Unique identifier for the field in the `directus_fields` collection.
             * @example 3
             */
            id?: number;
            /**
             * @description Unique name of the collection this field is in.
             * @example posts
             */
            collection?: string;
            /**
             * @description Unique name of the field. Field name is unique within the collection.
             * @example title
             */
            field?: string;
            /**
             * @description Transformation flag for field
             * @example null
             */
            special?: string[] | null;
            /**
             * @description What interface is used in the admin app to edit the value for this field.
             * @example primary-key
             */
            "system-interface"?: string | null;
            /**
             * @description Options for the interface that's used. This format is based on the individual interface.
             * @example null
             */
            options?: Record<string, unknown> | null;
            /**
             * @description What display is used in the admin app to display the value for this field.
             * @example null
             */
            display?: string | null;
            /**
             * @description Options for the display that's used. This format is based on the individual display.
             * @example null
             */
            display_options?: Record<string, unknown> | null;
            /**
             * @description If the field can be altered by the end user. Directus system fields have this value set to `true`.
             * @example true
             */
            locked?: boolean;
            /**
             * @description Prevents the user from editing the value in the field.
             * @example false
             */
            readonly?: boolean;
            /**
             * @description If this field should be hidden.
             * @example true
             */
            hidden?: boolean;
            /**
             * @description Sort order of this field on the edit page of the admin app.
             * @example 1
             */
            sort?: number | null;
            /**
             * @description Width of the field on the edit form.
             * @example null
             * @enum {string|null}
             */
            width?: "half" | "half-left" | "half-right" | "full" | "fill" | null;
            /**
             * @description What field group this field is part of.
             * @example null
             */
            group?: number | null;
            /**
             * @description Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.
             * @example null
             */
            translation?: Record<string, unknown> | null;
            /**
             * @description A user provided note for the field. Will be rendered alongside the interface on the edit page.
             * @example
             */
            note?: string | null;
          }) | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Relations
   * @description List the relations.
   */
  getRelations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Relation
   * @description Create a new relation.
   */
  createRelation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Collection that has the field that holds the foreign key.
           * @example articles
           */
          collection_many?: string;
          /**
           * @description Collection on the _one_ side of the relationship.
           * @example authors
           */
          collection_one?: string;
          /**
           * @description Foreign key. Field that holds the primary key of the related collection.
           * @example author
           */
          field_many?: string;
          /**
           * @description Alias column that serves as the _one_ side of the relationship.
           * @example books
           */
          field_one?: string;
          /** @description Field on the junction table that holds the primary key of the related collection. */
          junction_field?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Relation
   * @description Retrieve a single relation by unique identifier.
   */
  getRelation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Relation
   * @description Delete an existing relation.
   */
  deleteRelation: {
    parameters: {
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Relation
   * @description Update an existing relation
   */
  updateRelation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Collection that has the field that holds the foreign key. */
          collection_many?: string;
          /** @description Collection on the _one_ side of the relationship. */
          collection_one?: string;
          /** @description Foreign key. Field that holds the primary key of the related collection. */
          field_many?: string;
          /**
           * @description Alias column that serves as the _one_ side of the relationship.
           * @example books
           */
          field_one?: string;
          /** @description Field on the junction table that holds the primary key of the related collection. */
          junction_field?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Activity Actions
   * @description Returns a list of activity actions.
   */
  getActivities: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve an Activity Action
   * @description Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information.
   */
  getActivity: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_enabled_users items.
   */
  readItemsBotsEnabledUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsEnabledUsers"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_enabled_users item.
   */
  createItemsBotsEnabledUsers: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsEnabledUsers"][] | components["schemas"]["ItemsBotsEnabledUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsEnabledUsers"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_enabled_users items.
   */
  deleteItemsBotsEnabledUsers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_enabled_users items at the same time.
   */
  updateItemsBotsEnabledUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsEnabledUsers"][] | components["schemas"]["ItemsBotsEnabledUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsEnabledUsers"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_enabled_users item by unique identifier.
   */
  readSingleItemsBotsEnabledUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsEnabledUsers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_enabled_users item.
   */
  deleteSingleItemsBotsEnabledUsers: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_enabled_users item.
   */
  updateSingleItemsBotsEnabledUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsEnabledUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsEnabledUsers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the page_liff_tokens items.
   */
  readItemsPageLiffTokens: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageLiffTokens"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new page_liff_tokens item.
   */
  createItemsPageLiffTokens: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPageLiffTokens"][] | components["schemas"]["ItemsPageLiffTokens"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageLiffTokens"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing page_liff_tokens items.
   */
  deleteItemsPageLiffTokens: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple page_liff_tokens items at the same time.
   */
  updateItemsPageLiffTokens: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPageLiffTokens"][] | components["schemas"]["ItemsPageLiffTokens"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageLiffTokens"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single page_liff_tokens item by unique identifier.
   */
  readSingleItemsPageLiffTokens: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageLiffTokens"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing page_liff_tokens item.
   */
  deleteSingleItemsPageLiffTokens: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing page_liff_tokens item.
   */
  updateSingleItemsPageLiffTokens: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPageLiffTokens"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageLiffTokens"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Webhooks
   * @description Get all webhooks.
   */
  getWebhooks: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Webhooks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Webhook
   * @description Create a new webhook.
   */
  createWebhook: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The name of the webhook.
           * @example create articles
           */
          name?: string;
          /**
           * @description Method used in the webhook.
           * @example POST
           */
          method?: string;
          /**
           * @description The url of the webhook.
           * @example null
           */
          url?: string;
          /**
           * @description The status of the webhook.
           * @example active
           */
          status?: string;
          /**
           * @description If yes, send the content of what was done
           * @example true
           */
          data?: boolean;
          /**
           * @description The actions that triggers this webhook.
           * @example null
           */
          actions?: unknown;
          /**
           * @description The collections that triggers this webhook.
           * @example null
           */
          "system-collections"?: unknown;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Webhooks
   * @description Delete multiple existing webhooks.
   */
  deleteWebhooks: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Webhooks
   * @description Update multiple webhooks at the same time.
   */
  updateWebhooks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description The name of the webhook.
             * @example create articles
             */
            name?: string;
            /**
             * @description Method used in the webhook.
             * @example POST
             */
            method?: string;
            /**
             * @description The url of the webhook.
             * @example null
             */
            url?: string;
            /**
             * @description The status of the webhook.
             * @example active
             */
            status?: string;
            /**
             * @description If yes, send the content of what was done
             * @example true
             */
            data?: boolean;
            /**
             * @description The actions that triggers this webhook.
             * @example null
             */
            actions?: unknown;
            /**
             * @description The collections that triggers this webhook.
             * @example null
             */
            "system-collections"?: unknown;
          };
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Webhooks"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Webhook
   * @description Retrieve a single webhook by unique identifier.
   */
  getWebhook: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Webhooks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Webhook
   * @description Delete an existing webhook
   */
  deleteWebhook: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Webhook
   * @description Update an existing webhook
   */
  updateWebhook: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The name of the webhook.
           * @example create articles
           */
          name?: string;
          /**
           * @description Method used in the webhook.
           * @example POST
           */
          method?: string;
          /**
           * @description The url of the webhook.
           * @example null
           */
          url?: string;
          /**
           * @description The status of the webhook.
           * @example active
           */
          status?: string;
          /**
           * @description If yes, send the content of what was done
           * @example true
           */
          data?: boolean;
          /**
           * @description The actions that triggers this webhook.
           * @example null
           */
          actions?: unknown;
          /**
           * @description The collections that triggers this webhook.
           * @example null
           */
          "system-collections"?: unknown;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Flows
   * @description Get all flows.
   */
  getFlows: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Flow
   * @description Create a new flow.
   */
  createFlow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Flows"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Flows
   * @description Delete multiple existing flows.
   */
  deleteFlows: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Flows
   * @description Update multiple flows at the same time.
   */
  updateFlows: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: components["schemas"]["Flows"];
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Flow
   * @description Retrieve a single flow by unique identifier.
   */
  getFlow: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Flow
   * @description Delete an existing flow
   */
  deleteFlow: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Flow
   * @description Update an existing flow
   */
  updateFlow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Flows"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Operations
   * @description Get all operations.
   */
  getOperations: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create an Operation
   * @description Create a new operation.
   */
  createOperation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Operations
   * @description Delete multiple existing operations.
   */
  deleteOperations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Operations
   * @description Update multiple operations at the same time.
   */
  updateOperations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: components["schemas"]["Operations"];
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Operation
   * @description Retrieve a single operation by unique identifier.
   */
  getOperation: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Operation
   * @description Delete an existing operation
   */
  deleteOperation: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Operation
   * @description Update an existing operation
   */
  updateOperation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve Settings
   * @description List the settings.
   */
  getSettings: {
    parameters: {
      query?: {
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Settings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update Settings
   * @description Update the settings
   */
  updateSetting: {
    requestBody?: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Settings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_products items.
   */
  readItemsSaasProducts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasProducts"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_products item.
   */
  createItemsSaasProducts: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasProducts"][] | components["schemas"]["ItemsSaasProducts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasProducts"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_products items.
   */
  deleteItemsSaasProducts: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_products items at the same time.
   */
  updateItemsSaasProducts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasProducts"][] | components["schemas"]["ItemsSaasProducts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasProducts"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_products item by unique identifier.
   */
  readSingleItemsSaasProducts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasProducts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_products item.
   */
  deleteSingleItemsSaasProducts: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_products item.
   */
  updateSingleItemsSaasProducts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasProducts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasProducts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_projects items.
   */
  readItemsSaasProjects: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasProjects"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_projects item.
   */
  createItemsSaasProjects: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasProjects"][] | components["schemas"]["ItemsSaasProjects"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasProjects"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_projects items.
   */
  deleteItemsSaasProjects: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_projects items at the same time.
   */
  updateItemsSaasProjects: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasProjects"][] | components["schemas"]["ItemsSaasProjects"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasProjects"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_projects item by unique identifier.
   */
  readSingleItemsSaasProjects: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasProjects"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_projects item.
   */
  deleteSingleItemsSaasProjects: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_projects item.
   */
  updateSingleItemsSaasProjects: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasProjects"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasProjects"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_logs items.
   */
  readItemsSaasLogs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasLogs"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_logs item.
   */
  createItemsSaasLogs: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasLogs"][] | components["schemas"]["ItemsSaasLogs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasLogs"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_logs items.
   */
  deleteItemsSaasLogs: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_logs items at the same time.
   */
  updateItemsSaasLogs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasLogs"][] | components["schemas"]["ItemsSaasLogs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasLogs"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_logs item by unique identifier.
   */
  readSingleItemsSaasLogs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasLogs"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_logs item.
   */
  deleteSingleItemsSaasLogs: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_logs item.
   */
  updateSingleItemsSaasLogs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasLogs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasLogs"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Extensions
   * @description List the installed extensions and their configuration in the project.
   */
  listExtensions: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Extensions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update an Extension
   * @description Update an existing extension.
   */
  updateExtensions: {
    parameters: {
      path: {
        name: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Directus metadata for the extension. Where the configuration for the extension in the current project is stored. */
          meta?: {
            /**
             * @description Whether or not the extension is enabled.
             * @example true
             */
            enabled?: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Extensions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Extension
   * @description Update an existing extension.
   */
  updateExtensionBundle: {
    parameters: {
      path: {
        bundle: string;
        name: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Directus metadata for the extension. Where the configuration for the extension in the current project is stored. */
          meta?: {
            /**
             * @description Whether or not the extension is enabled.
             * @example true
             */
            enabled?: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Extensions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_metrics items.
   */
  readItemsSaasMetrics: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasMetrics"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_metrics item.
   */
  createItemsSaasMetrics: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasMetrics"][] | components["schemas"]["ItemsSaasMetrics"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasMetrics"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_metrics items.
   */
  deleteItemsSaasMetrics: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_metrics items at the same time.
   */
  updateItemsSaasMetrics: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasMetrics"][] | components["schemas"]["ItemsSaasMetrics"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasMetrics"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_metrics item by unique identifier.
   */
  readSingleItemsSaasMetrics: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasMetrics"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_metrics item.
   */
  deleteSingleItemsSaasMetrics: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_metrics item.
   */
  updateSingleItemsSaasMetrics: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasMetrics"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasMetrics"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Content Versions
   * @description Get all Content Versions.
   */
  getContentVersions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create Multiple Content Versions
   * @description Create multiple new Content Versions.
   */
  createContentVersion: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Versions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Content Versions
   * @description Delete multiple existing Content Versions.
   */
  deleteContentVersions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Content Versions
   * @description Update multiple Content Versions at the same time.
   */
  updateContentVersions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: components["schemas"]["Versions"];
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Content Version
   * @description Retrieve a single Content Version by unique identifier.
   */
  getContentVersion: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Content Version
   * @description Delete an existing Content Version.
   */
  deleteContentVersion: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Content Version
   * @description Update an existing Content Version.
   */
  updateContentVersion: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Versions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Save to a Content Version
   * @description Save item changes to an existing Content Version.
   */
  saveContentVersion: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Compare a Content Version
   * @description Compare an existing Content Version with the main version of the item.
   */
  compareContentVersion: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Promote a Content Version
   * @description Pass the current hash of the main version of the item (obtained from the `compare` endpoint) along with an optional array of field names of which the values are to be promoted (by default, all fields are selected).
   */
  promoteContentVersion: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Hash of the main version of the item to be promoted. */
          mainHash?: string;
          /** @description Optional array of field names of which the values are to be promoted. */
          fields?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_events items.
   */
  readItemsSaasEvents: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasEvents"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_events item.
   */
  createItemsSaasEvents: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasEvents"][] | components["schemas"]["ItemsSaasEvents"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasEvents"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_events items.
   */
  deleteItemsSaasEvents: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_events items at the same time.
   */
  updateItemsSaasEvents: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasEvents"][] | components["schemas"]["ItemsSaasEvents"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasEvents"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_events item by unique identifier.
   */
  readSingleItemsSaasEvents: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasEvents"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_events item.
   */
  deleteSingleItemsSaasEvents: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_events item.
   */
  updateSingleItemsSaasEvents: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasEvents"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasEvents"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_inbox items.
   */
  readItemsSaasInbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasInbox"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_inbox item.
   */
  createItemsSaasInbox: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasInbox"][] | components["schemas"]["ItemsSaasInbox"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasInbox"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_inbox items.
   */
  deleteItemsSaasInbox: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_inbox items at the same time.
   */
  updateItemsSaasInbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasInbox"][] | components["schemas"]["ItemsSaasInbox"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasInbox"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_inbox item by unique identifier.
   */
  readSingleItemsSaasInbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasInbox"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_inbox item.
   */
  deleteSingleItemsSaasInbox: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_inbox item.
   */
  updateSingleItemsSaasInbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasInbox"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasInbox"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_teams_users items.
   */
  readItemsSaasTeamsUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeamsUsers"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_teams_users item.
   */
  createItemsSaasTeamsUsers: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTeamsUsers"][] | components["schemas"]["ItemsSaasTeamsUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeamsUsers"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_teams_users items.
   */
  deleteItemsSaasTeamsUsers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_teams_users items at the same time.
   */
  updateItemsSaasTeamsUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTeamsUsers"][] | components["schemas"]["ItemsSaasTeamsUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeamsUsers"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_teams_users item by unique identifier.
   */
  readSingleItemsSaasTeamsUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeamsUsers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_teams_users item.
   */
  deleteSingleItemsSaasTeamsUsers: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_teams_users item.
   */
  updateSingleItemsSaasTeamsUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTeamsUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeamsUsers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_teams items.
   */
  readItemsSaasTeams: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeams"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_teams item.
   */
  createItemsSaasTeams: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTeams"][] | components["schemas"]["ItemsSaasTeams"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeams"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_teams items.
   */
  deleteItemsSaasTeams: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_teams items at the same time.
   */
  updateItemsSaasTeams: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTeams"][] | components["schemas"]["ItemsSaasTeams"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeams"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_teams item by unique identifier.
   */
  readSingleItemsSaasTeams: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeams"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_teams item.
   */
  deleteSingleItemsSaasTeams: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_teams item.
   */
  updateSingleItemsSaasTeams: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTeams"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeams"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_tasks_files items.
   */
  readItemsSaasTasksFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTasksFiles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_tasks_files item.
   */
  createItemsSaasTasksFiles: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTasksFiles"][] | components["schemas"]["ItemsSaasTasksFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTasksFiles"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_tasks_files items.
   */
  deleteItemsSaasTasksFiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_tasks_files items at the same time.
   */
  updateItemsSaasTasksFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTasksFiles"][] | components["schemas"]["ItemsSaasTasksFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTasksFiles"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_tasks_files item by unique identifier.
   */
  readSingleItemsSaasTasksFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTasksFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_tasks_files item.
   */
  deleteSingleItemsSaasTasksFiles: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_tasks_files item.
   */
  updateSingleItemsSaasTasksFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTasksFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTasksFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_tasks items.
   */
  readItemsSaasTasks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTasks"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_tasks item.
   */
  createItemsSaasTasks: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTasks"][] | components["schemas"]["ItemsSaasTasks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTasks"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_tasks items.
   */
  deleteItemsSaasTasks: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_tasks items at the same time.
   */
  updateItemsSaasTasks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTasks"][] | components["schemas"]["ItemsSaasTasks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTasks"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_tasks item by unique identifier.
   */
  readSingleItemsSaasTasks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTasks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_tasks item.
   */
  deleteSingleItemsSaasTasks: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_tasks item.
   */
  updateSingleItemsSaasTasks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTasks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTasks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the api_logs items.
   */
  readItemsAPILogs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAPILogs"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new api_logs item.
   */
  createItemsAPILogs: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAPILogs"][] | components["schemas"]["ItemsAPILogs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAPILogs"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing api_logs items.
   */
  deleteItemsAPILogs: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple api_logs items at the same time.
   */
  updateItemsAPILogs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAPILogs"][] | components["schemas"]["ItemsAPILogs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAPILogs"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single api_logs item by unique identifier.
   */
  readSingleItemsAPILogs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAPILogs"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing api_logs item.
   */
  deleteSingleItemsAPILogs: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing api_logs item.
   */
  updateSingleItemsAPILogs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAPILogs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAPILogs"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_directus_users items.
   */
  readItemsBotsDirectusUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDirectusUsers"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_directus_users item.
   */
  createItemsBotsDirectusUsers: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDirectusUsers"][] | components["schemas"]["ItemsBotsDirectusUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDirectusUsers"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_directus_users items.
   */
  deleteItemsBotsDirectusUsers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_directus_users items at the same time.
   */
  updateItemsBotsDirectusUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDirectusUsers"][] | components["schemas"]["ItemsBotsDirectusUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDirectusUsers"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_directus_users item by unique identifier.
   */
  readSingleItemsBotsDirectusUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDirectusUsers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_directus_users item.
   */
  deleteSingleItemsBotsDirectusUsers: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_directus_users item.
   */
  updateSingleItemsBotsDirectusUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDirectusUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDirectusUsers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_knowledges items.
   */
  readItemsBotsKnowledges: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledges"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_knowledges item.
   */
  createItemsBotsKnowledges: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsKnowledges"][] | components["schemas"]["ItemsBotsKnowledges"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledges"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_knowledges items.
   */
  deleteItemsBotsKnowledges: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_knowledges items at the same time.
   */
  updateItemsBotsKnowledges: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsKnowledges"][] | components["schemas"]["ItemsBotsKnowledges"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledges"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_knowledges item by unique identifier.
   */
  readSingleItemsBotsKnowledges: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledges"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_knowledges item.
   */
  deleteSingleItemsBotsKnowledges: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_knowledges item.
   */
  updateSingleItemsBotsKnowledges: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsKnowledges"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledges"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_prices items.
   */
  readItemsSaasPrices: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasPrices"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_prices item.
   */
  createItemsSaasPrices: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasPrices"][] | components["schemas"]["ItemsSaasPrices"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasPrices"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_prices items.
   */
  deleteItemsSaasPrices: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_prices items at the same time.
   */
  updateItemsSaasPrices: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasPrices"][] | components["schemas"]["ItemsSaasPrices"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasPrices"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_prices item by unique identifier.
   */
  readSingleItemsSaasPrices: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasPrices"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_prices item.
   */
  deleteSingleItemsSaasPrices: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_prices item.
   */
  updateSingleItemsSaasPrices: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasPrices"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasPrices"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_subscriptions items.
   */
  readItemsSaasSubscriptions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasSubscriptions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_subscriptions item.
   */
  createItemsSaasSubscriptions: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasSubscriptions"][] | components["schemas"]["ItemsSaasSubscriptions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasSubscriptions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_subscriptions items.
   */
  deleteItemsSaasSubscriptions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_subscriptions items at the same time.
   */
  updateItemsSaasSubscriptions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasSubscriptions"][] | components["schemas"]["ItemsSaasSubscriptions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasSubscriptions"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_subscriptions item by unique identifier.
   */
  readSingleItemsSaasSubscriptions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasSubscriptions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_subscriptions item.
   */
  deleteSingleItemsSaasSubscriptions: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_subscriptions item.
   */
  updateSingleItemsSaasSubscriptions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasSubscriptions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasSubscriptions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_logs items.
   */
  readItemsBotsLogs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsLogs"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_logs item.
   */
  createItemsBotsLogs: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsLogs"][] | components["schemas"]["ItemsBotsLogs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsLogs"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_logs items.
   */
  deleteItemsBotsLogs: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_logs items at the same time.
   */
  updateItemsBotsLogs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsLogs"][] | components["schemas"]["ItemsBotsLogs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsLogs"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_logs item by unique identifier.
   */
  readSingleItemsBotsLogs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsLogs"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_logs item.
   */
  deleteSingleItemsBotsLogs: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_logs item.
   */
  updateSingleItemsBotsLogs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsLogs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsLogs"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages_liff_page items.
   */
  readItemsPagesLiffPage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffPage"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages_liff_page item.
   */
  createItemsPagesLiffPage: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffPage"][] | components["schemas"]["ItemsPagesLiffPage"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffPage"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages_liff_page items.
   */
  deleteItemsPagesLiffPage: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages_liff_page items at the same time.
   */
  updateItemsPagesLiffPage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffPage"][] | components["schemas"]["ItemsPagesLiffPage"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffPage"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages_liff_page item by unique identifier.
   */
  readSingleItemsPagesLiffPage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffPage"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages_liff_page item.
   */
  deleteSingleItemsPagesLiffPage: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages_liff_page item.
   */
  updateSingleItemsPagesLiffPage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffPage"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffPage"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages_liff items.
   */
  readItemsPagesLiff: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiff"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages_liff item.
   */
  createItemsPagesLiff: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiff"][] | components["schemas"]["ItemsPagesLiff"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiff"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages_liff items.
   */
  deleteItemsPagesLiff: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages_liff items at the same time.
   */
  updateItemsPagesLiff: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiff"][] | components["schemas"]["ItemsPagesLiff"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiff"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages_liff item by unique identifier.
   */
  readSingleItemsPagesLiff: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiff"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages_liff item.
   */
  deleteSingleItemsPagesLiff: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages_liff item.
   */
  updateSingleItemsPagesLiff: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiff"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiff"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the channels items.
   */
  readItemsChannels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannels"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new channels item.
   */
  createItemsChannels: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannels"][] | components["schemas"]["ItemsChannels"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannels"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing channels items.
   */
  deleteItemsChannels: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple channels items at the same time.
   */
  updateItemsChannels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannels"][] | components["schemas"]["ItemsChannels"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannels"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single channels item by unique identifier.
   */
  readSingleItemsChannels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannels"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing channels item.
   */
  deleteSingleItemsChannels: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing channels item.
   */
  updateSingleItemsChannels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannels"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannels"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the channels_datasets items.
   */
  readItemsChannelsDatasets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelsDatasets"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new channels_datasets item.
   */
  createItemsChannelsDatasets: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelsDatasets"][] | components["schemas"]["ItemsChannelsDatasets"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelsDatasets"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing channels_datasets items.
   */
  deleteItemsChannelsDatasets: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple channels_datasets items at the same time.
   */
  updateItemsChannelsDatasets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelsDatasets"][] | components["schemas"]["ItemsChannelsDatasets"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelsDatasets"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single channels_datasets item by unique identifier.
   */
  readSingleItemsChannelsDatasets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelsDatasets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing channels_datasets item.
   */
  deleteSingleItemsChannelsDatasets: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing channels_datasets item.
   */
  updateSingleItemsChannelsDatasets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelsDatasets"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelsDatasets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the channels_bots items.
   */
  readItemsChannelsBots: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelsBots"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new channels_bots item.
   */
  createItemsChannelsBots: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelsBots"][] | components["schemas"]["ItemsChannelsBots"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelsBots"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing channels_bots items.
   */
  deleteItemsChannelsBots: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple channels_bots items at the same time.
   */
  updateItemsChannelsBots: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelsBots"][] | components["schemas"]["ItemsChannelsBots"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelsBots"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single channels_bots item by unique identifier.
   */
  readSingleItemsChannelsBots: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelsBots"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing channels_bots item.
   */
  deleteSingleItemsChannelsBots: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing channels_bots item.
   */
  updateSingleItemsChannelsBots: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelsBots"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelsBots"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_commission_rules items.
   */
  readItemsSaasCommissionRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCommissionRules"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_commission_rules item.
   */
  createItemsSaasCommissionRules: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCommissionRules"][] | components["schemas"]["ItemsSaasCommissionRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCommissionRules"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_commission_rules items.
   */
  deleteItemsSaasCommissionRules: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_commission_rules items at the same time.
   */
  updateItemsSaasCommissionRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCommissionRules"][] | components["schemas"]["ItemsSaasCommissionRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCommissionRules"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_commission_rules item by unique identifier.
   */
  readSingleItemsSaasCommissionRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCommissionRules"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_commission_rules item.
   */
  deleteSingleItemsSaasCommissionRules: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_commission_rules item.
   */
  updateSingleItemsSaasCommissionRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCommissionRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCommissionRules"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the ad_sets items.
   */
  readItemsAdSets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdSets"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new ad_sets item.
   */
  createItemsAdSets: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdSets"][] | components["schemas"]["ItemsAdSets"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdSets"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing ad_sets items.
   */
  deleteItemsAdSets: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple ad_sets items at the same time.
   */
  updateItemsAdSets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdSets"][] | components["schemas"]["ItemsAdSets"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdSets"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single ad_sets item by unique identifier.
   */
  readSingleItemsAdSets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdSets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing ad_sets item.
   */
  deleteSingleItemsAdSets: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing ad_sets item.
   */
  updateSingleItemsAdSets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdSets"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdSets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_prices_translations items.
   */
  readItemsSaasPricesTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasPricesTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_prices_translations item.
   */
  createItemsSaasPricesTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasPricesTranslations"][] | components["schemas"]["ItemsSaasPricesTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasPricesTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_prices_translations items.
   */
  deleteItemsSaasPricesTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_prices_translations items at the same time.
   */
  updateItemsSaasPricesTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasPricesTranslations"][] | components["schemas"]["ItemsSaasPricesTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasPricesTranslations"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_prices_translations item by unique identifier.
   */
  readSingleItemsSaasPricesTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasPricesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_prices_translations item.
   */
  deleteSingleItemsSaasPricesTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_prices_translations item.
   */
  updateSingleItemsSaasPricesTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasPricesTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasPricesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the ad_performance items.
   */
  readItemsAdPerformance: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdPerformance"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new ad_performance item.
   */
  createItemsAdPerformance: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdPerformance"][] | components["schemas"]["ItemsAdPerformance"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdPerformance"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing ad_performance items.
   */
  deleteItemsAdPerformance: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple ad_performance items at the same time.
   */
  updateItemsAdPerformance: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdPerformance"][] | components["schemas"]["ItemsAdPerformance"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdPerformance"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single ad_performance item by unique identifier.
   */
  readSingleItemsAdPerformance: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdPerformance"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing ad_performance item.
   */
  deleteSingleItemsAdPerformance: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing ad_performance item.
   */
  updateSingleItemsAdPerformance: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdPerformance"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdPerformance"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the ai_rules items.
   */
  readItemsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAIRules"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new ai_rules item.
   */
  createItemsAIRules: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAIRules"][] | components["schemas"]["ItemsAIRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAIRules"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing ai_rules items.
   */
  deleteItemsAIRules: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple ai_rules items at the same time.
   */
  updateItemsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAIRules"][] | components["schemas"]["ItemsAIRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAIRules"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single ai_rules item by unique identifier.
   */
  readSingleItemsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAIRules"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing ai_rules item.
   */
  deleteSingleItemsAIRules: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing ai_rules item.
   */
  updateSingleItemsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAIRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAIRules"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_webinars items.
   */
  readItemsSaasWebinars: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasWebinars"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_webinars item.
   */
  createItemsSaasWebinars: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasWebinars"][] | components["schemas"]["ItemsSaasWebinars"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasWebinars"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_webinars items.
   */
  deleteItemsSaasWebinars: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_webinars items at the same time.
   */
  updateItemsSaasWebinars: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasWebinars"][] | components["schemas"]["ItemsSaasWebinars"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasWebinars"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_webinars item by unique identifier.
   */
  readSingleItemsSaasWebinars: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasWebinars"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_webinars item.
   */
  deleteSingleItemsSaasWebinars: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_webinars item.
   */
  updateSingleItemsSaasWebinars: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasWebinars"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasWebinars"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the rule_executions items.
   */
  readItemsRuleExecutions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRuleExecutions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new rule_executions item.
   */
  createItemsRuleExecutions: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRuleExecutions"][] | components["schemas"]["ItemsRuleExecutions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRuleExecutions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing rule_executions items.
   */
  deleteItemsRuleExecutions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple rule_executions items at the same time.
   */
  updateItemsRuleExecutions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRuleExecutions"][] | components["schemas"]["ItemsRuleExecutions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRuleExecutions"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single rule_executions item by unique identifier.
   */
  readSingleItemsRuleExecutions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRuleExecutions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing rule_executions item.
   */
  deleteSingleItemsRuleExecutions: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing rule_executions item.
   */
  updateSingleItemsRuleExecutions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRuleExecutions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRuleExecutions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the campaigns_ai_rules items.
   */
  readItemsCampaignsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaignsAIRules"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new campaigns_ai_rules item.
   */
  createItemsCampaignsAIRules: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCampaignsAIRules"][] | components["schemas"]["ItemsCampaignsAIRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaignsAIRules"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing campaigns_ai_rules items.
   */
  deleteItemsCampaignsAIRules: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple campaigns_ai_rules items at the same time.
   */
  updateItemsCampaignsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCampaignsAIRules"][] | components["schemas"]["ItemsCampaignsAIRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaignsAIRules"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single campaigns_ai_rules item by unique identifier.
   */
  readSingleItemsCampaignsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaignsAIRules"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing campaigns_ai_rules item.
   */
  deleteSingleItemsCampaignsAIRules: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing campaigns_ai_rules item.
   */
  updateSingleItemsCampaignsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCampaignsAIRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaignsAIRules"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the ad_sets_ai_rules items.
   */
  readItemsAdSetsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdSetsAIRules"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new ad_sets_ai_rules item.
   */
  createItemsAdSetsAIRules: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdSetsAIRules"][] | components["schemas"]["ItemsAdSetsAIRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdSetsAIRules"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing ad_sets_ai_rules items.
   */
  deleteItemsAdSetsAIRules: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple ad_sets_ai_rules items at the same time.
   */
  updateItemsAdSetsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdSetsAIRules"][] | components["schemas"]["ItemsAdSetsAIRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdSetsAIRules"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single ad_sets_ai_rules item by unique identifier.
   */
  readSingleItemsAdSetsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdSetsAIRules"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing ad_sets_ai_rules item.
   */
  deleteSingleItemsAdSetsAIRules: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing ad_sets_ai_rules item.
   */
  updateSingleItemsAdSetsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdSetsAIRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdSetsAIRules"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the ads_ai_rules items.
   */
  readItemsAdsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdsAIRules"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new ads_ai_rules item.
   */
  createItemsAdsAIRules: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdsAIRules"][] | components["schemas"]["ItemsAdsAIRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdsAIRules"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing ads_ai_rules items.
   */
  deleteItemsAdsAIRules: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple ads_ai_rules items at the same time.
   */
  updateItemsAdsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdsAIRules"][] | components["schemas"]["ItemsAdsAIRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdsAIRules"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single ads_ai_rules item by unique identifier.
   */
  readSingleItemsAdsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdsAIRules"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing ads_ai_rules item.
   */
  deleteSingleItemsAdsAIRules: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing ads_ai_rules item.
   */
  updateSingleItemsAdsAIRules: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdsAIRules"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdsAIRules"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the voucher_groups items.
   */
  readItemsVoucherGroups: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherGroups"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new voucher_groups item.
   */
  createItemsVoucherGroups: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoucherGroups"][] | components["schemas"]["ItemsVoucherGroups"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherGroups"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing voucher_groups items.
   */
  deleteItemsVoucherGroups: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple voucher_groups items at the same time.
   */
  updateItemsVoucherGroups: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoucherGroups"][] | components["schemas"]["ItemsVoucherGroups"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherGroups"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single voucher_groups item by unique identifier.
   */
  readSingleItemsVoucherGroups: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherGroups"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing voucher_groups item.
   */
  deleteSingleItemsVoucherGroups: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing voucher_groups item.
   */
  updateSingleItemsVoucherGroups: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoucherGroups"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherGroups"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the ad_ads items.
   */
  readItemsAdAds: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdAds"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new ad_ads item.
   */
  createItemsAdAds: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdAds"][] | components["schemas"]["ItemsAdAds"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdAds"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing ad_ads items.
   */
  deleteItemsAdAds: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple ad_ads items at the same time.
   */
  updateItemsAdAds: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdAds"][] | components["schemas"]["ItemsAdAds"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdAds"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single ad_ads item by unique identifier.
   */
  readSingleItemsAdAds: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdAds"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing ad_ads item.
   */
  deleteSingleItemsAdAds: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing ad_ads item.
   */
  updateSingleItemsAdAds: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdAds"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdAds"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_referrals items.
   */
  readItemsSaasReferrals: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasReferrals"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_referrals item.
   */
  createItemsSaasReferrals: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasReferrals"][] | components["schemas"]["ItemsSaasReferrals"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasReferrals"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_referrals items.
   */
  deleteItemsSaasReferrals: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_referrals items at the same time.
   */
  updateItemsSaasReferrals: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasReferrals"][] | components["schemas"]["ItemsSaasReferrals"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasReferrals"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_referrals item by unique identifier.
   */
  readSingleItemsSaasReferrals: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasReferrals"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_referrals item.
   */
  deleteSingleItemsSaasReferrals: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_referrals item.
   */
  updateSingleItemsSaasReferrals: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasReferrals"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasReferrals"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_customers items.
   */
  readItemsSaasCustomers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCustomers"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_customers item.
   */
  createItemsSaasCustomers: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCustomers"][] | components["schemas"]["ItemsSaasCustomers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCustomers"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_customers items.
   */
  deleteItemsSaasCustomers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_customers items at the same time.
   */
  updateItemsSaasCustomers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCustomers"][] | components["schemas"]["ItemsSaasCustomers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCustomers"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_customers item by unique identifier.
   */
  readSingleItemsSaasCustomers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCustomers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_customers item.
   */
  deleteSingleItemsSaasCustomers: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_customers item.
   */
  updateSingleItemsSaasCustomers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCustomers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCustomers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the ad_campaigns items.
   */
  readItemsAdCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdCampaigns"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new ad_campaigns item.
   */
  createItemsAdCampaigns: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdCampaigns"][] | components["schemas"]["ItemsAdCampaigns"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdCampaigns"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing ad_campaigns items.
   */
  deleteItemsAdCampaigns: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple ad_campaigns items at the same time.
   */
  updateItemsAdCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdCampaigns"][] | components["schemas"]["ItemsAdCampaigns"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdCampaigns"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single ad_campaigns item by unique identifier.
   */
  readSingleItemsAdCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdCampaigns"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing ad_campaigns item.
   */
  deleteSingleItemsAdCampaigns: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing ad_campaigns item.
   */
  updateSingleItemsAdCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdCampaigns"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdCampaigns"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_datasources items.
   */
  readItemsBotsDatasources: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasources"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_datasources item.
   */
  createItemsBotsDatasources: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDatasources"][] | components["schemas"]["ItemsBotsDatasources"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasources"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_datasources items.
   */
  deleteItemsBotsDatasources: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_datasources items at the same time.
   */
  updateItemsBotsDatasources: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDatasources"][] | components["schemas"]["ItemsBotsDatasources"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasources"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_datasources item by unique identifier.
   */
  readSingleItemsBotsDatasources: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasources"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_datasources item.
   */
  deleteSingleItemsBotsDatasources: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_datasources item.
   */
  updateSingleItemsBotsDatasources: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDatasources"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasources"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the ad_accounts items.
   */
  readItemsAdAccounts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdAccounts"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new ad_accounts item.
   */
  createItemsAdAccounts: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdAccounts"][] | components["schemas"]["ItemsAdAccounts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdAccounts"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing ad_accounts items.
   */
  deleteItemsAdAccounts: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple ad_accounts items at the same time.
   */
  updateItemsAdAccounts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdAccounts"][] | components["schemas"]["ItemsAdAccounts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdAccounts"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single ad_accounts item by unique identifier.
   */
  readSingleItemsAdAccounts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdAccounts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing ad_accounts item.
   */
  deleteSingleItemsAdAccounts: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing ad_accounts item.
   */
  updateSingleItemsAdAccounts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAdAccounts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAdAccounts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_affiliates items.
   */
  readItemsSaasAffiliates: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasAffiliates"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_affiliates item.
   */
  createItemsSaasAffiliates: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasAffiliates"][] | components["schemas"]["ItemsSaasAffiliates"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasAffiliates"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_affiliates items.
   */
  deleteItemsSaasAffiliates: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_affiliates items at the same time.
   */
  updateItemsSaasAffiliates: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasAffiliates"][] | components["schemas"]["ItemsSaasAffiliates"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasAffiliates"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_affiliates item by unique identifier.
   */
  readSingleItemsSaasAffiliates: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasAffiliates"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_affiliates item.
   */
  deleteSingleItemsSaasAffiliates: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_affiliates item.
   */
  updateSingleItemsSaasAffiliates: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasAffiliates"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasAffiliates"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_datasources_tables items.
   */
  readItemsBotsDatasourcesTables: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasourcesTables"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_datasources_tables item.
   */
  createItemsBotsDatasourcesTables: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDatasourcesTables"][] | components["schemas"]["ItemsBotsDatasourcesTables"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasourcesTables"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_datasources_tables items.
   */
  deleteItemsBotsDatasourcesTables: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_datasources_tables items at the same time.
   */
  updateItemsBotsDatasourcesTables: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDatasourcesTables"][] | components["schemas"]["ItemsBotsDatasourcesTables"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasourcesTables"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_datasources_tables item by unique identifier.
   */
  readSingleItemsBotsDatasourcesTables: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasourcesTables"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_datasources_tables item.
   */
  deleteSingleItemsBotsDatasourcesTables: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_datasources_tables item.
   */
  updateSingleItemsBotsDatasourcesTables: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDatasourcesTables"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasourcesTables"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_affiliate_monthly_stats items.
   */
  readItemsSaasAffiliateMonthlyStats: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasAffiliateMonthlyStats"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_affiliate_monthly_stats item.
   */
  createItemsSaasAffiliateMonthlyStats: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasAffiliateMonthlyStats"][] | components["schemas"]["ItemsSaasAffiliateMonthlyStats"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasAffiliateMonthlyStats"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_affiliate_monthly_stats items.
   */
  deleteItemsSaasAffiliateMonthlyStats: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_affiliate_monthly_stats items at the same time.
   */
  updateItemsSaasAffiliateMonthlyStats: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasAffiliateMonthlyStats"][] | components["schemas"]["ItemsSaasAffiliateMonthlyStats"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasAffiliateMonthlyStats"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_affiliate_monthly_stats item by unique identifier.
   */
  readSingleItemsSaasAffiliateMonthlyStats: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasAffiliateMonthlyStats"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_affiliate_monthly_stats item.
   */
  deleteSingleItemsSaasAffiliateMonthlyStats: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_affiliate_monthly_stats item.
   */
  updateSingleItemsSaasAffiliateMonthlyStats: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasAffiliateMonthlyStats"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasAffiliateMonthlyStats"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_commission_payments items.
   */
  readItemsSaasCommissionPayments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCommissionPayments"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_commission_payments item.
   */
  createItemsSaasCommissionPayments: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCommissionPayments"][] | components["schemas"]["ItemsSaasCommissionPayments"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCommissionPayments"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_commission_payments items.
   */
  deleteItemsSaasCommissionPayments: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_commission_payments items at the same time.
   */
  updateItemsSaasCommissionPayments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCommissionPayments"][] | components["schemas"]["ItemsSaasCommissionPayments"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCommissionPayments"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_commission_payments item by unique identifier.
   */
  readSingleItemsSaasCommissionPayments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCommissionPayments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_commission_payments item.
   */
  deleteSingleItemsSaasCommissionPayments: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_commission_payments item.
   */
  updateSingleItemsSaasCommissionPayments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCommissionPayments"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCommissionPayments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the mail_outbox items.
   */
  readItemsMailOutbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMailOutbox"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new mail_outbox item.
   */
  createItemsMailOutbox: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsMailOutbox"][] | components["schemas"]["ItemsMailOutbox"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMailOutbox"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing mail_outbox items.
   */
  deleteItemsMailOutbox: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple mail_outbox items at the same time.
   */
  updateItemsMailOutbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsMailOutbox"][] | components["schemas"]["ItemsMailOutbox"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMailOutbox"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single mail_outbox item by unique identifier.
   */
  readSingleItemsMailOutbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMailOutbox"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing mail_outbox item.
   */
  deleteSingleItemsMailOutbox: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing mail_outbox item.
   */
  updateSingleItemsMailOutbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsMailOutbox"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMailOutbox"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots items.
   */
  readItemsBots: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBots"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots item.
   */
  createItemsBots: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBots"][] | components["schemas"]["ItemsBots"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBots"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots items.
   */
  deleteItemsBots: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots items at the same time.
   */
  updateItemsBots: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBots"][] | components["schemas"]["ItemsBots"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBots"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots item by unique identifier.
   */
  readSingleItemsBots: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBots"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots item.
   */
  deleteSingleItemsBots: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots item.
   */
  updateSingleItemsBots: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBots"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBots"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_invoices items.
   */
  readItemsSaasInvoices: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasInvoices"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_invoices item.
   */
  createItemsSaasInvoices: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasInvoices"][] | components["schemas"]["ItemsSaasInvoices"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasInvoices"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_invoices items.
   */
  deleteItemsSaasInvoices: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_invoices items at the same time.
   */
  updateItemsSaasInvoices: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasInvoices"][] | components["schemas"]["ItemsSaasInvoices"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasInvoices"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_invoices item by unique identifier.
   */
  readSingleItemsSaasInvoices: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasInvoices"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_invoices item.
   */
  deleteSingleItemsSaasInvoices: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_invoices item.
   */
  updateSingleItemsSaasInvoices: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasInvoices"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasInvoices"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_helpdesk items.
   */
  readItemsSaasHelpdesk: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasHelpdesk"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_helpdesk item.
   */
  createItemsSaasHelpdesk: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasHelpdesk"][] | components["schemas"]["ItemsSaasHelpdesk"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasHelpdesk"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_helpdesk items.
   */
  deleteItemsSaasHelpdesk: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_helpdesk items at the same time.
   */
  updateItemsSaasHelpdesk: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasHelpdesk"][] | components["schemas"]["ItemsSaasHelpdesk"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasHelpdesk"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_helpdesk item by unique identifier.
   */
  readSingleItemsSaasHelpdesk: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasHelpdesk"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_helpdesk item.
   */
  deleteSingleItemsSaasHelpdesk: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_helpdesk item.
   */
  updateSingleItemsSaasHelpdesk: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasHelpdesk"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasHelpdesk"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_coupon_campaigns items.
   */
  readItemsSaasCouponCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCouponCampaigns"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_coupon_campaigns item.
   */
  createItemsSaasCouponCampaigns: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCouponCampaigns"][] | components["schemas"]["ItemsSaasCouponCampaigns"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCouponCampaigns"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_coupon_campaigns items.
   */
  deleteItemsSaasCouponCampaigns: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_coupon_campaigns items at the same time.
   */
  updateItemsSaasCouponCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCouponCampaigns"][] | components["schemas"]["ItemsSaasCouponCampaigns"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCouponCampaigns"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_coupon_campaigns item by unique identifier.
   */
  readSingleItemsSaasCouponCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCouponCampaigns"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_coupon_campaigns item.
   */
  deleteSingleItemsSaasCouponCampaigns: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_coupon_campaigns item.
   */
  updateSingleItemsSaasCouponCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCouponCampaigns"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCouponCampaigns"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_terms items.
   */
  readItemsSaasTerms: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTerms"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_terms item.
   */
  createItemsSaasTerms: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTerms"][] | components["schemas"]["ItemsSaasTerms"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTerms"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_terms items.
   */
  deleteItemsSaasTerms: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_terms items at the same time.
   */
  updateItemsSaasTerms: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTerms"][] | components["schemas"]["ItemsSaasTerms"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTerms"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_terms item by unique identifier.
   */
  readSingleItemsSaasTerms: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTerms"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_terms item.
   */
  deleteSingleItemsSaasTerms: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_terms item.
   */
  updateSingleItemsSaasTerms: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTerms"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTerms"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_coupons items.
   */
  readItemsSaasCoupons: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCoupons"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_coupons item.
   */
  createItemsSaasCoupons: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCoupons"][] | components["schemas"]["ItemsSaasCoupons"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCoupons"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_coupons items.
   */
  deleteItemsSaasCoupons: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_coupons items at the same time.
   */
  updateItemsSaasCoupons: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCoupons"][] | components["schemas"]["ItemsSaasCoupons"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCoupons"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_coupons item by unique identifier.
   */
  readSingleItemsSaasCoupons: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCoupons"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_coupons item.
   */
  deleteSingleItemsSaasCoupons: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_coupons item.
   */
  updateSingleItemsSaasCoupons: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCoupons"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCoupons"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bot_documents_files items.
   */
  readItemsBotDocumentsFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotDocumentsFiles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bot_documents_files item.
   */
  createItemsBotDocumentsFiles: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotDocumentsFiles"][] | components["schemas"]["ItemsBotDocumentsFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotDocumentsFiles"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bot_documents_files items.
   */
  deleteItemsBotDocumentsFiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bot_documents_files items at the same time.
   */
  updateItemsBotDocumentsFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotDocumentsFiles"][] | components["schemas"]["ItemsBotDocumentsFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotDocumentsFiles"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bot_documents_files item by unique identifier.
   */
  readSingleItemsBotDocumentsFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotDocumentsFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bot_documents_files item.
   */
  deleteSingleItemsBotDocumentsFiles: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bot_documents_files item.
   */
  updateSingleItemsBotDocumentsFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotDocumentsFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotDocumentsFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_model items.
   */
  readItemsBotsModel: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsModel"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_model item.
   */
  createItemsBotsModel: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsModel"][] | components["schemas"]["ItemsBotsModel"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsModel"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_model items.
   */
  deleteItemsBotsModel: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_model items at the same time.
   */
  updateItemsBotsModel: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsModel"][] | components["schemas"]["ItemsBotsModel"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsModel"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_model item by unique identifier.
   */
  readSingleItemsBotsModel: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsModel"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_model item.
   */
  deleteSingleItemsBotsModel: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_model item.
   */
  updateSingleItemsBotsModel: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsModel"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsModel"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_features items.
   */
  readItemsSaasFeatures: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasFeatures"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_features item.
   */
  createItemsSaasFeatures: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasFeatures"][] | components["schemas"]["ItemsSaasFeatures"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasFeatures"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_features items.
   */
  deleteItemsSaasFeatures: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_features items at the same time.
   */
  updateItemsSaasFeatures: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasFeatures"][] | components["schemas"]["ItemsSaasFeatures"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasFeatures"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_features item by unique identifier.
   */
  readSingleItemsSaasFeatures: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasFeatures"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_features item.
   */
  deleteSingleItemsSaasFeatures: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_features item.
   */
  updateSingleItemsSaasFeatures: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasFeatures"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasFeatures"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_datasources_fields items.
   */
  readItemsBotsDatasourcesFields: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasourcesFields"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_datasources_fields item.
   */
  createItemsBotsDatasourcesFields: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDatasourcesFields"][] | components["schemas"]["ItemsBotsDatasourcesFields"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasourcesFields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_datasources_fields items.
   */
  deleteItemsBotsDatasourcesFields: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_datasources_fields items at the same time.
   */
  updateItemsBotsDatasourcesFields: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDatasourcesFields"][] | components["schemas"]["ItemsBotsDatasourcesFields"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasourcesFields"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_datasources_fields item by unique identifier.
   */
  readSingleItemsBotsDatasourcesFields: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasourcesFields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_datasources_fields item.
   */
  deleteSingleItemsBotsDatasourcesFields: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_datasources_fields item.
   */
  updateSingleItemsBotsDatasourcesFields: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDatasourcesFields"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDatasourcesFields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the tmp items.
   */
  readItemsTmp: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTmp"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new tmp item.
   */
  createItemsTmp: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTmp"][] | components["schemas"]["ItemsTmp"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTmp"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing tmp items.
   */
  deleteItemsTmp: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple tmp items at the same time.
   */
  updateItemsTmp: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTmp"][] | components["schemas"]["ItemsTmp"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTmp"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single tmp item by unique identifier.
   */
  readSingleItemsTmp: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTmp"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing tmp item.
   */
  deleteSingleItemsTmp: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing tmp item.
   */
  updateSingleItemsTmp: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTmp"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTmp"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_muted_users items.
   */
  readItemsBotsMutedUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsMutedUsers"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_muted_users item.
   */
  createItemsBotsMutedUsers: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsMutedUsers"][] | components["schemas"]["ItemsBotsMutedUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsMutedUsers"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_muted_users items.
   */
  deleteItemsBotsMutedUsers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_muted_users items at the same time.
   */
  updateItemsBotsMutedUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsMutedUsers"][] | components["schemas"]["ItemsBotsMutedUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsMutedUsers"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_muted_users item by unique identifier.
   */
  readSingleItemsBotsMutedUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsMutedUsers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_muted_users item.
   */
  deleteSingleItemsBotsMutedUsers: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_muted_users item.
   */
  updateSingleItemsBotsMutedUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsMutedUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsMutedUsers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the vouchers_users items.
   */
  readItemsVouchersUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersUsers"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new vouchers_users item.
   */
  createItemsVouchersUsers: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersUsers"][] | components["schemas"]["ItemsVouchersUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersUsers"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing vouchers_users items.
   */
  deleteItemsVouchersUsers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple vouchers_users items at the same time.
   */
  updateItemsVouchersUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersUsers"][] | components["schemas"]["ItemsVouchersUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersUsers"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single vouchers_users item by unique identifier.
   */
  readSingleItemsVouchersUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersUsers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing vouchers_users item.
   */
  deleteSingleItemsVouchersUsers: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing vouchers_users item.
   */
  updateSingleItemsVouchersUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersUsers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the vouchers items.
   */
  readItemsVouchers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchers"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new vouchers item.
   */
  createItemsVouchers: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchers"][] | components["schemas"]["ItemsVouchers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchers"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing vouchers items.
   */
  deleteItemsVouchers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple vouchers items at the same time.
   */
  updateItemsVouchers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchers"][] | components["schemas"]["ItemsVouchers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchers"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single vouchers item by unique identifier.
   */
  readSingleItemsVouchers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing vouchers item.
   */
  deleteSingleItemsVouchers: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing vouchers item.
   */
  updateSingleItemsVouchers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the orders items.
   */
  readItemsOrders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrders"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new orders item.
   */
  createItemsOrders: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsOrders"][] | components["schemas"]["ItemsOrders"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrders"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing orders items.
   */
  deleteItemsOrders: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple orders items at the same time.
   */
  updateItemsOrders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsOrders"][] | components["schemas"]["ItemsOrders"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrders"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single orders item by unique identifier.
   */
  readSingleItemsOrders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing orders item.
   */
  deleteSingleItemsOrders: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing orders item.
   */
  updateSingleItemsOrders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsOrders"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the products items.
   */
  readItemsProducts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProducts"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new products item.
   */
  createItemsProducts: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsProducts"][] | components["schemas"]["ItemsProducts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProducts"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing products items.
   */
  deleteItemsProducts: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple products items at the same time.
   */
  updateItemsProducts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsProducts"][] | components["schemas"]["ItemsProducts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProducts"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single products item by unique identifier.
   */
  readSingleItemsProducts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProducts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing products item.
   */
  deleteSingleItemsProducts: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing products item.
   */
  updateSingleItemsProducts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsProducts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProducts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the orderbots items.
   */
  readItemsOrderbots: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrderbots"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new orderbots item.
   */
  createItemsOrderbots: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsOrderbots"][] | components["schemas"]["ItemsOrderbots"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrderbots"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing orderbots items.
   */
  deleteItemsOrderbots: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple orderbots items at the same time.
   */
  updateItemsOrderbots: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsOrderbots"][] | components["schemas"]["ItemsOrderbots"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrderbots"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single orderbots item by unique identifier.
   */
  readSingleItemsOrderbots: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrderbots"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing orderbots item.
   */
  deleteSingleItemsOrderbots: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing orderbots item.
   */
  updateSingleItemsOrderbots: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsOrderbots"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrderbots"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the vouchers_codes items.
   */
  readItemsVouchersCodes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersCodes"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new vouchers_codes item.
   */
  createItemsVouchersCodes: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersCodes"][] | components["schemas"]["ItemsVouchersCodes"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersCodes"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing vouchers_codes items.
   */
  deleteItemsVouchersCodes: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple vouchers_codes items at the same time.
   */
  updateItemsVouchersCodes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersCodes"][] | components["schemas"]["ItemsVouchersCodes"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersCodes"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single vouchers_codes item by unique identifier.
   */
  readSingleItemsVouchersCodes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersCodes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing vouchers_codes item.
   */
  deleteSingleItemsVouchersCodes: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing vouchers_codes item.
   */
  updateSingleItemsVouchersCodes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersCodes"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersCodes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the orderbots_channels items.
   */
  readItemsOrderbotsChannels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrderbotsChannels"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new orderbots_channels item.
   */
  createItemsOrderbotsChannels: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsOrderbotsChannels"][] | components["schemas"]["ItemsOrderbotsChannels"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrderbotsChannels"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing orderbots_channels items.
   */
  deleteItemsOrderbotsChannels: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple orderbots_channels items at the same time.
   */
  updateItemsOrderbotsChannels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsOrderbotsChannels"][] | components["schemas"]["ItemsOrderbotsChannels"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrderbotsChannels"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single orderbots_channels item by unique identifier.
   */
  readSingleItemsOrderbotsChannels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrderbotsChannels"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing orderbots_channels item.
   */
  deleteSingleItemsOrderbotsChannels: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing orderbots_channels item.
   */
  updateSingleItemsOrderbotsChannels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsOrderbotsChannels"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsOrderbotsChannels"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the user_profile items.
   */
  readItemsUserProfile: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserProfile"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new user_profile item.
   */
  createItemsUserProfile: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserProfile"][] | components["schemas"]["ItemsUserProfile"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserProfile"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing user_profile items.
   */
  deleteItemsUserProfile: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple user_profile items at the same time.
   */
  updateItemsUserProfile: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserProfile"][] | components["schemas"]["ItemsUserProfile"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserProfile"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single user_profile item by unique identifier.
   */
  readSingleItemsUserProfile: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserProfile"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing user_profile item.
   */
  deleteSingleItemsUserProfile: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing user_profile item.
   */
  updateSingleItemsUserProfile: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserProfile"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserProfile"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_orders items.
   */
  readItemsBotsOrders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsOrders"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_orders item.
   */
  createItemsBotsOrders: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsOrders"][] | components["schemas"]["ItemsBotsOrders"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsOrders"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_orders items.
   */
  deleteItemsBotsOrders: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_orders items at the same time.
   */
  updateItemsBotsOrders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsOrders"][] | components["schemas"]["ItemsBotsOrders"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsOrders"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_orders item by unique identifier.
   */
  readSingleItemsBotsOrders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsOrders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_orders item.
   */
  deleteSingleItemsBotsOrders: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_orders item.
   */
  updateSingleItemsBotsOrders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsOrders"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsOrders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_teams_invites items.
   */
  readItemsSaasTeamsInvites: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeamsInvites"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_teams_invites item.
   */
  createItemsSaasTeamsInvites: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTeamsInvites"][] | components["schemas"]["ItemsSaasTeamsInvites"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeamsInvites"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_teams_invites items.
   */
  deleteItemsSaasTeamsInvites: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_teams_invites items at the same time.
   */
  updateItemsSaasTeamsInvites: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTeamsInvites"][] | components["schemas"]["ItemsSaasTeamsInvites"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeamsInvites"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_teams_invites item by unique identifier.
   */
  readSingleItemsSaasTeamsInvites: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeamsInvites"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_teams_invites item.
   */
  deleteSingleItemsSaasTeamsInvites: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_teams_invites item.
   */
  updateSingleItemsSaasTeamsInvites: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTeamsInvites"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTeamsInvites"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_fallback items.
   */
  readItemsBotsFallback: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsFallback"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_fallback item.
   */
  createItemsBotsFallback: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsFallback"][] | components["schemas"]["ItemsBotsFallback"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsFallback"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_fallback items.
   */
  deleteItemsBotsFallback: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_fallback items at the same time.
   */
  updateItemsBotsFallback: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsFallback"][] | components["schemas"]["ItemsBotsFallback"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsFallback"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_fallback item by unique identifier.
   */
  readSingleItemsBotsFallback: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsFallback"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_fallback item.
   */
  deleteSingleItemsBotsFallback: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_fallback item.
   */
  updateSingleItemsBotsFallback: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsFallback"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsFallback"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Comments
   * @description List the comments.
   */
  getComments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        page?: components["parameters"]["Page"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Comments"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create a Comment
   * @description Create a new comment.
   */
  createComment: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Which collection this collection comment is for.
           * @example projects
           */
          collection: string;
          /** @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28 */
          item: string;
          /** @example A new comment */
          comment: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Comments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Comments
   * @description Delete multiple existing comments.
   */
  deleteComments: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Comments
   * @description Update multiple comments at the same time.
   */
  updateComments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          keys?: string[];
          data?: {
            /**
             * @description Which collection this collection comment is for.
             * @example projects
             */
            collection: string;
            /** @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28 */
            item?: string;
            /** @example A new comment */
            comment?: string;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Comments"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Comment
   * @description Retrieve a single comment by unique identifier.
   */
  getComment: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Comments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete a Comment
   * @description Delete an existing comment.
   */
  deleteComment: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update a Comment
   * @description Update an existing comment.
   */
  updateComment: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Which collection this comment is for.
           * @example projects
           */
          collection: string;
          /** @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28 */
          item?: string;
          /** @example An updated comment */
          comment?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Comments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_knowledges_files items.
   */
  readItemsBotsKnowledgesFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledgesFiles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_knowledges_files item.
   */
  createItemsBotsKnowledgesFiles: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsKnowledgesFiles"][] | components["schemas"]["ItemsBotsKnowledgesFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledgesFiles"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_knowledges_files items.
   */
  deleteItemsBotsKnowledgesFiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_knowledges_files items at the same time.
   */
  updateItemsBotsKnowledgesFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsKnowledgesFiles"][] | components["schemas"]["ItemsBotsKnowledgesFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledgesFiles"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_knowledges_files item by unique identifier.
   */
  readSingleItemsBotsKnowledgesFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledgesFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_knowledges_files item.
   */
  deleteSingleItemsBotsKnowledgesFiles: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_knowledges_files item.
   */
  updateSingleItemsBotsKnowledgesFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsKnowledgesFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledgesFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the user_feedback items.
   */
  readItemsUserFeedback: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserFeedback"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new user_feedback item.
   */
  createItemsUserFeedback: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserFeedback"][] | components["schemas"]["ItemsUserFeedback"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserFeedback"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing user_feedback items.
   */
  deleteItemsUserFeedback: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple user_feedback items at the same time.
   */
  updateItemsUserFeedback: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserFeedback"][] | components["schemas"]["ItemsUserFeedback"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserFeedback"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single user_feedback item by unique identifier.
   */
  readSingleItemsUserFeedback: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserFeedback"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing user_feedback item.
   */
  deleteSingleItemsUserFeedback: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing user_feedback item.
   */
  updateSingleItemsUserFeedback: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserFeedback"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserFeedback"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_knowledges_files_1 items.
   */
  readItemsBotsKnowledgesFiles1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledgesFiles1"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_knowledges_files_1 item.
   */
  createItemsBotsKnowledgesFiles1: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsKnowledgesFiles1"][] | components["schemas"]["ItemsBotsKnowledgesFiles1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledgesFiles1"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_knowledges_files_1 items.
   */
  deleteItemsBotsKnowledgesFiles1: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_knowledges_files_1 items at the same time.
   */
  updateItemsBotsKnowledgesFiles1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsKnowledgesFiles1"][] | components["schemas"]["ItemsBotsKnowledgesFiles1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledgesFiles1"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_knowledges_files_1 item by unique identifier.
   */
  readSingleItemsBotsKnowledgesFiles1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledgesFiles1"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_knowledges_files_1 item.
   */
  deleteSingleItemsBotsKnowledgesFiles1: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_knowledges_files_1 item.
   */
  updateSingleItemsBotsKnowledgesFiles1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsKnowledgesFiles1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsKnowledgesFiles1"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_coupons_translations items.
   */
  readItemsSaasCouponsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCouponsTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_coupons_translations item.
   */
  createItemsSaasCouponsTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCouponsTranslations"][] | components["schemas"]["ItemsSaasCouponsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCouponsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_coupons_translations items.
   */
  deleteItemsSaasCouponsTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_coupons_translations items at the same time.
   */
  updateItemsSaasCouponsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCouponsTranslations"][] | components["schemas"]["ItemsSaasCouponsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCouponsTranslations"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_coupons_translations item by unique identifier.
   */
  readSingleItemsSaasCouponsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCouponsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_coupons_translations item.
   */
  deleteSingleItemsSaasCouponsTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_coupons_translations item.
   */
  updateSingleItemsSaasCouponsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasCouponsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasCouponsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the tasks items.
   */
  readItemsTasks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTasks"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new tasks item.
   */
  createItemsTasks: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTasks"][] | components["schemas"]["ItemsTasks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTasks"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing tasks items.
   */
  deleteItemsTasks: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple tasks items at the same time.
   */
  updateItemsTasks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTasks"][] | components["schemas"]["ItemsTasks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTasks"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single tasks item by unique identifier.
   */
  readSingleItemsTasks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTasks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing tasks item.
   */
  deleteSingleItemsTasks: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing tasks item.
   */
  updateSingleItemsTasks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTasks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTasks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_documents items.
   */
  readItemsBotsDocuments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDocuments"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_documents item.
   */
  createItemsBotsDocuments: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDocuments"][] | components["schemas"]["ItemsBotsDocuments"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDocuments"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_documents items.
   */
  deleteItemsBotsDocuments: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_documents items at the same time.
   */
  updateItemsBotsDocuments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDocuments"][] | components["schemas"]["ItemsBotsDocuments"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDocuments"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_documents item by unique identifier.
   */
  readSingleItemsBotsDocuments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDocuments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_documents item.
   */
  deleteSingleItemsBotsDocuments: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_documents item.
   */
  updateSingleItemsBotsDocuments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsDocuments"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsDocuments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the mail_templates items.
   */
  readItemsMailTemplates: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMailTemplates"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new mail_templates item.
   */
  createItemsMailTemplates: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsMailTemplates"][] | components["schemas"]["ItemsMailTemplates"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMailTemplates"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing mail_templates items.
   */
  deleteItemsMailTemplates: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple mail_templates items at the same time.
   */
  updateItemsMailTemplates: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsMailTemplates"][] | components["schemas"]["ItemsMailTemplates"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMailTemplates"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single mail_templates item by unique identifier.
   */
  readSingleItemsMailTemplates: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMailTemplates"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing mail_templates item.
   */
  deleteSingleItemsMailTemplates: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing mail_templates item.
   */
  updateSingleItemsMailTemplates: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsMailTemplates"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMailTemplates"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the vouchers_brands items.
   */
  readItemsVouchersBrands: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersBrands"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new vouchers_brands item.
   */
  createItemsVouchersBrands: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersBrands"][] | components["schemas"]["ItemsVouchersBrands"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersBrands"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing vouchers_brands items.
   */
  deleteItemsVouchersBrands: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple vouchers_brands items at the same time.
   */
  updateItemsVouchersBrands: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersBrands"][] | components["schemas"]["ItemsVouchersBrands"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersBrands"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single vouchers_brands item by unique identifier.
   */
  readSingleItemsVouchersBrands: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersBrands"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing vouchers_brands item.
   */
  deleteSingleItemsVouchersBrands: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing vouchers_brands item.
   */
  updateSingleItemsVouchersBrands: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersBrands"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersBrands"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the channel_users items.
   */
  readItemsChannelUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelUsers"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new channel_users item.
   */
  createItemsChannelUsers: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelUsers"][] | components["schemas"]["ItemsChannelUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelUsers"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing channel_users items.
   */
  deleteItemsChannelUsers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple channel_users items at the same time.
   */
  updateItemsChannelUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelUsers"][] | components["schemas"]["ItemsChannelUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelUsers"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single channel_users item by unique identifier.
   */
  readSingleItemsChannelUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelUsers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing channel_users item.
   */
  deleteSingleItemsChannelUsers: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing channel_users item.
   */
  updateSingleItemsChannelUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelUsers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelUsers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the test items.
   */
  readItemsTest: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTest"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new test item.
   */
  createItemsTest: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTest"][] | components["schemas"]["ItemsTest"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTest"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing test items.
   */
  deleteItemsTest: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple test items at the same time.
   */
  updateItemsTest: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTest"][] | components["schemas"]["ItemsTest"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTest"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single test item by unique identifier.
   */
  readSingleItemsTest: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTest"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing test item.
   */
  deleteSingleItemsTest: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing test item.
   */
  updateSingleItemsTest: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTest"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTest"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the saas_terms_translations items.
   */
  readItemsSaasTermsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTermsTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new saas_terms_translations item.
   */
  createItemsSaasTermsTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTermsTranslations"][] | components["schemas"]["ItemsSaasTermsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTermsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing saas_terms_translations items.
   */
  deleteItemsSaasTermsTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple saas_terms_translations items at the same time.
   */
  updateItemsSaasTermsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTermsTranslations"][] | components["schemas"]["ItemsSaasTermsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTermsTranslations"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single saas_terms_translations item by unique identifier.
   */
  readSingleItemsSaasTermsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTermsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing saas_terms_translations item.
   */
  deleteSingleItemsSaasTermsTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing saas_terms_translations item.
   */
  updateSingleItemsSaasTermsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSaasTermsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSaasTermsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bots_inquiries items.
   */
  readItemsBotsInquiries: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsInquiries"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bots_inquiries item.
   */
  createItemsBotsInquiries: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsInquiries"][] | components["schemas"]["ItemsBotsInquiries"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsInquiries"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bots_inquiries items.
   */
  deleteItemsBotsInquiries: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bots_inquiries items at the same time.
   */
  updateItemsBotsInquiries: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsInquiries"][] | components["schemas"]["ItemsBotsInquiries"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsInquiries"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bots_inquiries item by unique identifier.
   */
  readSingleItemsBotsInquiries: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsInquiries"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bots_inquiries item.
   */
  deleteSingleItemsBotsInquiries: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bots_inquiries item.
   */
  updateSingleItemsBotsInquiries: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotsInquiries"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotsInquiries"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the chat_hubs items.
   */
  readItemsChatHubs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChatHubs"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new chat_hubs item.
   */
  createItemsChatHubs: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChatHubs"][] | components["schemas"]["ItemsChatHubs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChatHubs"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing chat_hubs items.
   */
  deleteItemsChatHubs: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple chat_hubs items at the same time.
   */
  updateItemsChatHubs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChatHubs"][] | components["schemas"]["ItemsChatHubs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChatHubs"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single chat_hubs item by unique identifier.
   */
  readSingleItemsChatHubs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChatHubs"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing chat_hubs item.
   */
  deleteSingleItemsChatHubs: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing chat_hubs item.
   */
  updateSingleItemsChatHubs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChatHubs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChatHubs"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the bot_documents items.
   */
  readItemsBotDocuments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotDocuments"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new bot_documents item.
   */
  createItemsBotDocuments: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotDocuments"][] | components["schemas"]["ItemsBotDocuments"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotDocuments"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing bot_documents items.
   */
  deleteItemsBotDocuments: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple bot_documents items at the same time.
   */
  updateItemsBotDocuments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotDocuments"][] | components["schemas"]["ItemsBotDocuments"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotDocuments"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single bot_documents item by unique identifier.
   */
  readSingleItemsBotDocuments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotDocuments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing bot_documents item.
   */
  deleteSingleItemsBotDocuments: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing bot_documents item.
   */
  updateSingleItemsBotDocuments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBotDocuments"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBotDocuments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the chat_hubs_channels items.
   */
  readItemsChatHubsChannels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChatHubsChannels"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new chat_hubs_channels item.
   */
  createItemsChatHubsChannels: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChatHubsChannels"][] | components["schemas"]["ItemsChatHubsChannels"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChatHubsChannels"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing chat_hubs_channels items.
   */
  deleteItemsChatHubsChannels: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple chat_hubs_channels items at the same time.
   */
  updateItemsChatHubsChannels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChatHubsChannels"][] | components["schemas"]["ItemsChatHubsChannels"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChatHubsChannels"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single chat_hubs_channels item by unique identifier.
   */
  readSingleItemsChatHubsChannels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChatHubsChannels"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing chat_hubs_channels item.
   */
  deleteSingleItemsChatHubsChannels: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing chat_hubs_channels item.
   */
  updateSingleItemsChatHubsChannels: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChatHubsChannels"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChatHubsChannels"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the lead_submissions items.
   */
  readItemsLeadSubmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLeadSubmissions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new lead_submissions item.
   */
  createItemsLeadSubmissions: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLeadSubmissions"][] | components["schemas"]["ItemsLeadSubmissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLeadSubmissions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing lead_submissions items.
   */
  deleteItemsLeadSubmissions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple lead_submissions items at the same time.
   */
  updateItemsLeadSubmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLeadSubmissions"][] | components["schemas"]["ItemsLeadSubmissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLeadSubmissions"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single lead_submissions item by unique identifier.
   */
  readSingleItemsLeadSubmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLeadSubmissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing lead_submissions item.
   */
  deleteSingleItemsLeadSubmissions: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing lead_submissions item.
   */
  updateSingleItemsLeadSubmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLeadSubmissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLeadSubmissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the beacons items.
   */
  readItemsBeacons: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBeacons"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new beacons item.
   */
  createItemsBeacons: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBeacons"][] | components["schemas"]["ItemsBeacons"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBeacons"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing beacons items.
   */
  deleteItemsBeacons: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple beacons items at the same time.
   */
  updateItemsBeacons: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBeacons"][] | components["schemas"]["ItemsBeacons"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBeacons"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single beacons item by unique identifier.
   */
  readSingleItemsBeacons: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBeacons"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing beacons item.
   */
  deleteSingleItemsBeacons: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing beacons item.
   */
  updateSingleItemsBeacons: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBeacons"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBeacons"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the locations items.
   */
  readItemsLocations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLocations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new locations item.
   */
  createItemsLocations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLocations"][] | components["schemas"]["ItemsLocations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLocations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing locations items.
   */
  deleteItemsLocations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple locations items at the same time.
   */
  updateItemsLocations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLocations"][] | components["schemas"]["ItemsLocations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLocations"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single locations item by unique identifier.
   */
  readSingleItemsLocations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLocations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing locations item.
   */
  deleteSingleItemsLocations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing locations item.
   */
  updateSingleItemsLocations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLocations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLocations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the zones items.
   */
  readItemsZones: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsZones"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new zones item.
   */
  createItemsZones: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsZones"][] | components["schemas"]["ItemsZones"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsZones"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing zones items.
   */
  deleteItemsZones: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple zones items at the same time.
   */
  updateItemsZones: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsZones"][] | components["schemas"]["ItemsZones"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsZones"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single zones item by unique identifier.
   */
  readSingleItemsZones: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsZones"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing zones item.
   */
  deleteSingleItemsZones: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing zones item.
   */
  updateSingleItemsZones: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsZones"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsZones"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the liff_tokens items.
   */
  readItemsLiffTokens: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLiffTokens"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new liff_tokens item.
   */
  createItemsLiffTokens: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLiffTokens"][] | components["schemas"]["ItemsLiffTokens"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLiffTokens"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing liff_tokens items.
   */
  deleteItemsLiffTokens: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple liff_tokens items at the same time.
   */
  updateItemsLiffTokens: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLiffTokens"][] | components["schemas"]["ItemsLiffTokens"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLiffTokens"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single liff_tokens item by unique identifier.
   */
  readSingleItemsLiffTokens: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLiffTokens"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing liff_tokens item.
   */
  deleteSingleItemsLiffTokens: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing liff_tokens item.
   */
  updateSingleItemsLiffTokens: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLiffTokens"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLiffTokens"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the test2 items.
   */
  readItemsTest2: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTest2"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new test2 item.
   */
  createItemsTest2: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTest2"][] | components["schemas"]["ItemsTest2"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTest2"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing test2 items.
   */
  deleteItemsTest2: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple test2 items at the same time.
   */
  updateItemsTest2: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTest2"][] | components["schemas"]["ItemsTest2"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTest2"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single test2 item by unique identifier.
   */
  readSingleItemsTest2: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTest2"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing test2 item.
   */
  deleteSingleItemsTest2: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing test2 item.
   */
  updateSingleItemsTest2: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTest2"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTest2"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the channel_notifications items.
   */
  readItemsChannelNotifications: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelNotifications"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new channel_notifications item.
   */
  createItemsChannelNotifications: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelNotifications"][] | components["schemas"]["ItemsChannelNotifications"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelNotifications"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing channel_notifications items.
   */
  deleteItemsChannelNotifications: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple channel_notifications items at the same time.
   */
  updateItemsChannelNotifications: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelNotifications"][] | components["schemas"]["ItemsChannelNotifications"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelNotifications"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single channel_notifications item by unique identifier.
   */
  readSingleItemsChannelNotifications: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelNotifications"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing channel_notifications item.
   */
  deleteSingleItemsChannelNotifications: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing channel_notifications item.
   */
  updateSingleItemsChannelNotifications: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelNotifications"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelNotifications"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages_liff_vouchers_brands items.
   */
  readItemsPagesLiffVouchersBrands: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchersBrands"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages_liff_vouchers_brands item.
   */
  createItemsPagesLiffVouchersBrands: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVouchersBrands"][] | components["schemas"]["ItemsPagesLiffVouchersBrands"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchersBrands"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages_liff_vouchers_brands items.
   */
  deleteItemsPagesLiffVouchersBrands: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages_liff_vouchers_brands items at the same time.
   */
  updateItemsPagesLiffVouchersBrands: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVouchersBrands"][] | components["schemas"]["ItemsPagesLiffVouchersBrands"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchersBrands"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages_liff_vouchers_brands item by unique identifier.
   */
  readSingleItemsPagesLiffVouchersBrands: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchersBrands"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages_liff_vouchers_brands item.
   */
  deleteSingleItemsPagesLiffVouchersBrands: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages_liff_vouchers_brands item.
   */
  updateSingleItemsPagesLiffVouchersBrands: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVouchersBrands"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchersBrands"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the channel_outboxes items.
   */
  readItemsChannelOutboxes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelOutboxes"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new channel_outboxes item.
   */
  createItemsChannelOutboxes: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelOutboxes"][] | components["schemas"]["ItemsChannelOutboxes"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelOutboxes"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing channel_outboxes items.
   */
  deleteItemsChannelOutboxes: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple channel_outboxes items at the same time.
   */
  updateItemsChannelOutboxes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelOutboxes"][] | components["schemas"]["ItemsChannelOutboxes"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelOutboxes"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single channel_outboxes item by unique identifier.
   */
  readSingleItemsChannelOutboxes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelOutboxes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing channel_outboxes item.
   */
  deleteSingleItemsChannelOutboxes: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing channel_outboxes item.
   */
  updateSingleItemsChannelOutboxes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChannelOutboxes"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChannelOutboxes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the vouchers_translations items.
   */
  readItemsVouchersTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new vouchers_translations item.
   */
  createItemsVouchersTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersTranslations"][] | components["schemas"]["ItemsVouchersTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing vouchers_translations items.
   */
  deleteItemsVouchersTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple vouchers_translations items at the same time.
   */
  updateItemsVouchersTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersTranslations"][] | components["schemas"]["ItemsVouchersTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersTranslations"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single vouchers_translations item by unique identifier.
   */
  readSingleItemsVouchersTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing vouchers_translations item.
   */
  deleteSingleItemsVouchersTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing vouchers_translations item.
   */
  updateSingleItemsVouchersTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the profiles items.
   */
  readItemsProfiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProfiles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new profiles item.
   */
  createItemsProfiles: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsProfiles"][] | components["schemas"]["ItemsProfiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProfiles"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing profiles items.
   */
  deleteItemsProfiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple profiles items at the same time.
   */
  updateItemsProfiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsProfiles"][] | components["schemas"]["ItemsProfiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProfiles"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single profiles item by unique identifier.
   */
  readSingleItemsProfiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProfiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing profiles item.
   */
  deleteSingleItemsProfiles: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing profiles item.
   */
  updateSingleItemsProfiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsProfiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProfiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages_liff_vouchers items.
   */
  readItemsPagesLiffVouchers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages_liff_vouchers item.
   */
  createItemsPagesLiffVouchers: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVouchers"][] | components["schemas"]["ItemsPagesLiffVouchers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages_liff_vouchers items.
   */
  deleteItemsPagesLiffVouchers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages_liff_vouchers items at the same time.
   */
  updateItemsPagesLiffVouchers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVouchers"][] | components["schemas"]["ItemsPagesLiffVouchers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages_liff_vouchers item by unique identifier.
   */
  readSingleItemsPagesLiffVouchers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages_liff_vouchers item.
   */
  deleteSingleItemsPagesLiffVouchers: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages_liff_vouchers item.
   */
  updateSingleItemsPagesLiffVouchers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVouchers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the point_transactions items.
   */
  readItemsPointTransactions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPointTransactions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new point_transactions item.
   */
  createItemsPointTransactions: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPointTransactions"][] | components["schemas"]["ItemsPointTransactions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPointTransactions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing point_transactions items.
   */
  deleteItemsPointTransactions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple point_transactions items at the same time.
   */
  updateItemsPointTransactions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPointTransactions"][] | components["schemas"]["ItemsPointTransactions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPointTransactions"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single point_transactions item by unique identifier.
   */
  readSingleItemsPointTransactions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPointTransactions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing point_transactions item.
   */
  deleteSingleItemsPointTransactions: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing point_transactions item.
   */
  updateSingleItemsPointTransactions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPointTransactions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPointTransactions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the user_events items.
   */
  readItemsUserEvents: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserEvents"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new user_events item.
   */
  createItemsUserEvents: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserEvents"][] | components["schemas"]["ItemsUserEvents"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserEvents"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing user_events items.
   */
  deleteItemsUserEvents: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple user_events items at the same time.
   */
  updateItemsUserEvents: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserEvents"][] | components["schemas"]["ItemsUserEvents"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserEvents"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single user_events item by unique identifier.
   */
  readSingleItemsUserEvents: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserEvents"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing user_events item.
   */
  deleteSingleItemsUserEvents: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing user_events item.
   */
  updateSingleItemsUserEvents: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserEvents"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserEvents"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the referrals items.
   */
  readItemsReferrals: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsReferrals"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new referrals item.
   */
  createItemsReferrals: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsReferrals"][] | components["schemas"]["ItemsReferrals"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsReferrals"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing referrals items.
   */
  deleteItemsReferrals: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple referrals items at the same time.
   */
  updateItemsReferrals: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsReferrals"][] | components["schemas"]["ItemsReferrals"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsReferrals"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single referrals item by unique identifier.
   */
  readSingleItemsReferrals: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsReferrals"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing referrals item.
   */
  deleteSingleItemsReferrals: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing referrals item.
   */
  updateSingleItemsReferrals: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsReferrals"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsReferrals"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the vouchers_brands_voucher_categories items.
   */
  readItemsVouchersBrandsVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersBrandsVoucherCategories"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new vouchers_brands_voucher_categories item.
   */
  createItemsVouchersBrandsVoucherCategories: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersBrandsVoucherCategories"][] | components["schemas"]["ItemsVouchersBrandsVoucherCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersBrandsVoucherCategories"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing vouchers_brands_voucher_categories items.
   */
  deleteItemsVouchersBrandsVoucherCategories: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple vouchers_brands_voucher_categories items at the same time.
   */
  updateItemsVouchersBrandsVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersBrandsVoucherCategories"][] | components["schemas"]["ItemsVouchersBrandsVoucherCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersBrandsVoucherCategories"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single vouchers_brands_voucher_categories item by unique identifier.
   */
  readSingleItemsVouchersBrandsVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersBrandsVoucherCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing vouchers_brands_voucher_categories item.
   */
  deleteSingleItemsVouchersBrandsVoucherCategories: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing vouchers_brands_voucher_categories item.
   */
  updateSingleItemsVouchersBrandsVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersBrandsVoucherCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersBrandsVoucherCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages_liff_voucher_categories items.
   */
  readItemsPagesLiffVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVoucherCategories"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages_liff_voucher_categories item.
   */
  createItemsPagesLiffVoucherCategories: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVoucherCategories"][] | components["schemas"]["ItemsPagesLiffVoucherCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVoucherCategories"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages_liff_voucher_categories items.
   */
  deleteItemsPagesLiffVoucherCategories: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages_liff_voucher_categories items at the same time.
   */
  updateItemsPagesLiffVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVoucherCategories"][] | components["schemas"]["ItemsPagesLiffVoucherCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVoucherCategories"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages_liff_voucher_categories item by unique identifier.
   */
  readSingleItemsPagesLiffVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVoucherCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages_liff_voucher_categories item.
   */
  deleteSingleItemsPagesLiffVoucherCategories: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages_liff_voucher_categories item.
   */
  updateSingleItemsPagesLiffVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVoucherCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVoucherCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the documents items.
   */
  readItemsDocuments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDocuments"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new documents item.
   */
  createItemsDocuments: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDocuments"][] | components["schemas"]["ItemsDocuments"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDocuments"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing documents items.
   */
  deleteItemsDocuments: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple documents items at the same time.
   */
  updateItemsDocuments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDocuments"][] | components["schemas"]["ItemsDocuments"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDocuments"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single documents item by unique identifier.
   */
  readSingleItemsDocuments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDocuments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing documents item.
   */
  deleteSingleItemsDocuments: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing documents item.
   */
  updateSingleItemsDocuments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDocuments"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDocuments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages_liff_vouchers_1 items.
   */
  readItemsPagesLiffVouchers1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers1"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages_liff_vouchers_1 item.
   */
  createItemsPagesLiffVouchers1: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVouchers1"][] | components["schemas"]["ItemsPagesLiffVouchers1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers1"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages_liff_vouchers_1 items.
   */
  deleteItemsPagesLiffVouchers1: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages_liff_vouchers_1 items at the same time.
   */
  updateItemsPagesLiffVouchers1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVouchers1"][] | components["schemas"]["ItemsPagesLiffVouchers1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers1"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages_liff_vouchers_1 item by unique identifier.
   */
  readSingleItemsPagesLiffVouchers1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers1"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages_liff_vouchers_1 item.
   */
  deleteSingleItemsPagesLiffVouchers1: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages_liff_vouchers_1 item.
   */
  updateSingleItemsPagesLiffVouchers1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVouchers1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers1"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the voucher_groups_vouchers items.
   */
  readItemsVoucherGroupsVouchers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherGroupsVouchers"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new voucher_groups_vouchers item.
   */
  createItemsVoucherGroupsVouchers: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoucherGroupsVouchers"][] | components["schemas"]["ItemsVoucherGroupsVouchers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherGroupsVouchers"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing voucher_groups_vouchers items.
   */
  deleteItemsVoucherGroupsVouchers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple voucher_groups_vouchers items at the same time.
   */
  updateItemsVoucherGroupsVouchers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoucherGroupsVouchers"][] | components["schemas"]["ItemsVoucherGroupsVouchers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherGroupsVouchers"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single voucher_groups_vouchers item by unique identifier.
   */
  readSingleItemsVoucherGroupsVouchers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherGroupsVouchers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing voucher_groups_vouchers item.
   */
  deleteSingleItemsVoucherGroupsVouchers: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing voucher_groups_vouchers item.
   */
  updateSingleItemsVoucherGroupsVouchers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoucherGroupsVouchers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherGroupsVouchers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the vouchers_voucher_categories items.
   */
  readItemsVouchersVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersVoucherCategories"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new vouchers_voucher_categories item.
   */
  createItemsVouchersVoucherCategories: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersVoucherCategories"][] | components["schemas"]["ItemsVouchersVoucherCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersVoucherCategories"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing vouchers_voucher_categories items.
   */
  deleteItemsVouchersVoucherCategories: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple vouchers_voucher_categories items at the same time.
   */
  updateItemsVouchersVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersVoucherCategories"][] | components["schemas"]["ItemsVouchersVoucherCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersVoucherCategories"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single vouchers_voucher_categories item by unique identifier.
   */
  readSingleItemsVouchersVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersVoucherCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing vouchers_voucher_categories item.
   */
  deleteSingleItemsVouchersVoucherCategories: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing vouchers_voucher_categories item.
   */
  updateSingleItemsVouchersVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVouchersVoucherCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVouchersVoucherCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the voucher_categories items.
   */
  readItemsVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherCategories"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new voucher_categories item.
   */
  createItemsVoucherCategories: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoucherCategories"][] | components["schemas"]["ItemsVoucherCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherCategories"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing voucher_categories items.
   */
  deleteItemsVoucherCategories: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple voucher_categories items at the same time.
   */
  updateItemsVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoucherCategories"][] | components["schemas"]["ItemsVoucherCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherCategories"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single voucher_categories item by unique identifier.
   */
  readSingleItemsVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing voucher_categories item.
   */
  deleteSingleItemsVoucherCategories: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing voucher_categories item.
   */
  updateSingleItemsVoucherCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoucherCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoucherCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages_liff_vouchers_2 items.
   */
  readItemsPagesLiffVouchers2: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers2"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages_liff_vouchers_2 item.
   */
  createItemsPagesLiffVouchers2: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVouchers2"][] | components["schemas"]["ItemsPagesLiffVouchers2"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers2"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages_liff_vouchers_2 items.
   */
  deleteItemsPagesLiffVouchers2: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages_liff_vouchers_2 items at the same time.
   */
  updateItemsPagesLiffVouchers2: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVouchers2"][] | components["schemas"]["ItemsPagesLiffVouchers2"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers2"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages_liff_vouchers_2 item by unique identifier.
   */
  readSingleItemsPagesLiffVouchers2: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers2"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages_liff_vouchers_2 item.
   */
  deleteSingleItemsPagesLiffVouchers2: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages_liff_vouchers_2 item.
   */
  updateSingleItemsPagesLiffVouchers2: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffVouchers2"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffVouchers2"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the campaign_missions items.
   */
  readItemsCampaignMissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaignMissions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new campaign_missions item.
   */
  createItemsCampaignMissions: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCampaignMissions"][] | components["schemas"]["ItemsCampaignMissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaignMissions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing campaign_missions items.
   */
  deleteItemsCampaignMissions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple campaign_missions items at the same time.
   */
  updateItemsCampaignMissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCampaignMissions"][] | components["schemas"]["ItemsCampaignMissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaignMissions"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single campaign_missions item by unique identifier.
   */
  readSingleItemsCampaignMissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaignMissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing campaign_missions item.
   */
  deleteSingleItemsCampaignMissions: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing campaign_missions item.
   */
  updateSingleItemsCampaignMissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCampaignMissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaignMissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the campaigns items.
   */
  readItemsCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaigns"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new campaigns item.
   */
  createItemsCampaigns: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCampaigns"][] | components["schemas"]["ItemsCampaigns"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaigns"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing campaigns items.
   */
  deleteItemsCampaigns: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple campaigns items at the same time.
   */
  updateItemsCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCampaigns"][] | components["schemas"]["ItemsCampaigns"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaigns"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single campaigns item by unique identifier.
   */
  readSingleItemsCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaigns"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing campaigns item.
   */
  deleteSingleItemsCampaigns: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing campaigns item.
   */
  updateSingleItemsCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCampaigns"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCampaigns"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the user_campaign_registrations items.
   */
  readItemsUserCampaignRegistrations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserCampaignRegistrations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new user_campaign_registrations item.
   */
  createItemsUserCampaignRegistrations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserCampaignRegistrations"][] | components["schemas"]["ItemsUserCampaignRegistrations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserCampaignRegistrations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing user_campaign_registrations items.
   */
  deleteItemsUserCampaignRegistrations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple user_campaign_registrations items at the same time.
   */
  updateItemsUserCampaignRegistrations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserCampaignRegistrations"][] | components["schemas"]["ItemsUserCampaignRegistrations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserCampaignRegistrations"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single user_campaign_registrations item by unique identifier.
   */
  readSingleItemsUserCampaignRegistrations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserCampaignRegistrations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing user_campaign_registrations item.
   */
  deleteSingleItemsUserCampaignRegistrations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing user_campaign_registrations item.
   */
  updateSingleItemsUserCampaignRegistrations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserCampaignRegistrations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserCampaignRegistrations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the user_reward_credits items.
   */
  readItemsUserRewardCredits: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserRewardCredits"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new user_reward_credits item.
   */
  createItemsUserRewardCredits: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserRewardCredits"][] | components["schemas"]["ItemsUserRewardCredits"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserRewardCredits"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing user_reward_credits items.
   */
  deleteItemsUserRewardCredits: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple user_reward_credits items at the same time.
   */
  updateItemsUserRewardCredits: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserRewardCredits"][] | components["schemas"]["ItemsUserRewardCredits"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserRewardCredits"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single user_reward_credits item by unique identifier.
   */
  readSingleItemsUserRewardCredits: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserRewardCredits"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing user_reward_credits item.
   */
  deleteSingleItemsUserRewardCredits: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing user_reward_credits item.
   */
  updateSingleItemsUserRewardCredits: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserRewardCredits"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserRewardCredits"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the user_mission_submissions items.
   */
  readItemsUserMissionSubmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserMissionSubmissions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new user_mission_submissions item.
   */
  createItemsUserMissionSubmissions: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserMissionSubmissions"][] | components["schemas"]["ItemsUserMissionSubmissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserMissionSubmissions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing user_mission_submissions items.
   */
  deleteItemsUserMissionSubmissions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple user_mission_submissions items at the same time.
   */
  updateItemsUserMissionSubmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserMissionSubmissions"][] | components["schemas"]["ItemsUserMissionSubmissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserMissionSubmissions"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single user_mission_submissions item by unique identifier.
   */
  readSingleItemsUserMissionSubmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserMissionSubmissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing user_mission_submissions item.
   */
  deleteSingleItemsUserMissionSubmissions: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing user_mission_submissions item.
   */
  updateSingleItemsUserMissionSubmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUserMissionSubmissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUserMissionSubmissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the reward_credit_transactions items.
   */
  readItemsRewardCreditTransactions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRewardCreditTransactions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new reward_credit_transactions item.
   */
  createItemsRewardCreditTransactions: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRewardCreditTransactions"][] | components["schemas"]["ItemsRewardCreditTransactions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRewardCreditTransactions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing reward_credit_transactions items.
   */
  deleteItemsRewardCreditTransactions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple reward_credit_transactions items at the same time.
   */
  updateItemsRewardCreditTransactions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRewardCreditTransactions"][] | components["schemas"]["ItemsRewardCreditTransactions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRewardCreditTransactions"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single reward_credit_transactions item by unique identifier.
   */
  readSingleItemsRewardCreditTransactions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRewardCreditTransactions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing reward_credit_transactions item.
   */
  deleteSingleItemsRewardCreditTransactions: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing reward_credit_transactions item.
   */
  updateSingleItemsRewardCreditTransactions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRewardCreditTransactions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRewardCreditTransactions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages_liff_campaigns items.
   */
  readItemsPagesLiffCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffCampaigns"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages_liff_campaigns item.
   */
  createItemsPagesLiffCampaigns: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffCampaigns"][] | components["schemas"]["ItemsPagesLiffCampaigns"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffCampaigns"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages_liff_campaigns items.
   */
  deleteItemsPagesLiffCampaigns: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages_liff_campaigns items at the same time.
   */
  updateItemsPagesLiffCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffCampaigns"][] | components["schemas"]["ItemsPagesLiffCampaigns"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffCampaigns"][];
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages_liff_campaigns item by unique identifier.
   */
  readSingleItemsPagesLiffCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffCampaigns"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages_liff_campaigns item.
   */
  deleteSingleItemsPagesLiffCampaigns: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages_liff_campaigns item.
   */
  updateSingleItemsPagesLiffCampaigns: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesLiffCampaigns"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesLiffCampaigns"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
}


export type Schema = {
  llm_models: components["schemas"]["ItemsLLMModels"][];
  advance_profiles: components["schemas"]["ItemsAdvanceProfiles"][];
  advanced_profiles: components["schemas"]["ItemsAdvancedProfiles"][];
  voucher_views: components["schemas"]["ItemsVoucherViews"][];
  languages: components["schemas"]["ItemsLanguages"][];
  saas_helpdesk_translations: components["schemas"]["ItemsSaasHelpdeskTranslations"][];
  bots_user_active_sessions: components["schemas"]["ItemsBotsUserActiveSessions"][];
  bots_enabled_users: components["schemas"]["ItemsBotsEnabledUsers"][];
  page_liff_tokens: components["schemas"]["ItemsPageLiffTokens"][];
  saas_products: components["schemas"]["ItemsSaasProducts"][];
  saas_projects: components["schemas"]["ItemsSaasProjects"][];
  saas_logs: components["schemas"]["ItemsSaasLogs"][];
  saas_metrics: components["schemas"]["ItemsSaasMetrics"][];
  saas_events: components["schemas"]["ItemsSaasEvents"][];
  saas_inbox: components["schemas"]["ItemsSaasInbox"][];
  saas_teams_users: components["schemas"]["ItemsSaasTeamsUsers"][];
  saas_teams: components["schemas"]["ItemsSaasTeams"][];
  saas_tasks_files: components["schemas"]["ItemsSaasTasksFiles"][];
  saas_tasks: components["schemas"]["ItemsSaasTasks"][];
  api_logs: components["schemas"]["ItemsAPILogs"][];
  bots_directus_users: components["schemas"]["ItemsBotsDirectusUsers"][];
  bots_knowledges: components["schemas"]["ItemsBotsKnowledges"][];
  saas_prices: components["schemas"]["ItemsSaasPrices"][];
  saas_subscriptions: components["schemas"]["ItemsSaasSubscriptions"][];
  bots_logs: components["schemas"]["ItemsBotsLogs"][];
  pages_liff_page: components["schemas"]["ItemsPagesLiffPage"][];
  pages_liff: components["schemas"]["ItemsPagesLiff"][];
  channels: components["schemas"]["ItemsChannels"][];
  channels_datasets: components["schemas"]["ItemsChannelsDatasets"][];
  channels_bots: components["schemas"]["ItemsChannelsBots"][];
  saas_commission_rules: components["schemas"]["ItemsSaasCommissionRules"][];
  ad_sets: components["schemas"]["ItemsAdSets"][];
  saas_prices_translations: components["schemas"]["ItemsSaasPricesTranslations"][];
  ad_performance: components["schemas"]["ItemsAdPerformance"][];
  ai_rules: components["schemas"]["ItemsAIRules"][];
  saas_webinars: components["schemas"]["ItemsSaasWebinars"][];
  rule_executions: components["schemas"]["ItemsRuleExecutions"][];
  campaigns_ai_rules: components["schemas"]["ItemsCampaignsAIRules"][];
  ad_sets_ai_rules: components["schemas"]["ItemsAdSetsAIRules"][];
  ads_ai_rules: components["schemas"]["ItemsAdsAIRules"][];
  voucher_groups: components["schemas"]["ItemsVoucherGroups"][];
  ad_ads: components["schemas"]["ItemsAdAds"][];
  saas_referrals: components["schemas"]["ItemsSaasReferrals"][];
  saas_customers: components["schemas"]["ItemsSaasCustomers"][];
  ad_campaigns: components["schemas"]["ItemsAdCampaigns"][];
  bots_datasources: components["schemas"]["ItemsBotsDatasources"][];
  ad_accounts: components["schemas"]["ItemsAdAccounts"][];
  saas_affiliates: components["schemas"]["ItemsSaasAffiliates"][];
  bots_datasources_tables: components["schemas"]["ItemsBotsDatasourcesTables"][];
  saas_affiliate_monthly_stats: components["schemas"]["ItemsSaasAffiliateMonthlyStats"][];
  saas_commission_payments: components["schemas"]["ItemsSaasCommissionPayments"][];
  mail_outbox: components["schemas"]["ItemsMailOutbox"][];
  bots: components["schemas"]["ItemsBots"][];
  saas_invoices: components["schemas"]["ItemsSaasInvoices"][];
  saas_helpdesk: components["schemas"]["ItemsSaasHelpdesk"][];
  saas_coupon_campaigns: components["schemas"]["ItemsSaasCouponCampaigns"][];
  saas_terms: components["schemas"]["ItemsSaasTerms"][];
  saas_coupons: components["schemas"]["ItemsSaasCoupons"][];
  bot_documents_files: components["schemas"]["ItemsBotDocumentsFiles"][];
  bots_model: components["schemas"]["ItemsBotsModel"][];
  saas_features: components["schemas"]["ItemsSaasFeatures"][];
  bots_datasources_fields: components["schemas"]["ItemsBotsDatasourcesFields"][];
  tmp: components["schemas"]["ItemsTmp"][];
  bots_muted_users: components["schemas"]["ItemsBotsMutedUsers"][];
  vouchers_users: components["schemas"]["ItemsVouchersUsers"][];
  vouchers: components["schemas"]["ItemsVouchers"][];
  orders: components["schemas"]["ItemsOrders"][];
  products: components["schemas"]["ItemsProducts"][];
  orderbots: components["schemas"]["ItemsOrderbots"][];
  vouchers_codes: components["schemas"]["ItemsVouchersCodes"][];
  orderbots_channels: components["schemas"]["ItemsOrderbotsChannels"][];
  user_profile: components["schemas"]["ItemsUserProfile"][];
  bots_orders: components["schemas"]["ItemsBotsOrders"][];
  saas_teams_invites: components["schemas"]["ItemsSaasTeamsInvites"][];
  bots_fallback: components["schemas"]["ItemsBotsFallback"][];
  bots_knowledges_files: components["schemas"]["ItemsBotsKnowledgesFiles"][];
  user_feedback: components["schemas"]["ItemsUserFeedback"][];
  bots_knowledges_files_1: components["schemas"]["ItemsBotsKnowledgesFiles1"][];
  saas_coupons_translations: components["schemas"]["ItemsSaasCouponsTranslations"][];
  tasks: components["schemas"]["ItemsTasks"][];
  bots_documents: components["schemas"]["ItemsBotsDocuments"][];
  mail_templates: components["schemas"]["ItemsMailTemplates"][];
  vouchers_brands: components["schemas"]["ItemsVouchersBrands"][];
  channel_users: components["schemas"]["ItemsChannelUsers"][];
  test: components["schemas"]["ItemsTest"][];
  saas_terms_translations: components["schemas"]["ItemsSaasTermsTranslations"][];
  bots_inquiries: components["schemas"]["ItemsBotsInquiries"][];
  chat_hubs: components["schemas"]["ItemsChatHubs"][];
  bot_documents: components["schemas"]["ItemsBotDocuments"][];
  chat_hubs_channels: components["schemas"]["ItemsChatHubsChannels"][];
  lead_submissions: components["schemas"]["ItemsLeadSubmissions"][];
  beacons: components["schemas"]["ItemsBeacons"][];
  locations: components["schemas"]["ItemsLocations"][];
  zones: components["schemas"]["ItemsZones"][];
  liff_tokens: components["schemas"]["ItemsLiffTokens"][];
  test2: components["schemas"]["ItemsTest2"][];
  channel_notifications: components["schemas"]["ItemsChannelNotifications"][];
  pages_liff_vouchers_brands: components["schemas"]["ItemsPagesLiffVouchersBrands"][];
  channel_outboxes: components["schemas"]["ItemsChannelOutboxes"][];
  vouchers_translations: components["schemas"]["ItemsVouchersTranslations"][];
  profiles: components["schemas"]["ItemsProfiles"][];
  pages_liff_vouchers: components["schemas"]["ItemsPagesLiffVouchers"][];
  point_transactions: components["schemas"]["ItemsPointTransactions"][];
  user_events: components["schemas"]["ItemsUserEvents"][];
  referrals: components["schemas"]["ItemsReferrals"][];
  vouchers_brands_voucher_categories: components["schemas"]["ItemsVouchersBrandsVoucherCategories"][];
  pages_liff_voucher_categories: components["schemas"]["ItemsPagesLiffVoucherCategories"][];
  documents: components["schemas"]["ItemsDocuments"][];
  pages_liff_vouchers_1: components["schemas"]["ItemsPagesLiffVouchers1"][];
  voucher_groups_vouchers: components["schemas"]["ItemsVoucherGroupsVouchers"][];
  vouchers_voucher_categories: components["schemas"]["ItemsVouchersVoucherCategories"][];
  voucher_categories: components["schemas"]["ItemsVoucherCategories"][];
  pages_liff_vouchers_2: components["schemas"]["ItemsPagesLiffVouchers2"][];
  campaign_missions: components["schemas"]["ItemsCampaignMissions"][];
  campaigns: components["schemas"]["ItemsCampaigns"][];
  user_campaign_registrations: components["schemas"]["ItemsUserCampaignRegistrations"][];
  user_reward_credits: components["schemas"]["ItemsUserRewardCredits"][];
  user_mission_submissions: components["schemas"]["ItemsUserMissionSubmissions"][];
  reward_credit_transactions: components["schemas"]["ItemsRewardCreditTransactions"][];
  pages_liff_campaigns: components["schemas"]["ItemsPagesLiffCampaigns"][];
};

