# Create an IAM role for each Lambda function
resource "aws_iam_role" "webhook_lambda_role" {
  name = "webhook-lambda-role-v2"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })

  tags = {
    Project = "webhook-line-v2"
  }

  lifecycle {
    ignore_changes = [assume_role_policy]
  }
}

# Attach necessary policies to each IAM role
resource "aws_iam_role_policy_attachment" "lambda_basic_execution" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.webhook_lambda_role.name
}

# Create a custom policy for SNS and SQS access
resource "aws_iam_policy" "webhook_lambda_role_access" {
  name        = "webhook-lambda-role-v2_access_policy"
  path        = "/"
  description = "IAM policy for SNS and SQS access"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "sns:Publish",
          "sns:Subscribe",
          "sns:Unsubscribe",
          "sns:ListSubscriptionsByTopic",
          "sqs:SendMessage",
          "sqs:ReceiveMessage",
          "sqs:DeleteMessage",
          "sqs:GetQueueAttributes",
          "sqs:GetQueueUrl",
          "sqs:ListQueues"
        ]
        Resource = "*"
      },
      {
        "Effect" : "Allow",
        "Action" : "bedrock:InvokeModel",
        "Resource" : "arn:aws:bedrock:us-west-2::foundation-model/*"
      }
    ]
  })
}

# Attach the SNS and SQS access policy to each Lambda role
resource "aws_iam_role_policy_attachment" "webhook_lambda_role_access_attachment" {
  policy_arn = aws_iam_policy.webhook_lambda_role_access.arn
  role       = aws_iam_role.webhook_lambda_role.name
}




# Attach necessary policies to each IAM role
resource "aws_iam_role_policy_attachment" "lambda_opensearch_execution" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"
  role       = aws_iam_role.webhook_lambda_role.name
}

